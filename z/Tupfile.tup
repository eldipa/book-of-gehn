# Import from the environment the variable INDOCKER.
# Then, compare it with "1" if it doesn't match stop with
# a message error.
# INDOCKER should be set to "1" to signal that we are running Tup
# in the correct docker so we can be sure that all the commands and
# scripts here will be run using the tools in the docker container
import INDOCKER
ifneq (1,$(INDOCKER))
error Stop! You must be in the container for developing.
endif

# Preprocess the first input file (%1f) with Jinja2 and output
# the resulting file into %1o.
#
# The preprocessing takes second input file that should be a YAML
# file with the configuration for the template processing.
#
# We assume that such YAML file is in next to the input file (%1f)
# but wit the additional extension .yml (%1f.yml)
#
# Because such extra input file is not going to be present in the initial
# input list, Tup will complain if the extra input file (%1f.yml) was generated
# by another Tup-rule because Tup will not be able to properly order the rules
# that *generates* the %1f.yml file and the rules that *requieres* such
# file (like the rules that use the !j2 macro below).
# To fix this, this macro adds %1f.yml in the order-only input file so Tup
# can know that this Tup-rule *depends* on that file too besides the input %1f
!j2 = |> ^ j2 %f^ j2 --customize scripts/j2helpers.py %1f %2f > %1o |>  | ^scripts/__pycache__/* ^scripts/x/__pycache__/* ^dbg/

!extract-front = |> ^ front %f^ ./scripts/front.py %1f %1o %2o %3o %4o site.yaml |>  | ^scripts/__pycache__/* ^scripts/x/__pycache__/* ^dbg/

# Compilers
!compile-scss = |> ^ compile %f^ sass --load-path=.  %1f %1o |>  | ^scripts/__pycache__/* ^scripts/x/__pycache__/* ^dbg/
!compile-md = |> ^ compile %B^ ./scripts/html.sh %1f %2f %1o |>   | ^scripts/__pycache__/* ^scripts/x/__pycache__/* ^dbg/
!combine-ymls = |> ^ combine %B^ ./scripts/combine-ymls.py %1o %f |>   | ^scripts/__pycache__/* ^scripts/x/__pycache__/* ^dbg/
!compile-search = |> ^ compile search set %o ^ node ./scripts/build_search_index.js %f > %o |>  | ^scripts/__pycache__/* ^scripts/x/__pycache__/* ^dbg/
!make-feed = |> ^ feed %B^ ./scripts/make-feed.py %1o %2o %f |>   | ^scripts/__pycache__/* ^scripts/x/__pycache__/* ^dbg/
!list-drafts = |> ^ drafts %B^ ./scripts/list-drafts.py %1f %1o |>   | ^scripts/__pycache__/* ^scripts/x/__pycache__/* ^dbg/

# Minifiers
!minify-css = |> ^ minify %f^ cleancss -O1 --source-map -o %1o %1f |>  | ^scripts/__pycache__/* ^scripts/x/__pycache__/* ^dbg/
!minify-js = |> ^ minify %f^ uglifyjs --source-map --compress --mangle -o %1o -- %1f |>  | ^scripts/__pycache__/* ^scripts/x/__pycache__/* ^dbg/
!minify-png = |> ^ minify %f^ optipng -o7 --strip all -quiet -out %1o %1f |>  | ^scripts/__pycache__/* ^scripts/x/__pycache__/* ^dbg/
!minify-gif = |> ^ minify %f^ gifsicle --no-warnings --optimize=3 -i %1f -o %1o  |>  | ^scripts/__pycache__/* ^scripts/x/__pycache__/* ^dbg/

!add-refs = |> ^ ref %B^ ./scripts/add-refs.py %f %o  |>  | ^scripts/__pycache__/* ^scripts/x/__pycache__/* ^dbg/

!convert-font = |> ^ convert %f^ ./scripts/convert-font.py %1f %1o |>  | ^scripts/__pycache__/* ^scripts/x/__pycache__/* ^dbg/


!cp = |> ^ cp %f^ cp %f %o |>



# Posts' assets pipeline
# -----------------------
{% for listfile in glob('posts/**/assets-list') -%}
# {{listfile}}
{% for f in glob_from_file(listfile) -%}
: {{f}} |> !cp|> {{ f('out/site/assets/{:f}', 'posts/') }} <postssassets>
{% endfor %}
{% endfor %}

#
# End of the Posts' assets pipeline ------


# PNG pipeline
{% for f in glob('posts/**/*.png') -%}
: {{f}} |> !minify-png |> {{f('out/site/img/{:f}', 'posts/')}} <postssassets>
{% endfor %}

{% for f in glob('z/img/**/*.png') -%}
: {{f}} |> !minify-png |> {{f('out/site/img/{:f}', 'z/img/')}} <siteresources>
{% endfor %}
#
# End of the PNG pipeline ------


# GIF pipeline
{% for f in glob('posts/**/*.gif') -%}
: {{f}} |> !minify-gif |> {{f('out/site/img/{:f}', 'posts/')}} <postssassets>
{% endfor %}

# SVG pipeline
{% for f in glob('posts/**/*.svg') -%}
: {{f}} |> !cp |> {{f('out/site/img/{:f}', 'posts/')}} <postssassets>
{% endfor %}
#
# End of the PNG pipeline ------


# CSS pipeline
# ------------

# Compile SCSS to CSS
: foreach z/css/*.scss |> !compile-scss |> out/z/css/%B.css out/z/css/%B.css.map

# Minify CSS
: foreach out/z/css/*.css |> !minify-css |> out/site/css/%B.min.css out/site/css/%B.min.css.map <siteresources>
: foreach z/css/*.css |> !minify-css |> out/site/css/%B.min.css out/site/css/%B.min.css.map <siteresources>
#
# End of the CSS pipeline ------




# Font pipeline
# -------------
#
# Convert the given fonts (TTF / WOFF) in the latest font format
# for the web: WOFF2.
#
# Input fonts of type WOFF2 are copied as they are.
#
{% for f in glob('z/fonts/**/*.woff') -%}
: {{f}} |> !convert-font |> {{f('out/site/{:f.woff2}', 'z/')}} <siteresources>
{% endfor %}

{% for f in glob('z/fonts/**/*.ttf') -%}
: {{f}} |> !convert-font |> {{f('out/site/{:f.woff2}', 'z/')}} <siteresources>
{% endfor %}

{% for f in glob('z/fonts/**/*.woff2') -%}
: {{f}} |> !cp |> {{f('out/site/{:f}', 'z/')}} <siteresources>
{% endfor %}
#
# End of the Font pipeline ------


# JS pipeline
# -----------
#
# Minify the JS files
#
# The JS files of the MathJax lib require that the minified files be
# called as if they weren't minified. This is because MathJax loads
# the files in background and it does not know that we changed their names
{% for f in glob('z/js/**/*.js') -%}
{% if "MathJax" in f %}
: {{f}} |> !minify-js |> {{f('out/site/{:f.js, .js.map}', 'z/')}} <siteresources>
{% else %}
: {{f}} |> !minify-js |> {{f('out/site/{:f.min.js, .min.js.map}', 'z/')}} <siteresources>
{% endif %}
{% endfor %}
#
# End of the JS pipeline ------


# Posts pipeline
# --------------
{% for f in glob('posts/**/*.md') -%}

{# (!extract-front) Extract the front matter (YAML) of each post and generate:
   - the post's content with a layout set (.md)
   - the post's content without a layout set (.no-layout.md)
   - the post's excerpt (.excerpt.md)
   - the front matter metadata in a yml file (.yml) #}
: {{f}} |> !extract-front |> {{ f('out/posts/front/{:n.md, .no-layout.md, .excerpt.md, .yml}') }}


{# (!j2) Process each Jinja template Markdown file reading the YAML configuration
   and generate the "final" Markdown file. The same goes for the content
   without layout and the excerpt. #}
: {{ f('out/posts/front/{:n.md, .yml}') }} |> !j2 -e ENV |> {{ f('out/posts/md/{:b}') }} {{ artifacts_of(f, rel='posts', fmt='out/site/img/{:f}') | join(' ') }}
: {{ f('out/posts/front/{:n.excerpt.md, .yml}') }} |> !j2 |> {{ f('out/posts/md/{:n.excerpt.md}') }}
: {{ f('out/posts/front/{:n.no-layout.md, .yml}') }} |> !j2 |> {{ f('out/posts/md/{:n.no-layout.md}') }}


{# (!compile-md) Compile each Markdown into a HTML
   using the yml to customize it further.
   This goes for the post with and without the layout but it does not go
   for the excerpt.
   Posts' assets (tup group) are dependency-only inputs. We require them
   not because we need them to compile the HTML but because we want to
   have them updated if someone updates the HTML (with that we can
   then serve the HTML and the assets and show them in a web browser. #}
: {{ f('out/posts/md/{:b}') }} {{ f('out/posts/front/{:n.yml}') }} \
    |  <postssassets> <siteresources>                              \
    |> !compile-md                                                 \
    |> {{ f('out/site/articles/{:D}.html') }}

: {{ f('out/posts/md/{:n.no-layout.md}') }} {{ f('out/posts/front/{:n.yml}') }} \
    |  <postssassets> <siteresources>                              \
    |> !compile-md                                                 \
    |> {{ f('out/posts/html/{:n.html}') }}


{# (!add-refs) Create an augmented metadata file (yaml) from the post's
   yaml adding file references. #}
: {{ f('out/posts/front/{:n.yml}') }}                               \
    |> !add-refs                                                    \
        excerpt-j2 {{ f('out/posts/front/{:n.excerpt.md}') }} \
        content-html {{ f('out/posts/html/{:n.html}') }}       \
    |> {{ f('out/posts/meta/{:n.yml}') }}
# ------------------------
{% endfor %}

#
# End of the Posts pipeline ------

# Pages pipeline
# --------------
{% for f in glob('pages/**/*.md', rel='pages/') -%}
{#
    Like in the Posts pipepline, extract the front matter of the Pages.
    Note: the .no-layout.md and .excerpt.md of a Page are not used. #}
: {{ f('pages/{:f}') }}                                     \
    |> !extract-front                                       \
    |> {{ f('out/pages/front/{:f.md, .no-layout.md, .excerpt.md, .yml}') }}

{#  Take each page's .yml and all the posts' .yml and create
    a single "combined" .yml so the page can refer not only its private
    metadata but also the posts' metadata as well #}
: {{ f('out/pages/front/{:f.yml}') }} {{ glob('posts/**/*.md', fmt='out/posts/meta/{:n.yml}') | join(' ') }}    \
    |> !combine-ymls                                        \
    |> {{ f('out/pages/front/{:f.comb.yml}') }}

{#  Run j2 over each page with the "combined" .yml and obtain a .md
    Make this step dependant of the excerpt files created by the Post pipeline
    because it is likely that the index page will include some of them. #}
: {{ f('out/pages/front/{:f.md, .comb.yml}') }} | {{ glob('posts/**/*.md', fmt='out/posts/md/{:n.excerpt.md}' ) | join(' ') }}    \
    |> !j2                                                  \
    |> {{ f('out/pages/md/{:f}') }}

{#  Compile the markdown and obtain the .html
    Notice how we compile only the .md (.no-layout and .excerpt are ignored #}
: {{ f('out/pages/md/{:f}') }} {{ f('out/pages/front/{:f.comb.yml}') }}     \
    |  <siteresources>                                      \
    |> !compile-md                                          \
    |> {{ f('out/site/{:f.html}') }}

{#  Build the list of DRAFTs and HIDDENs
    to be excluded from publication (see Makefile and rsync) #}
: {{ f('out/pages/front/{:f.comb.yml}') }}                  \
    |> !list-drafts                                         \
    |> {{ f('out/pages/front/{:f.drafts}') }}
# ------------------------
{% endfor %}
#
# End of the Page pipeline ------


# Feed generation
# ---------------
: site.yaml {{ glob('posts/**/*.md', fmt='out/posts/meta/{:n.yml}') | join(' ') }}      \
    | {{ glob('posts/**/*.md', fmt='out/posts/html/{:n.html}') | join(' ') }}     \
    |> !make-feed                                               \
    |> out/site/rss.xml out/site/atom.xml


# Search data generation
# ----------------------
: {{ glob('posts/**/*.md') | join(' ') }}                   \
    |> !compile-search                                      \
    |> out/site/js/search_index.js


# TUP cheatsheet
# ===============
#
# %f represents the input file name;
# %o the output file name;
# %B the basename of the input (no extension, no directory)
# %g the matched glob of a foreach



