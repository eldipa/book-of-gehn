<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.6">Jekyll</generator><link href="/book-of-gehn/feed.xml" rel="self" type="application/atom+xml" /><link href="/book-of-gehn/" rel="alternate" type="text/html" /><updated>2020-12-16T03:14:33+01:00</updated><id>/book-of-gehn/feed.xml</id><title type="html">The Book of Gehn</title><subtitle></subtitle><author><name>Gehn</name></author><entry><title type="html">QEMUlating a Rasbian (ARM)</title><link href="/book-of-gehn/articles/2020/12/15/Qemulating-Rasbian-ARM.html" rel="alternate" type="text/html" title="QEMUlating a Rasbian (ARM)" /><published>2020-12-15T00:00:00+01:00</published><updated>2020-12-15T00:00:00+01:00</updated><id>/book-of-gehn/articles/2020/12/15/Qemulating-Rasbian-ARM</id><content type="html" xml:base="/book-of-gehn/articles/2020/12/15/Qemulating-Rasbian-ARM.html">&lt;p&gt;Quick how-to download and run a Raspbian Buster (ARM) emulating
the vm with QEMU.&lt;!--more--&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Download &lt;a href=&quot;https://downloads.raspberrypi.org/raspios_lite_armhf/images/raspios_lite_armhf-2020-12-04/&quot;&gt;Raspbian lite image (Buster)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Download &lt;a href=&quot;https://github.com/dhruvvyas90/qemu-rpi-kernel&quot;&gt;kernel image&lt;/a&gt; for
Raspbian (&lt;code class=&quot;highlighter-rouge&quot;&gt;kernel-qemu-*-buster&lt;/code&gt;) and the &lt;em&gt;dtb&lt;/em&gt; file for that kernel
(&lt;code class=&quot;highlighter-rouge&quot;&gt;versatile-pb-buster-*.dtb&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;Install QEMU: &lt;code class=&quot;highlighter-rouge&quot;&gt;apt-get install qemu-system&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;preparing-the-image&quot;&gt;Preparing the image&lt;/h2&gt;

&lt;p&gt;Unpack and check the disk file.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;unzip 2020-12-02-raspios-buster-armhf-lite.zip
Archive:  2020-12-02-raspios-buster-armhf-lite.zip
  inflating: 2020-12-02-raspios-buster-armhf-lite.img

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;fdisk &lt;span class=&quot;nt&quot;&gt;-l&lt;/span&gt; 2020-12-02-raspios-buster-armhf-lite.img
Disk 2020-12-02-raspios-buster-armhf-lite.img: 1.7 GiB, 1858076672 bytes, 3629056 sectors
Units: sectors of 1 &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; 512 &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 512 bytes
Sector size &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;logical/physical&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: 512 bytes / 512 bytes
I/O size &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;minimum/optimal&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: 512 bytes / 512 bytes
Disklabel &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;: dos
Disk identifier: 0x067e19d7

Device                                    Boot  Start     End Sectors Size Id Type
2020-12-02-raspios-buster-armhf-lite.img1        8192  532479  524288 256M  c W95 FAT32 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;LBA&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
2020-12-02-raspios-buster-armhf-lite.img2      532480 3629055 3096576 1.5G 83 Linux
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Mount the second partition. Because the file has 2 partitions, we need
to set the offset where the second starts: the start sector number
multiplied by the size of each sector in bytes.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;mount &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$((&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;532480&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;512&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; ext4 2020-12-02-raspios-buster-armhf-lite.img ~/mnt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;label for=&quot;mn-041d94432f6bed87af4cb4909d1213cf&quot; class=&quot;margin-toggle&quot;&gt; ⊕&lt;/label&gt;&lt;input type=&quot;checkbox&quot; id=&quot;mn-041d94432f6bed87af4cb4909d1213cf&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;marginnote&quot;&gt;Why we need to do this? No idea. May be is related with
&lt;a href=&quot;https://stackoverflow.com/questions/45253755/why-is-the-stack-segment-executable-on-raspberry-pi&quot;&gt;this&lt;/a&gt;
 &lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Comment out any entry of &lt;code class=&quot;highlighter-rouge&quot;&gt;ld.so.preload&lt;/code&gt; adding a &lt;code class=&quot;highlighter-rouge&quot;&gt;#&lt;/code&gt; at the begin of
each line.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; ~/mnt/etc/ld.so.preload
/usr/lib/arm-linux-gnueabihf/libarmmem-&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PLATFORM&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;.so

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo sed&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'s/^.*$/#\0/'&lt;/span&gt; ~/mnt/etc/ld.so.preload
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Check the &lt;code class=&quot;highlighter-rouge&quot;&gt;fstab&lt;/code&gt;. Replace &lt;code class=&quot;highlighter-rouge&quot;&gt;/dev/mmcblk0p1&lt;/code&gt; and
&lt;code class=&quot;highlighter-rouge&quot;&gt;/dev/mmcblk0p2&lt;/code&gt; with &lt;code class=&quot;highlighter-rouge&quot;&gt;/dev/sda1&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;/dev/sda2&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In my case there are not explicit names like &lt;code class=&quot;highlighter-rouge&quot;&gt;/dev/mmcblk0p1&lt;/code&gt;. Instead,
there are UUIDs so I didn’t touch them.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cat ~/mnt/etc/fstab
proc                  /proc    proc    defaults             0   0
PARTUUID=067e19d7-01  /boot    vfat    defaults             0   2
PARTUUID=067e19d7-02  /        ext4    defaults,noatime     0   1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We are done.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;umount ~/mnt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now it is show time!&lt;/p&gt;

&lt;h2 id=&quot;running-the-os&quot;&gt;Running the OS&lt;/h2&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;qemu-system-arm                       &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-M&lt;/span&gt; versatilepb                        &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-cpu&lt;/span&gt; arm1176                          &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; 256                                &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-drive&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;file=2020-12-02-raspios-buster-armhf-lite.img,if=none,index=0,media=disk,format=raw,id=disk0&quot;&lt;/span&gt;  &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-device&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;virtio-blk-pci,drive=disk0,disable-modern=on,disable-legacy=off&quot;&lt;/span&gt;                              &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-net&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;user,hostfwd=tcp::3022-:22&quot;&lt;/span&gt;     &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-dtb&lt;/span&gt; versatile-pb-buster-5.4.51.dtb   &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-kernel&lt;/span&gt; kernel-qemu-5.4.51-buster     &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-append&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'root=/dev/vda2 panic=1'&lt;/span&gt;      &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-no-reboot&lt;/span&gt;                            &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-net&lt;/span&gt; nic                              &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-nographic&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;hostfwd=tcp::3022-:22&lt;/code&gt; tells QEMU to forward TCP connections to the
3022 port from the host to the 22 port on the guest side. More forward
rules can be added.&lt;/p&gt;

&lt;p&gt;Enable ssh (now and on boot); login with &lt;code class=&quot;highlighter-rouge&quot;&gt;pi&lt;/code&gt;/&lt;code class=&quot;highlighter-rouge&quot;&gt;raspberry&lt;/code&gt;. This will
allows us to upload/retrieve files to the vm and have additional
consoles.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ssh&quot;&gt;$ sudo service ssh start
$ sudo update-rc.d ssh enable
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, from your host connect to the vm through the port 3022.&lt;/p&gt;

&lt;p&gt;Install &lt;code class=&quot;highlighter-rouge&quot;&gt;gdbserver&lt;/code&gt; for remote debugging:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;gdbserver
Reading package lists... Done
Building dependency tree
Reading state information... Done
The following NEW packages will be installed:
  gdbserver
0 upgraded, 1 newly installed, 0 to remove and 0 not upgraded.
&amp;lt;...&amp;gt;
Preparing to unpack .../gdbserver_8.2.1-2_armhf.deb ...
Unpacking gdbserver &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;8.2.1-2&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; ...
Setting up gdbserver &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;8.2.1-2&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; ...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;enlarge-the-disk&quot;&gt;Enlarge the disk&lt;/h2&gt;

&lt;p&gt;Optionally, you can expand the disk image to have more room for your
programs.&lt;/p&gt;

&lt;p&gt;First, with QEMU turned off, expand the disk image&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;qemu-img resize 2020-12-02-raspios-buster-armhf-lite.img +1G
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now, turn on the vm and redefine the partition. In my case is the
partition number 2 (&lt;code class=&quot;highlighter-rouge&quot;&gt;/dev/vda2&lt;/code&gt;):&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pi@raspberrypi:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;fdisk /dev/vda

Command &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;m &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;help&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: p
Disk /dev/vda: 2.7 GiB, 2931818496 bytes, 5726208 sectors
Units: sectors of 1 &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; 512 &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 512 bytes
Sector size &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;logical/physical&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: 512 bytes / 512 bytes
I/O size &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;minimum/optimal&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: 512 bytes / 512 bytes
Disklabel &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;: dos
Disk identifier: 0x067e19d7

Device     Boot  Start     End Sectors  Size Id Type
/dev/vda1         8192  532479  524288  256M  c W95 FAT32 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;LBA&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
/dev/vda2       532480 3629055 3096576  1.5G 83 Linux

Command &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;m &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;help&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: d
Partition number &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1,2, default 2&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: 2

Partition 2 has been deleted.

Command &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;m &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;help&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: n
Partition &lt;span class=&quot;nb&quot;&gt;type
   &lt;/span&gt;p   primary &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1 primary, 0 extended, 3 free&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
   e   extended &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;container &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;logical partitions&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
Select &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;default p&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: p
Partition number &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;2-4, default 2&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: 2
First sector &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;2048-5726207, default 2048&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: 532480
Last sector, +/-sectors or +/-size&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;K,M,G,T,P&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;532480-5726207, default 5726207&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;:

Created a new partition 2 of &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Linux'&lt;/span&gt; and of size 2.5 GiB.
Partition &lt;span class=&quot;c&quot;&gt;#2 contains a ext4 signature.&lt;/span&gt;

Do you want to remove the signature? &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Y]es/[N]o: n

Command &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;m &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;help&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: w

The partition table has been altered.
Syncing disks.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Note that &lt;code class=&quot;highlighter-rouge&quot;&gt;fdisk&lt;/code&gt; offered by default the first sector to be 2048. This
is the space &lt;em&gt;before&lt;/em&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;/dev/vda1&lt;/code&gt; and it is too small, only 8kb.&lt;/p&gt;

&lt;p&gt;Instead we want to start &lt;em&gt;after&lt;/em&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;/dev/vda1&lt;/code&gt;, in the same sector that
the original &lt;code class=&quot;highlighter-rouge&quot;&gt;/dev/vda2&lt;/code&gt;: the 532480.&lt;/p&gt;

&lt;p&gt;From there, to the end of the disk: 5726207.&lt;/p&gt;

&lt;p&gt;With the partition expanded, reboot and then update the filesystem:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pi@raspberrypi:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;resize2fs /dev/vda2
resize2fs 1.44.5 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;15-Dec-2018&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
Filesystem at /dev/vda2 is mounted on /&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; on-line resizing required
old_desc_blocks &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 1, new_desc_blocks &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 1
The filesystem on /dev/vda2 is now 649216 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;4k&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; blocks long.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;p&gt;This tutorial setups a &lt;a href=&quot;https://azeria-labs.com/emulate-raspberry-pi-with-qemu/&quot;&gt;Raspbian Jessie in Qemu&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I adapted the steps to use a modern Raspbian Buster image.&lt;/p&gt;

&lt;p&gt;The tutorial is super complete and includes how to enlarge the disk and
setup the network.&lt;/p&gt;

&lt;p&gt;But for the enlarge the disk part, this
&lt;a href=&quot;https://gist.github.com/larsks/3933980&quot;&gt;gist&lt;/a&gt; explains the thing a
little better.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/bradfitz/embiggen-disk&quot;&gt;embiggen-disk&lt;/a&gt; seems to be a
tool to facilite the task.&lt;/p&gt;</content><author><name>Gehn</name></author><summary type="html">Quick how-to download and run a Raspbian Buster (ARM) emulating the vm with QEMU.</summary></entry><entry><title type="html">Self-Licensing</title><link href="/book-of-gehn/articles/2020/12/05/Self-Licensing.html" rel="alternate" type="text/html" title="Self-Licensing" /><published>2020-12-05T00:00:00+01:00</published><updated>2020-12-05T00:00:00+01:00</updated><id>/book-of-gehn/articles/2020/12/05/Self-Licensing</id><content type="html" xml:base="/book-of-gehn/articles/2020/12/05/Self-Licensing.html">&lt;figure&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;img class=&quot;in-index-only&quot; style=&quot;max-width:60%;&quot; alt=&quot;self-licensing&quot; src=&quot;/book-of-gehn/assets/self-licensing/self-licensing-small.png&quot; /&gt;&lt;/figure&gt;
&lt;!--more--&gt;

&lt;figure class=&quot;fullwidth&quot;&gt;&lt;img src=&quot;/book-of-gehn/assets/self-licensing/self-licensing-whole.png&quot; /&gt;&lt;figcaption&gt;Doing good things has a &quot;moral boost&quot; on the self-concept, then a person
subconsciously get &quot;self-indulgent&quot; and makes permissive
in the future to do bad actions.
&lt;br /&gt;
The person no necessary needs to do the good action to have the
&quot;moral boost&quot;: she can commit to do it in the future and that is
enough to have the boost.
&lt;br /&gt;
Even the person does not need to do anything. The boost can be
transferred from a group which the person identify herself
as belonging to.&lt;/figcaption&gt;&lt;/figure&gt;</content><author><name>Gehn</name></author><summary type="html"></summary></entry><entry><title type="html">RC-on-XDP-RX-Queue</title><link href="/book-of-gehn/articles/2020/11/29/RC-on-XDP-RX-Queue.html" rel="alternate" type="text/html" title="RC-on-XDP-RX-Queue" /><published>2020-11-29T00:00:00+01:00</published><updated>2020-11-29T00:00:00+01:00</updated><id>/book-of-gehn/articles/2020/11/29/RC-on-XDP-RX-Queue</id><content type="html" xml:base="/book-of-gehn/articles/2020/11/29/RC-on-XDP-RX-Queue.html">&lt;p&gt;&lt;label for=&quot;mf-482d5a7a07746c31570f73c75afe4260&quot; class=&quot;margin-toggle  in-index-only&quot;&gt;⊕&lt;/label&gt;&lt;input type=&quot;checkbox&quot; id=&quot;mf-482d5a7a07746c31570f73c75afe4260&quot; class=&quot;margin-toggle  in-index-only&quot; /&gt;&lt;span class=&quot;marginnote  in-index-only&quot;&gt;&lt;img style=&quot;max-width:120%;&quot; alt=&quot;RC on RX queue&quot; src=&quot;/book-of-gehn/assets/xdp-rx-rc/rx-rc-queues.png&quot; /&gt;  &lt;br /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Picture this: you’d been developing for six months a network sniffer
using XDP, a kernel &lt;em&gt;in-pass&lt;/em&gt; in Linux.&lt;/p&gt;

&lt;p&gt;Six months and when you are about to release it, you find not one but
three bugs that shake all your understanding of XDP.&lt;/p&gt;

&lt;p&gt;A debugging race against the clock begins.&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;We were hitting three issues in a row:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;RX queue returns addresses with the incorrect offset&lt;/li&gt;
  &lt;li&gt;More packets hold by the application than possible&lt;/li&gt;
  &lt;li&gt;Pointer to &lt;code class=&quot;highlighter-rouge&quot;&gt;NULL&lt;/code&gt; data&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All of them at random times but very often.&lt;/p&gt;

&lt;h2 id=&quot;xdp-rx-queue&quot;&gt;XDP RX queue&lt;/h2&gt;

&lt;p&gt;The XDP RX queue is a lock free single-producer, single-consumer queue
where the kernel plays the role of the producer and the user
application the consumer.&lt;/p&gt;

&lt;p&gt;The kernel pushes addresses (offsets respect the UMEM’s base address)
into the queue that points to the received packets.&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;pop&lt;/em&gt; has three parts:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;the user application calls &lt;code class=&quot;highlighter-rouge&quot;&gt;xsk_ring_cons__peek&lt;/code&gt; to know how many
packets are ready to be consumed.&lt;/li&gt;
  &lt;li&gt;then, for each one a call to &lt;code class=&quot;highlighter-rouge&quot;&gt;xsk_ring_cons__rx_desc&lt;/code&gt; to get the
packet’s descriptor and therefore, its address (&lt;code class=&quot;highlighter-rouge&quot;&gt;addr&lt;/code&gt; field)&lt;/li&gt;
  &lt;li&gt;and finally a call to &lt;code class=&quot;highlighter-rouge&quot;&gt;xsk_ring_cons__release&lt;/code&gt; to mark the descriptors
free to be reused by the producer.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There is no need to &lt;em&gt;process&lt;/em&gt; the packets before &lt;code class=&quot;highlighter-rouge&quot;&gt;xsk_ring_cons__release&lt;/code&gt;:
releasing the packets’ descriptors of the RX does not make the UMEM’s
frames holding the packets free to be reused.&lt;/p&gt;

&lt;p&gt;Only when the packets’ addresses are pushed into the fill queue (FQ)
the frames are available again.&lt;/p&gt;

&lt;figure&gt;&lt;figcaption&gt;&lt;span&gt;Addresses of free frames are consumed from the FQ queue by the kernel (1).
XDP then writes the incoming packet in a free frame (2) and pushes the
address into the RX queue (3). The user application consumes from the RX
queue (4) addresses of packets ready to be read or write (5). When it is
done, the address is pushed back to the FQ for reuse (6).&lt;/span&gt;&lt;/figcaption&gt;&lt;img style=&quot;max-width:80%;&quot; alt=&quot;UMEM cycle&quot; src=&quot;/book-of-gehn/assets/xdp-rx-rc/rx-rc-umem-cycle.png&quot; /&gt;&lt;/figure&gt;

&lt;p&gt;The packet descriptor returned by &lt;code class=&quot;highlighter-rouge&quot;&gt;xsk_ring_cons__rx_desc&lt;/code&gt; has two
attributes: the packet’s address and its length.&lt;/p&gt;

&lt;p&gt;The address is an &lt;code class=&quot;highlighter-rouge&quot;&gt;uint64_t&lt;/code&gt; offset respect the UMEM’s base address.&lt;/p&gt;

&lt;p&gt;&lt;label for=&quot;mf-e34702a9b002fa12328e1ec2277e184c&quot; class=&quot;margin-toggle &quot;&gt;⊕&lt;/label&gt;&lt;input type=&quot;checkbox&quot; id=&quot;mf-e34702a9b002fa12328e1ec2277e184c&quot; class=&quot;margin-toggle &quot; /&gt;&lt;span class=&quot;marginnote &quot;&gt;&lt;img class=&quot;fullwidth&quot; alt=&quot;UMEM frame&quot; src=&quot;/book-of-gehn/assets/xdp-rx-rc/rx-rc-frame.png&quot; /&gt;  &lt;br /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;The UMEM is a memory pool divided evenly by 2048 or 4096 bytes, the
frame size and addresses are aligned to the frame size plus an offset for a
headroom.&lt;/p&gt;

&lt;p&gt;The headroom is an application defined space reserved at the begin of
the frame for whatever the user wants to do. By default it’s zero.&lt;/p&gt;

&lt;p&gt;Well, for some reason the RX queue was returning sometimes addresses
with the wrong offset.&lt;/p&gt;

&lt;h2 id=&quot;more-than-possible&quot;&gt;More than possible&lt;/h2&gt;

&lt;p&gt;The UMEM is a fixed memory pool divided evenly in frames where each
frame holds a packet.&lt;/p&gt;

&lt;p&gt;Therefore the count of packets that the application can hold
before releasing them is fixed (UMEM size / frame size).&lt;/p&gt;

&lt;p&gt;At anytime the count is less than or equal to UMEM size / frame size.&lt;/p&gt;

&lt;p&gt;However the counters of the application shown a different thing: more
packets where entering in the application and were hold before releasing
them than the expected!&lt;/p&gt;

&lt;h2 id=&quot;pointer-to-null&quot;&gt;Pointer to &lt;code class=&quot;highlighter-rouge&quot;&gt;NULL&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;As mentioned before you can prepend metadata to each packet.&lt;/p&gt;

&lt;p&gt;In our case, one of the attributes is a pointer to an external
structure and the pointer is never updated again. Remains constant.&lt;/p&gt;

&lt;p&gt;But to our surprise the pointer changes and leaves pointing to &lt;code class=&quot;highlighter-rouge&quot;&gt;NULL&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;And the code is extraordinary simple and straightforward so there is
no chances to change the pointer to &lt;code class=&quot;highlighter-rouge&quot;&gt;NULL&lt;/code&gt; by an error in the logic.&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;do_work&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pkt_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pkt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;read_packet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// pull from the RX queue&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;pkt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;external_object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pkt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;                 &lt;span class=&quot;c1&quot;&gt;// not NULL&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/* moments later */&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pkt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;field&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// segmentation fault, pkt-&amp;gt;obj is NULL&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;free_packet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pkt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;       &lt;span class=&quot;c1&quot;&gt;// push into the FQ queue&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;No chances.&lt;/p&gt;

&lt;h2 id=&quot;debugging&quot;&gt;Debugging&lt;/h2&gt;

&lt;p&gt;So far we have three unrelated bugs. While possible, it is unlikely that
we are dealing with three &lt;em&gt;independent&lt;/em&gt; bugs.&lt;/p&gt;

&lt;p&gt;They must be related somehow.&lt;/p&gt;

&lt;p&gt;Let’s spin a debugger.&lt;/p&gt;

&lt;h3 id=&quot;counting-before-a-crash&quot;&gt;Counting before a crash&lt;/h3&gt;

&lt;p&gt;How many packets were pulled from the RX queue before getting one crash.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-gdb&quot;&gt;(gdb) b read_packet
(gdb) ignore 1 1000000
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When the bug is detected, GDB will stop and we’ll have the chance to see
how many times the breakpoint was hit before.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-gdb&quot;&gt;(gdb) info break
&amp;lt;...&amp;gt;breakpoint already hit 29 times
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Would this change in function of the UMEM size? Larger UMEMs has more
frames.&lt;/p&gt;

&lt;p&gt;These are the results:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-gdb&quot;&gt;// Minimum size, UMEM can hold 1 frame only
breakpoint already hit 29 times
breakpoint already hit 19 times
breakpoint already hit 23 times

// Slightly larger UMEM, it can hold 16 frames
breakpoint already hit 69 times
breakpoint already hit 43 times
breakpoint already hit 50 times

// 64 frames
breakpoint already hit 111 times
breakpoint already hit 69 times
breakpoint already hit 126 times

// 256 frames
breakpoint already hit 348 times
breakpoint already hit 324 times
breakpoint already hit 1 time
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So, with larger UMEMs is less likely to hit the bug but it is not a hard
rule. In the last test, with the largest UMEM, we hit the bug in the
first try.&lt;/p&gt;

&lt;h3 id=&quot;spontaneous-addresses&quot;&gt;Spontaneous addresses&lt;/h3&gt;

&lt;p&gt;What about the addresses returned by the RX queue? We want to print them
without stopping the process.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-gdb&quot;&gt;(gdb) b do_work.c:16     // after the call to read_packet()
(gdb) commands
&amp;gt; silent
&amp;gt; p pkt - umem-&amp;gt;base
&amp;gt; cont
&amp;gt; end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The segmentation fault due the &lt;code class=&quot;highlighter-rouge&quot;&gt;NULL&lt;/code&gt; pointer happen even when the
addresses had the correct offsets (&lt;code class=&quot;highlighter-rouge&quot;&gt;pkt - umem-&amp;gt;base % frame_size ==
headroom_size&lt;/code&gt;)&lt;/p&gt;

&lt;p&gt;For the ones with incorrect offset, the address most common was the 0
(&lt;code class=&quot;highlighter-rouge&quot;&gt;pkt - umem-&amp;gt;base == 0&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;I hypothesized that I could be putting the address 0 by mistake in the
FQ. Further testing shown that the 0 was never put in FQ but still being
received in the RX queue.&lt;/p&gt;

&lt;p&gt;So the RX queue was returning addresses that I never put in the FQ.
Those are new addresses!&lt;/p&gt;

&lt;p&gt;That explains the issue number 2: the application having more packets
than it should.&lt;/p&gt;

&lt;p&gt;Later, I found that 0 was not the only addresses with an incorrect
offset (issue number 1).&lt;/p&gt;

&lt;h3 id=&quot;poison-values&quot;&gt;Poison values&lt;/h3&gt;

&lt;p&gt;Let’s print the packets as soon as they are read and the external object
is set:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-gdb&quot;&gt;(gdb) set print pretty on

(gdb) b do_work.c:19     // after the call to external_object()
(gdb) commands
&amp;gt; silent
&amp;gt; p *pkt
&amp;gt; cont
&amp;gt; end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The last packet printed before the segmentation fault (issue 3)
was something like this&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
  timestamp = 121212121,
  length = 60,
  data = 0xsomeaddress
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And after the crash, the same packet looked like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
  timestamp = 0,
  length = 60,
  data = 0x0
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So the &lt;code class=&quot;highlighter-rouge&quot;&gt;timestamp&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;data&lt;/code&gt; where zero’d. Was this done by the
application or something else happen?&lt;/p&gt;

&lt;p&gt;Perhaps a rouge &lt;code class=&quot;highlighter-rouge&quot;&gt;memset&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;The fields are initialized to zero by the eBPF filter and overwritten by
the application.&lt;/p&gt;

&lt;p&gt;I decided to set them to non-trivial values, called &lt;em&gt;poison values&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;If a &lt;code class=&quot;highlighter-rouge&quot;&gt;memset&lt;/code&gt; zero’d them, I will notice.&lt;/p&gt;

&lt;p&gt;This is the packet &lt;strong&gt;after&lt;/strong&gt; the crash:&lt;/p&gt;

&lt;p&gt;&lt;label for=&quot;mmkd-2d4ae39ec8ffcd63da15ac50ce0f3e16&quot; class=&quot;margin-toggle&quot;&gt; ⊕&lt;/label&gt;&lt;input type=&quot;checkbox&quot; id=&quot;mmkd-2d4ae39ec8ffcd63da15ac50ce0f3e16&quot; class=&quot;margin-toggle&quot; /&gt;&lt;/p&gt;
&lt;div id=&quot;mk-mmkd-2d4ae39ec8ffcd63da15ac50ce0f3e16&quot;&gt;&lt;span class=&quot;marginnote marginmarkdowncode&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-gdb&quot;&gt;(gdb) p/x pkt-&amp;gt;timestamp
0xdead
&lt;/code&gt;&lt;/pre&gt;If you didn&amp;apos;t realize, the timestamp was not zero&amp;apos;d either.&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;script&gt;$(document).ready(function () {$('#mk-mmkd-2d4ae39ec8ffcd63da15ac50ce0f3e16 &gt; span').insertAfter($('#mmkd-2d4ae39ec8ffcd63da15ac50ce0f3e16'))});&lt;/script&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
  timestamp = 57005,
  length = 60,
  data = 0xbeaf
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So the whole structure was &lt;em&gt;not zero’d but reset&lt;/em&gt;, overwritten by
the eBPF filter when the packet was supposed to be managed by user.&lt;/p&gt;

&lt;p&gt;The three bugs are symptoms of the same unknown problem: the RX queue is
returning invalid addresses, not only without the expected offset but
addresses that belong to packets that the kernel still thinks that are
free.&lt;/p&gt;

&lt;h2 id=&quot;the-real-bug&quot;&gt;The real bug&lt;/h2&gt;

&lt;p&gt;Something was wrong in the RX queue / kernel side so we started to
search this issue in the web.&lt;/p&gt;

&lt;p&gt;A college of mine found a candidate: the fix of a race condition in the
generic receive path.&lt;/p&gt;

&lt;p&gt;eBPF runs in the driver if this one supports it. If not, eBPF is
executed in the kernel and the packets take a slightly larger path from
the network card to user.&lt;/p&gt;

&lt;p&gt;This path is known as the XDP generic path or just XDP generic.&lt;/p&gt;

&lt;p&gt;Remember than the RX is a single-producer queue so it is not thread safe
for concurrent pushes.&lt;/p&gt;

&lt;p&gt;&lt;label for=&quot;mf-482d5a7a07746c31570f73c75afe4260&quot; class=&quot;margin-toggle &quot;&gt;⊕&lt;/label&gt;&lt;input type=&quot;checkbox&quot; id=&quot;mf-482d5a7a07746c31570f73c75afe4260&quot; class=&quot;margin-toggle &quot; /&gt;&lt;span class=&quot;marginnote &quot;&gt;&lt;img style=&quot;max-width:120%;&quot; alt=&quot;RC on RX queue&quot; src=&quot;/book-of-gehn/assets/xdp-rx-rc/rx-rc-queues.png&quot; /&gt;  &lt;br /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;No problem when XDP runs in the driver but when it does in the generic
mode, the kernel may be receiving several packets and pushing them
&lt;strong&gt;concurrently&lt;/strong&gt; into the RX queue.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Unlike driver mode, generic xdp receive could be triggered
by different threads on different CPU cores at the same time
leading to the fill and rx queue breakage. For example, this
could happen while sending packets from two processes to the
first interface of &lt;code class=&quot;highlighter-rouge&quot;&gt;veth&lt;/code&gt; pair while the second part of it is
open with &lt;code class=&quot;highlighter-rouge&quot;&gt;AF_XDP&lt;/code&gt; socket.&lt;/p&gt;

  &lt;p&gt;Need to take a lock for each generic receive to avoid race.”
&lt;cite class=&quot;epigraph&quot;&gt;&lt;a href=&quot;https://github.com/torvalds/linux/commit/bf0bdd1343efbbf65b4d53aef1fce14acbd79d50&quot;&gt;commit bf0bdd13&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The commit fixes the issue
using a &lt;code class=&quot;highlighter-rouge&quot;&gt;spinlock&lt;/code&gt; but the fix was not backported.&lt;/p&gt;

&lt;p&gt;And doing a kernel upgrade is &lt;strong&gt;not an option&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;single-queue&quot;&gt;Single queue&lt;/h2&gt;

&lt;p&gt;&lt;label for=&quot;mn-3f29fa60e45a9506f034bbefc74e782a&quot; class=&quot;margin-toggle&quot;&gt; ⊕&lt;/label&gt;&lt;input type=&quot;checkbox&quot; id=&quot;mn-3f29fa60e45a9506f034bbefc74e782a&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;marginnote&quot;&gt;The article
&lt;a href=&quot;https://blog.packagecloud.io/eng/2016/06/22/monitoring-tuning-linux-networking-stack-receiving-data/&quot;&gt;Monitoring and Tuning the Linux Networking Stack: Receiving Data&lt;/a&gt;
explains this wonderfully.
&lt;br /&gt;
Despite the name, the articule describes all the network stack from the
driver to a TCP/UDP socket.
 &lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Once a packet is received by the network card a interruption is
signaled. The interruption runs briefly and delegates the rest of the
processing to a kernel thread named &lt;code class=&quot;highlighter-rouge&quot;&gt;ksoftirqd/n&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The packet is put by the interruption into a queue to be consumed
by a &lt;strong&gt;single&lt;/strong&gt;  &lt;code class=&quot;highlighter-rouge&quot;&gt;ksoftirqd/n&lt;/code&gt; thread.&lt;/p&gt;

&lt;p&gt;How the kernel can process multiple packet in parallel?&lt;/p&gt;

&lt;p&gt;With multiple queues of course!&lt;/p&gt;

&lt;p&gt;If we cannot upgrade the kernel we must enforce a single producer thread
in the kernel side.&lt;/p&gt;

&lt;p&gt;Configuring the interface to use a &lt;strong&gt;single&lt;/strong&gt; RX queue the kernel
will use a &lt;strong&gt;single&lt;/strong&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;ksoftirqd/n&lt;/code&gt; thread, a single-producer.&lt;/p&gt;

&lt;p&gt;&lt;label for=&quot;mn-b547aee63f894013ca6bf9c81f006fac&quot; class=&quot;margin-toggle&quot;&gt; ⊕&lt;/label&gt;&lt;input type=&quot;checkbox&quot; id=&quot;mn-b547aee63f894013ca6bf9c81f006fac&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;marginnote&quot;&gt;Try &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo ethtool -L &amp;lt;iface&amp;gt; combined 1&lt;/code&gt; if the other does not work.
 &lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Thankfully the configuration is one liner:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;ethtool &lt;span class=&quot;nt&quot;&gt;-L&lt;/span&gt; &amp;lt;iface&amp;gt; rx 1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;conclusions&quot;&gt;Conclusions&lt;/h2&gt;

&lt;p&gt;This was hard. One innocently expects the bugs in the user application,
not in the kernel.&lt;/p&gt;

&lt;p&gt;And most of the time that’s true!&lt;/p&gt;

&lt;p&gt;Debugging confirmed the opposite. And it was not easy.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;do_work&lt;/code&gt; shown is an oversimplification. The real code decouple the
&lt;code class=&quot;highlighter-rouge&quot;&gt;read_packet&lt;/code&gt; from the processing from the &lt;code class=&quot;highlighter-rouge&quot;&gt;free_packet&lt;/code&gt; into a serie
of threads.&lt;/p&gt;

&lt;p&gt;And if debugging a multithreading application is not hard enough, putting a
breakpoint in some places added enough delay that the bug was not
trigger anymore.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Heisenbug&quot;&gt;Heisenbug!&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;GDB’s &lt;code class=&quot;highlighter-rouge&quot;&gt;set non-stop on&lt;/code&gt; helped to reduce the impact: when a breakpoint
is hit by a thread, only that thread is stopped.&lt;/p&gt;

&lt;p&gt;A special thanks to my college Mario that dug into kernel’s git log and
found &lt;a href=&quot;https://github.com/torvalds/linux/commit/bf0bdd1343efbbf65b4d53aef1fce14acbd79d50&quot;&gt;commit bf0bdd13&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;That was the missing piece to solve this puzzle.&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.packagecloud.io/eng/2016/06/22/monitoring-tuning-linux-networking-stack-receiving-data/&quot;&gt;Monitoring and Tuning the Linux Networking Stack: Receiving Data&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.infradead.org/~mchehab/rst_conversion/networking/scaling.html&quot;&gt;Scaling in the Linux Networking Stack&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.kernel.org/doc/html/latest/networking/af_xdp.html&quot;&gt;Linux AF_XDP&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Gehn</name></author><summary type="html">⊕ Picture this: you’d been developing for six months a network sniffer using XDP, a kernel in-pass in Linux. Six months and when you are about to release it, you find not one but three bugs that shake all your understanding of XDP. A debugging race against the clock begins.</summary></entry><entry><title type="html">Qubes OS Networking</title><link href="/book-of-gehn/articles/2020/11/19/Qubes-Networking.html" rel="alternate" type="text/html" title="Qubes OS Networking" /><published>2020-11-19T00:00:00+01:00</published><updated>2020-11-19T00:00:00+01:00</updated><id>/book-of-gehn/articles/2020/11/19/Qubes-Networking</id><content type="html" xml:base="/book-of-gehn/articles/2020/11/19/Qubes-Networking.html">&lt;p&gt;&lt;a href=&quot;https://www.qubes-os.org/&quot;&gt;Qubes OS&lt;/a&gt; has an interesting network system
to isolate more-or-less
trusted &lt;em&gt;application&lt;/em&gt; virtual machines (App) from absolute untrusted
&lt;em&gt;network&lt;/em&gt; VMs (Net).&lt;/p&gt;

&lt;p&gt;&lt;label for=&quot;mf-892e94a4ec9e032aabff049c1567de9b&quot; class=&quot;margin-toggle  in-index-only&quot;&gt;⊕&lt;/label&gt;&lt;input type=&quot;checkbox&quot; id=&quot;mf-892e94a4ec9e032aabff049c1567de9b&quot; class=&quot;margin-toggle  in-index-only&quot; /&gt;&lt;span class=&quot;marginnote  in-index-only&quot;&gt;&lt;img style=&quot;&quot; class=&quot;fullwidth&quot; alt=&quot;IPs&quot; src=&quot;/book-of-gehn/assets/qubes/qubes-ips.png&quot; /&gt;  &lt;br /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;These last ones have the drivers required to handle ethernet and wifi cards
which expose them to a potentially deathly bug lurking in the drivers.&lt;/p&gt;

&lt;p&gt;An additional VM is put in the middle between App VMs and Net VMs. This
absolute trusted &lt;em&gt;proxy&lt;/em&gt; VM serves as a safe firewall (Proxy).&lt;/p&gt;

&lt;p&gt;In this post will explore how these VMs connect and how the packets are
forwarded up and down along this chain of VMs.&lt;!--more--&gt;&lt;/p&gt;

&lt;figure&gt;&lt;figcaption&gt;&lt;span&gt;Three App VMs: one for work, other for personal stuff, both considered
relatively-trusted and one more VM for untrusted stuff, all connected
to the “firewall” VM which forwards the packets to the Net VM.
&lt;br /&gt;
The “firewall” VM is isolated except for
the firewall/routing processing so it is considered trusted while Net VM
is not.&lt;/span&gt;&lt;/figcaption&gt;&lt;img src=&quot;/book-of-gehn/assets/qubes/qubes-network.png&quot; /&gt;&lt;/figure&gt;

&lt;h2 id=&quot;addresses&quot;&gt;Addresses&lt;/h2&gt;

&lt;p&gt;The first obvious thing to notice is the existence of ethernet cards
both in App VM and Proxy VM.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@appvm:# ip address show
2: eth0: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu 1500 qdisc mq state UP group default qlen 1000
    &lt;span class=&quot;nb&quot;&gt;link&lt;/span&gt;/ether 00:16:3e:5e:6c:19 brd ff:ff:ff:ff:ff:ff
    inet 10.137.7.27/32 brd 10.255.255.255 scope global eth0
       valid_lft forever preferred_lft forever
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr class=&quot;slender post-layout small&quot; /&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@proxyvm:# ip address show
2: eth0: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000
    &lt;span class=&quot;nb&quot;&gt;link&lt;/span&gt;/ether 00:16:3e:5e:6c:18 brd ff:ff:ff:ff:ff:ff
    inet 10.137.1.26/32 brd 10.137.1.26 scope global eth0
       valid_lft forever preferred_lft forever
4: vif37.0: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 32
    &lt;span class=&quot;nb&quot;&gt;link&lt;/span&gt;/ether fe:ff:ff:ff:ff:ff brd ff:ff:ff:ff:ff:ff
    inet 10.137.7.1/32 scope global vif37.0
       valid_lft forever preferred_lft forever
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;label for=&quot;mf-892e94a4ec9e032aabff049c1567de9b&quot; class=&quot;margin-toggle &quot;&gt;⊕&lt;/label&gt;&lt;input type=&quot;checkbox&quot; id=&quot;mf-892e94a4ec9e032aabff049c1567de9b&quot; class=&quot;margin-toggle &quot; /&gt;&lt;span class=&quot;marginnote &quot;&gt;&lt;img style=&quot;&quot; class=&quot;fullwidth&quot; alt=&quot;IPs&quot; src=&quot;/book-of-gehn/assets/qubes/qubes-ips.png&quot; /&gt;  &lt;br /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“The virtual interfaces in client VMs are called &lt;code class=&quot;highlighter-rouge&quot;&gt;ethX&lt;/code&gt;,
and are provided by the &lt;code class=&quot;highlighter-rouge&quot;&gt;xen_netfront&lt;/code&gt; kernel module, and
the corresponding interfaces in the Net/Proxy VM are
called &lt;code class=&quot;highlighter-rouge&quot;&gt;vifX.Y&lt;/code&gt; and are created by the &lt;code class=&quot;highlighter-rouge&quot;&gt;xen_netback&lt;/code&gt; module.”
&lt;br /&gt;–&lt;a href=&quot;https://theinvisiblethings.blogspot.com/2011/09/playing-with-qubes-networking-for-fun.html&quot;&gt;Playing with Qubes networking for fun&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;label for=&quot;mn-390925d166339968db0d24a04d1106cc&quot; class=&quot;margin-toggle&quot;&gt; ⊕&lt;/label&gt;&lt;input type=&quot;checkbox&quot; id=&quot;mn-390925d166339968db0d24a04d1106cc&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;marginnote&quot;&gt;The most-right bit of the most-left byte (&lt;code class=&quot;highlighter-rouge&quot;&gt;fe&lt;/code&gt;) is even so it is an unicast address.
&lt;br /&gt;
The second most-right bit of the same byte is odd so it is a locally
administrated address and it means that was arbitrary set by Qubes/Xen.
 &lt;/span&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;ethX&lt;/code&gt; links have different addresses with the same
&lt;a href=&quot;https://hwaddress.com/company/xensource-inc/&quot;&gt;Xensource OUI&lt;/a&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;00:16:3e&lt;/code&gt;
while the &lt;code class=&quot;highlighter-rouge&quot;&gt;vifX.Y&lt;/code&gt; have the same &lt;a href=&quot;https://en.wikipedia.org/wiki/MAC_address&quot;&gt;unicast-locally
administrated&lt;/a&gt; MAC:
&lt;code class=&quot;highlighter-rouge&quot;&gt;fe:ff:ff:ff:ff:ff&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;routing&quot;&gt;Routing&lt;/h2&gt;

&lt;p&gt;Here a ping from the App VM is routed to the Proxy VM which
in turns routes the packet to the Net VM and the outside world
and the response goes back through the same path to the App VM&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@appvm:# ping &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; 1 8.8.8.8
64 bytes from 8.8.8.8: &lt;span class=&quot;nv&quot;&gt;icmp_seq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1 &lt;span class=&quot;nv&quot;&gt;ttl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;53 &lt;span class=&quot;nb&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;12.1 ms
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr class=&quot;slender post-layout small&quot; /&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@appvm:# tcpdump &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; eth0
23:56:57.072295 ARP, Request who-has 10.137.7.1 tell 10.137.7.27, length 28
23:56:57.072330 ARP, Reply 10.137.7.1 is-at fe:ff:ff:ff:ff:ff, length 28
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;icmp omitted&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr class=&quot;slender post-layout small&quot; /&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@proxyvm:# tcpdump &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; vif37.0
23:56:57.072295 ARP, Request who-has 10.137.7.1 tell 10.137.7.27, length 28
23:56:57.072330 ARP, Reply 10.137.7.1 is-at fe:ff:ff:ff:ff:ff, length 28
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;icmp omitted&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;label for=&quot;mf-103c3d5b36df5f56ef8d5565c7424cb1&quot; class=&quot;margin-toggle &quot;&gt;⊕&lt;/label&gt;&lt;input type=&quot;checkbox&quot; id=&quot;mf-103c3d5b36df5f56ef8d5565c7424cb1&quot; class=&quot;margin-toggle &quot; /&gt;&lt;span class=&quot;marginnote &quot;&gt;&lt;img style=&quot;&quot; class=&quot;fullwidth&quot; alt=&quot;ARP&quot; src=&quot;/book-of-gehn/assets/qubes/qubes-arp.png&quot; /&gt;  &lt;br /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;The ARP request/reply is the App VM asking for the MAC address
of its configured gateway, the &lt;code class=&quot;highlighter-rouge&quot;&gt;10.137.7.1&lt;/code&gt; which it is the IP
of the Proxy VM’s &lt;code class=&quot;highlighter-rouge&quot;&gt;vif37.0&lt;/code&gt; interface.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@appvm:# ip route show
default via 10.137.7.1 dev eth0
10.137.7.1 dev eth0 scope &lt;span class=&quot;nb&quot;&gt;link&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;label for=&quot;mn-65007ced5f26024b42b9ad52a272abfb&quot; class=&quot;margin-toggle&quot;&gt; ⊕&lt;/label&gt;&lt;input type=&quot;checkbox&quot; id=&quot;mn-65007ced5f26024b42b9ad52a272abfb&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;marginnote&quot;&gt;You may find &lt;code class=&quot;highlighter-rouge&quot;&gt;REACHABLE&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;STALE&lt;/code&gt;:
the first means that the entry is valid while the second
means it &lt;em&gt;was&lt;/em&gt; valid.
&lt;br /&gt;
If you are quickly enough you may see &lt;code class=&quot;highlighter-rouge&quot;&gt;DELAY&lt;/code&gt;: the learning about the
reachability is still in progress.
 &lt;/span&gt;&lt;/p&gt;

&lt;p&gt;As expected, the App VM saves this in its ARP cache:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@appvm:# ip neigh show
10.137.7.1 dev eth0 lladdr fe:ff:ff:ff:ff:ff STALE
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;label for=&quot;mf-bd5111593d31e56a5d6665b921d712c7&quot; class=&quot;margin-toggle &quot;&gt;⊕&lt;/label&gt;&lt;input type=&quot;checkbox&quot; id=&quot;mf-bd5111593d31e56a5d6665b921d712c7&quot; class=&quot;margin-toggle &quot; /&gt;&lt;span class=&quot;marginnote &quot;&gt;&lt;img style=&quot;&quot; class=&quot;fullwidth&quot; alt=&quot;Ping&quot; src=&quot;/book-of-gehn/assets/qubes/qubes-first-part-ping.png&quot; /&gt;  &lt;br /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Once the App VM knows the Link Layer address (aka &lt;code class=&quot;highlighter-rouge&quot;&gt;lladdr&lt;/code&gt;), it sends
the ICMP echo request, the Proxy VM &lt;em&gt;forwards&lt;/em&gt; it and forwards back
the response.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@appvm:# tcpdump &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; eth0
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;arp omitted&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
23:56:58.014156 IP 10.137.7.27 &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; 8.8.8.8: ICMP &lt;span class=&quot;nb&quot;&gt;echo &lt;/span&gt;request, &lt;span class=&quot;nb&quot;&gt;id &lt;/span&gt;1177, &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;1, length 64
23:56:58.027402 IP 8.8.8.8 &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; 10.137.7.27: ICMP &lt;span class=&quot;nb&quot;&gt;echo &lt;/span&gt;reply, &lt;span class=&quot;nb&quot;&gt;id &lt;/span&gt;1177, &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;1, length 64
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr class=&quot;slender post-layout small&quot; /&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@proxyvm:# tcpdump &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; vif37.0
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;arp omitted&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
23:56:58.019581 IP 10.137.7.27 &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; 8.8.8.8: ICMP &lt;span class=&quot;nb&quot;&gt;echo &lt;/span&gt;request, &lt;span class=&quot;nb&quot;&gt;id &lt;/span&gt;1177, &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;1, length 64
23:56:58.032679 IP 8.8.8.8 &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; 10.137.7.27: ICMP &lt;span class=&quot;nb&quot;&gt;echo &lt;/span&gt;reply, &lt;span class=&quot;nb&quot;&gt;id &lt;/span&gt;1177, &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;1, length 64
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;upstream---downstream-forwarding&quot;&gt;Upstream - downstream forwarding&lt;/h2&gt;

&lt;p&gt;The Proxy VM acts as a router.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@proxyvm:# &lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; /proc/sys/net/ipv4/ip_forward
1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;However the VM will &lt;em&gt;drop&lt;/em&gt; all the packets before forwarding them
with some exceptions:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@proxyvm:# iptables-save &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; raw
:PREROUTING ACCEPT &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;116:43405]
&lt;span class=&quot;nt&quot;&gt;-A&lt;/span&gt; PREROUTING &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; 10.137.7.27/32 &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; vif37.0 &lt;span class=&quot;nt&quot;&gt;-j&lt;/span&gt; DROP
...

root@proxyvm:# iptables-save &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; filter
:FORWARD DROP &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;0:0]
...
&lt;span class=&quot;nt&quot;&gt;-A&lt;/span&gt; FORWARD &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; 10.137.7.27/32 &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; icmp &lt;span class=&quot;nt&quot;&gt;-j&lt;/span&gt; ACCEPT
&lt;span class=&quot;nt&quot;&gt;-A&lt;/span&gt; FORWARD &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; 10.137.7.27/32 &lt;span class=&quot;nt&quot;&gt;-j&lt;/span&gt; ACCEPT
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;label for=&quot;mf-72598e6a47c6eff2d841e635a906ab83&quot; class=&quot;margin-toggle &quot;&gt;⊕&lt;/label&gt;&lt;input type=&quot;checkbox&quot; id=&quot;mf-72598e6a47c6eff2d841e635a906ab83&quot; class=&quot;margin-toggle &quot; /&gt;&lt;span class=&quot;marginnote &quot;&gt;&lt;img style=&quot;&quot; class=&quot;fullwidth&quot; alt=&quot;Spoofing&quot; src=&quot;/book-of-gehn/assets/qubes/qubes-spoofed.png&quot; /&gt;  &lt;br /&gt;The &lt;em&gt;untrusted&lt;/em&gt; VM spoofs the source address simulating a message
&lt;em&gt;from the work&lt;/em&gt; VM; replies will be addresses to it.
&lt;br /&gt;
This spoofing scenario is prevented with the &lt;code class=&quot;highlighter-rouge&quot;&gt;PREROUTING&lt;/code&gt; rules.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;PREROUTING&lt;/code&gt; rule prevents a malicious downstream VM (App VM) to send
packets to a Proxy VM (via &lt;code class=&quot;highlighter-rouge&quot;&gt;vif37.0&lt;/code&gt;) with a spoofed source IP.&lt;/p&gt;

&lt;p&gt;Otherwise a malicious VM could hijack the traffic of its &lt;em&gt;siblings&lt;/em&gt; VMs.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;blockquote&gt;
      &lt;p&gt;Proxy VM will act as a router for a particular App VM &lt;strong&gt;only&lt;/strong&gt;
for the packets coming from &lt;strong&gt;that&lt;/strong&gt; VM.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@proxyvm:# ip route show
default via 10.137.1.1 dev eth0 proto static metric 100
10.137.1.1 dev eth0 proto static scope &lt;span class=&quot;nb&quot;&gt;link &lt;/span&gt;metric 100
10.137.1.26 dev eth0 proto kernel scope &lt;span class=&quot;nb&quot;&gt;link &lt;/span&gt;src 10.137.1.26 metric 100
10.137.7.27 dev vif37.0 scope &lt;span class=&quot;nb&quot;&gt;link &lt;/span&gt;metric 32715
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So the incoming ICMP echo request packet with source IP &lt;code class=&quot;highlighter-rouge&quot;&gt;10.137.7.27&lt;/code&gt;
enters from &lt;code class=&quot;highlighter-rouge&quot;&gt;vif37.0&lt;/code&gt;, it is accepted by the firewall, routed to
&lt;code class=&quot;highlighter-rouge&quot;&gt;eth0&lt;/code&gt; due the default route and goes out.&lt;/p&gt;

&lt;p&gt;Before leaving the Proxy VM, the packet is slightly modified…&lt;/p&gt;

&lt;h2 id=&quot;nat&quot;&gt;NAT&lt;/h2&gt;

&lt;p&gt;The Proxy VM allows routing packets coming from its App VM: we see
this in the firewall exceptions and in the route where the
&lt;strong&gt;specific&lt;/strong&gt; App VM IP is used, &lt;code class=&quot;highlighter-rouge&quot;&gt;10.137.7.27&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;But if we have more Proxy VMs chained ?&lt;/p&gt;

&lt;p&gt;Would the second Proxy VM need the IPs of the first Proxy VM and the
App VM to setup its routes?&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;App VM &amp;lt;-&amp;gt; Proxy VM &amp;lt;-&amp;gt; another Proxy VM &amp;lt;-&amp;gt; ...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In general, any Proxy VM would need the IPs of all the downstream VMs!&lt;/p&gt;

&lt;p&gt;That’s not only tedious but also would leak information: higher VMs
would know more about the topology. A Net VM would know all the IPs
that the environment has.&lt;/p&gt;

&lt;p&gt;However sniffing on Proxy VM’s &lt;code class=&quot;highlighter-rouge&quot;&gt;eth0&lt;/code&gt; shows something different when
the ping of App VM is forwarded:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@proxyvm:# tcpdump &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; eth0
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;arp omitted&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
23:56:58.019649 IP 10.137.1.26 &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; 8.8.8.8: ICMP &lt;span class=&quot;nb&quot;&gt;echo &lt;/span&gt;request, &lt;span class=&quot;nb&quot;&gt;id &lt;/span&gt;1177, &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;1, length 64
23:56:58.032636 IP 8.8.8.8 &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; 10.137.1.26: ICMP &lt;span class=&quot;nb&quot;&gt;echo &lt;/span&gt;reply, &lt;span class=&quot;nb&quot;&gt;id &lt;/span&gt;1177, &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;1, length 64
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The source of the request is set to Proxy VM’s &lt;code class=&quot;highlighter-rouge&quot;&gt;eth0&lt;/code&gt; IP, not App VM ones.&lt;/p&gt;

&lt;figure&gt;&lt;figcaption&gt;&lt;span&gt;Ping to 8.8.8.8 from App VM. Notice how the request is forwarded and in
each &lt;em&gt;hop&lt;/em&gt; the source address is changed (NAT).
&lt;br /&gt;
The reply takes the same path but the source address is &lt;strong&gt;not&lt;/strong&gt; changed.&lt;/span&gt;&lt;/figcaption&gt;&lt;img src=&quot;/book-of-gehn/assets/qubes/qubes-full-ping.png&quot; /&gt;&lt;/figure&gt;

&lt;p&gt;This is due a NAT rule that &lt;strong&gt;masquerade&lt;/strong&gt; the routed traffic:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@proxyvm:# iptables-save &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; nat
...
&lt;span class=&quot;nt&quot;&gt;-A&lt;/span&gt; POSTROUTING &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; vif+ &lt;span class=&quot;nt&quot;&gt;-j&lt;/span&gt; ACCEPT
&lt;span class=&quot;nt&quot;&gt;-A&lt;/span&gt; POSTROUTING &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; lo &lt;span class=&quot;nt&quot;&gt;-j&lt;/span&gt; ACCEPT
&lt;span class=&quot;nt&quot;&gt;-A&lt;/span&gt; POSTROUTING &lt;span class=&quot;nt&quot;&gt;-j&lt;/span&gt; MASQUERADE
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;-o vif+&lt;/code&gt; rule prevents masquerade traffic going downward, back to
the App VM and the &lt;code class=&quot;highlighter-rouge&quot;&gt;-o lo&lt;/code&gt; ignores loopback traffic.&lt;/p&gt;

&lt;p&gt;The rest, including traffic routed to &lt;code class=&quot;highlighter-rouge&quot;&gt;eth0&lt;/code&gt; is masquerade.&lt;/p&gt;

&lt;p&gt;So all Proxy VMs and Net VMs only need to know the IP of the previous
VM and not the full chain.&lt;/p&gt;

&lt;h2 id=&quot;packet-walk-through&quot;&gt;Packet walk-through&lt;/h2&gt;

&lt;p&gt;&lt;label for=&quot;mf-d5c17f5f4e04f6679ce4e7d841e3fa92&quot; class=&quot;margin-toggle &quot;&gt;⊕&lt;/label&gt;&lt;input type=&quot;checkbox&quot; id=&quot;mf-d5c17f5f4e04f6679ce4e7d841e3fa92&quot; class=&quot;margin-toggle &quot; /&gt;&lt;span class=&quot;marginnote &quot;&gt;&lt;object align=&quot;middle&quot; data=&quot;/book-of-gehn/uml/34cfc84b4ad538d0e44973367f2a764c.svg&quot; type=&quot;image/svg+xml&quot;&gt;&lt;/object&gt;  &lt;br /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;App VM does a ping to &lt;code class=&quot;highlighter-rouge&quot;&gt;8.8.8.8&lt;/code&gt;, this is the walk-through&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;App VM
| pkt:         10.137.7.27 &amp;gt; 8.8.8.8: ICMP echo request
|
| route:       default via 10.137.7.1 dev eth0
| eth0:        10.137.7.27 &amp;gt; 8.8.8.8: ICMP echo request

Proxy VM
| vif37.0:     10.137.7.27 &amp;gt; 8.8.8.8: ICMP echo request
| prerouting:  ! -s 10.137.7.27/32 -i vif37.0  =&amp;gt; NO DROP
| filter:      FORWARD -s 10.137.7.27/32  =&amp;gt; ACCEPT
|
| route:       default via 10.137.1.1 dev eth0
| postrouting: POSTROUTING  =&amp;gt; MASQUERADE
|
| eth0:        10.137.1.26 &amp;gt; 8.8.8.8: ICMP echo request

--- request is sent to upstream; reply is received moments later ---

Proxy VM
| eth0:        8.8.8.8 &amp;gt; 10.137.1.26: ICMP echo reply
| (rev nat):   8.8.8.8 &amp;gt; 10.137.7.27: ICMP echo reply
| filter:      FORWARD -s 10.137.7.27/32  =&amp;gt; ACCEPT
|
| route:       10.137.7.27 dev vif37.0
| postrouting: POSTROUTING -o vif+  =&amp;gt; DONT MASQUERADE
|
| vif37.0:     8.8.8.8 &amp;gt; 10.137.7.27: ICMP echo reply

App VM
| eth0:          8.8.8.8 &amp;gt; 10.137.7.27: ICMP echo reply
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;dns&quot;&gt;DNS&lt;/h2&gt;

&lt;p&gt;The DNS traffic is handled like the above but with a twist.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@appvm:# nslookup google.com
Server:     10.137.7.1
Address:    10.137.7.1#53

Non-authoritative answer:
Name:   google.com
Address: 172.217.172.46
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It is interesting to note that App VM queried &lt;code class=&quot;highlighter-rouge&quot;&gt;10.137.7.1&lt;/code&gt; to resolve
the address: the Proxy VM is working as a DNS resolver.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@appvm:# tcpdump &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; eth0
...
23:58:30.214939 IP 10.137.7.27.46734 &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; 10.137.7.1.53: 26595+ A? google.com. &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;28&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
23:58:30.337391 IP 10.137.7.1.53 &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; 10.137.7.27.46734: 26595 1/0/0 A 172.217.172.46 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;44&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr class=&quot;slender post-layout small&quot; /&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@proxyvm:# tcpdump &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; vif37.0
...
23:58:30.220387 IP 10.137.7.27.46734 &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; 10.137.7.1.53: 26595+ A? google.com. &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;28&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
23:58:30.342664 IP 10.137.7.1.53 &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; 10.137.7.27.46734: 26595 1/0/0 A 172.217.172.46 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;44&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;But that’s a lie: there is no DNS resolver in Proxy VM and
the DNS request is forwarded upstream:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@proxyvm:# tcpdump &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; eth0
...
23:58:30.220455 IP 10.137.1.26.46734 &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; 10.137.1.1.53: 26595+ A? google.com. &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;28&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
23:58:30.342616 IP 10.137.1.1.53 &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; 10.137.1.26.46734: 26595 1/0/0 A 172.217.172.46 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;44&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Notice how the source address is masqueraded as we saw with the ping packet
but the &lt;strong&gt;destination address is changed&lt;/strong&gt; too:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;23:58:30.220387 IP 10.137.7.27.46734 &amp;gt; 10.137.7.1.53: 26595+ A? google.com. (28)
                    NAT  |                   |  DNAT
                         V                   V
23:58:30.220455 IP 10.137.1.26.46734 &amp;gt; 10.137.1.1.53: 26595+ A? google.com. (28)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;dnat&quot;&gt;DNAT&lt;/h2&gt;

&lt;p&gt;Nobody is listening on the &lt;code class=&quot;highlighter-rouge&quot;&gt;53 udp&lt;/code&gt; port so the DNAT is applied &lt;em&gt;before&lt;/em&gt; routing.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@proxyvm:# iptables-save -t nat
...
-A PREROUTING -j PR-QBS
-A PR-QBS -d 10.137.7.1/32 -p udp -m udp --dport 53 -j DNAT --to-destination 10.137.1.1
-A PR-QBS -d 10.137.7.1/32 -p tcp -m tcp --dport 53 -j DNAT --to-destination 10.137.1.1
-A PR-QBS -d 10.137.7.254/32 -p udp -m udp --dport 53 -j DNAT --to-destination 10.137.1.254
-A PR-QBS -d 10.137.7.254/32 -p tcp -m tcp --dport 53 -j DNAT --to-destination 10.137.1.254
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Firewall rules also apply&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@proxyvm:# iptables-save -t filter
...
-A FORWARD -s 10.137.7.27/32 -d 10.137.1.1/32 -p udp -m udp --dport 53 -j ACCEPT
-A FORWARD -s 10.137.7.27/32 -d 10.137.1.254/32 -p udp -m udp --dport 53 -j ACCEPT
-A FORWARD -s 10.137.7.27/32 -d 10.137.1.1/32 -p tcp -m tcp --dport 53 -j ACCEPT
-A FORWARD -s 10.137.7.27/32 -d 10.137.1.254/32 -p tcp -m tcp --dport 53 -j ACCEPT
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In the Net VM the destination is replaced by the DNS resolver address
configured:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@netvm:# iptables-save -t nat
...
-A PR-QBS -d 10.137.3.1/32 -p udp -m udp --dport 53 -j DNAT --to-destination 8.8.8.8
-A PR-QBS -d 10.137.3.1/32 -p tcp -m tcp --dport 53 -j DNAT --to-destination 8.8.8.8
-A PR-QBS -d 10.137.3.254/32 -p udp -m udp --dport 53 -j DNAT --to-destination 8.8.8.8
-A PR-QBS -d 10.137.3.254/32 -p tcp -m tcp --dport 53 -j DNAT --to-destination 8.8.8.8
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;future-readings&quot;&gt;Future readings&lt;/h2&gt;

&lt;p&gt;About networking and sysadmin:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://lartc.org/howto/&quot;&gt;Linux Advanced Routing &amp;amp; Traffic Control HOWTO&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.qubes-os.org/doc/vpn/&quot;&gt;Qubes OS VPN&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://bugzilla.netfilter.org/show_bug.cgi?id=693&quot;&gt;Netfilter bug&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.smythies.com/~doug/network/iptables_notes/&quot;&gt;Iptables notes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Qubes related:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.qubes-os.org/news/2019/12/25/qsb-056/&quot;&gt;QSB-056&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/QubesOS/qubes-core-agent-linux/pull/209&quot;&gt;PR 209&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/QubesOS/qubes-core-agent-linux/pull/201&quot;&gt;PR 201&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://linux-ip.net/linux-ip/&quot;&gt;Linux IP&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.linuxjournal.com/content/linux-advanced-routing-tutorial&quot;&gt;Linux Advanced Routing Tutorial&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://theinvisiblethings.blogspot.com/2011/09/playing-with-qubes-networking-for-fun.html&quot;&gt;Playing with Qubes networking for fun&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Gehn</name></author><summary type="html">Qubes OS has an interesting network system to isolate more-or-less trusted application virtual machines (App) from absolute untrusted network VMs (Net). ⊕ These last ones have the drivers required to handle ethernet and wifi cards which expose them to a potentially deathly bug lurking in the drivers. An additional VM is put in the middle between App VMs and Net VMs. This absolute trusted proxy VM serves as a safe firewall (Proxy). In this post will explore how these VMs connect and how the packets are forwarded up and down along this chain of VMs.</summary></entry><entry><title type="html">TL;DR Stylometrics</title><link href="/book-of-gehn/articles/2020/11/12/TLDR-Stylometrics.html" rel="alternate" type="text/html" title="TL;DR Stylometrics" /><published>2020-11-12T00:00:00+01:00</published><updated>2020-11-12T00:00:00+01:00</updated><id>/book-of-gehn/articles/2020/11/12/TLDR-Stylometrics</id><content type="html" xml:base="/book-of-gehn/articles/2020/11/12/TLDR-Stylometrics.html">&lt;p&gt;A ghost writer is a person that writes a document, essay or paper but
the work is presented by other person who &lt;em&gt;claims&lt;/em&gt; to be the author.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://thebestschools.org/resources/detecting-deterring-ghostwritten-papers-best-practices/&quot;&gt;Detecting deterring ghostwritten papers&lt;/a&gt;
is an article written by a (ex)ghost writer and explains what happens
behind the scene when a student pays for this &lt;em&gt;dark&lt;/em&gt; service.&lt;/p&gt;

&lt;p&gt;Would be possible to detect this in an automated way?&lt;/p&gt;

&lt;p&gt;Given a set of documents, could we determine of they were written or not
by the person or people who claim to be the authors?&lt;/p&gt;

&lt;p&gt;This problem is known as &lt;em&gt;authorship attribution&lt;/em&gt; and I will show a few
papers that I read about this, in particular around the concept of
&lt;em&gt;stylometric&lt;/em&gt;, fingerprints that the real author leaves when he or she
writes.&lt;!--more--&gt;&lt;/p&gt;

&lt;h2 id=&quot;application-papers&quot;&gt;Application papers&lt;/h2&gt;

&lt;h3 id=&quot;who-wrote-the-15th-book-of-oz-an-application-of-multivariate-analysis-to-authorship-attribution&quot;&gt;&lt;em&gt;Who Wrote the 15th Book of Oz? An Application of Multivariate Analysis to Authorship Attribution&lt;/em&gt;&lt;/h3&gt;

&lt;p&gt;&lt;label for=&quot;mn-cb67d3fc3ea8c7900e2c19c6455b3c87&quot; class=&quot;margin-toggle&quot;&gt; ⊕&lt;/label&gt;&lt;input type=&quot;checkbox&quot; id=&quot;mn-cb67d3fc3ea8c7900e2c19c6455b3c87&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;marginnote&quot;&gt;Authors:
José Nilo G. Binongo
 &lt;/span&gt;&lt;/p&gt;

&lt;p&gt;An application case for authorship attribution called also &lt;em&gt;a
non-traditional method of attibuting authorship&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The author categories several writings of the universe of Oz to
determine the author of “The Royal Book of Oz” among two options: Lyman
Frank Baum, the creator of the Oz universe and Ruth Plumly Thompson,
a children’s writer that continued the work of Baum.&lt;/p&gt;

&lt;p&gt;The feature selected was the frequency of the &lt;em&gt;functional words&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;“Among the parts of speech, function words are made up of pronouns,
auxiliary verbs, prepositions, conjunctions, determiners, and degree
adverbs. These parts of speech have a more grammatical than
lexical function.”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Some functional words are more specific and inherent has more meaning
(content). Depending of the book these may appear more or less.&lt;/p&gt;

&lt;p&gt;Because the frequency depends of the content and not on the author,
these “more specific” functional words are removed.&lt;/p&gt;

&lt;p&gt;The author of the paper takes the top 50 of the most frequency
functional words to remove these “too specific” words.&lt;/p&gt;

&lt;p&gt;The 50 dimensionality is then mapped (reduced) to 2 using principal
component analysis (PCA).&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A very good paper.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;delta-for-middle-dutchauthor-and-copyist-distinction-in-walewein&quot;&gt;&lt;em&gt;Delta for Middle DutchAuthor and Copyist Distinction in Walewein&lt;/em&gt;&lt;/h3&gt;

&lt;p&gt;&lt;label for=&quot;mn-47b5c192238a83b00d58d7e388fd5e25&quot; class=&quot;margin-toggle&quot;&gt; ⊕&lt;/label&gt;&lt;input type=&quot;checkbox&quot; id=&quot;mn-47b5c192238a83b00d58d7e388fd5e25&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;marginnote&quot;&gt;Authors:
Karina van Dalen-Oskam and Joris van Zundert&lt;br /&gt;
Huygens Instituut, The Hague, The Netherlands
 &lt;/span&gt;&lt;/p&gt;

&lt;p&gt;The Walewein text is known to be written by one author and then
continued by a second author.&lt;/p&gt;

&lt;p&gt;The authors of the paper used stylometric to determine where one author
picked and continued the work of the former.&lt;/p&gt;

&lt;p&gt;The authors decided to lemmatize the text.&lt;/p&gt;

&lt;p&gt;Lemmatize a text means to take the words and rewrite them in a
normalized way. For example words like “play, playing, played” are
mapped to a single “play” verb.&lt;/p&gt;

&lt;p&gt;Then they used Yule’s K and Burrows’ Delta metrics over a rolling window
of 2000 lines of text.&lt;/p&gt;

&lt;p&gt;Yule’s Characteristic K is a estimation of the richness of a text:
text with a lot of repeated words are said to be less rich while the
text with less repeated words &lt;em&gt;has more vocabulary&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;K is defines as:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;K = 10^4 \left( -\frac{1}{N} + \sum_{i = 1}^{N} V_i \left( \frac{i}{N} \right)^2 \right)&lt;/script&gt;

&lt;p&gt;where &lt;script type=&quot;math/tex&quot;&gt;N&lt;/script&gt; is the count of words in a text and &lt;script type=&quot;math/tex&quot;&gt;V_i&lt;/script&gt; the number of words that
appeared &lt;script type=&quot;math/tex&quot;&gt;i&lt;/script&gt; times.&lt;/p&gt;

&lt;p&gt;Burrows’ Delta models a set of documents as a matrix.&lt;/p&gt;

&lt;p&gt;Each document is modeled as a algebraic vector where each position
represent a word and contains the frequency of that word.&lt;/p&gt;

&lt;p&gt;The frequencies per document are normalizes so they sum up 1.&lt;/p&gt;

&lt;p&gt;The vectors are then stacked forming a matrix having in each column the
frequencies of a particular word in all the documents.&lt;/p&gt;

&lt;p&gt;Each column is normalized such the mean or average of them is 0 and the
standard deviation is 1. A procedure common in ML.&lt;/p&gt;

&lt;p&gt;The Delta between to documents is then the Manhattan distance between
their two vectors.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Interesting reading.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;survey-papers&quot;&gt;Survey Papers&lt;/h2&gt;

&lt;h3 id=&quot;a-framework-for-authorship-identification-of-online-messages-writing-style-features-and-classification-techniques&quot;&gt;&lt;em&gt;A Framework for Authorship Identification of Online Messages: Writing-Style Features and Classification Techniques&lt;/em&gt;&lt;/h3&gt;

&lt;p&gt;&lt;label for=&quot;mn-b48ce9474da8f40658f5b76ff772b623&quot; class=&quot;margin-toggle&quot;&gt; ⊕&lt;/label&gt;&lt;input type=&quot;checkbox&quot; id=&quot;mn-b48ce9474da8f40658f5b76ff772b623&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;marginnote&quot;&gt;Authors:
Rong Zheng, Jiexun Li, Hsinchun Chen, and Zan Huang
&lt;br /&gt;
New York University, University of Arizona
 &lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;“key-word-based features are widely
accepted to be ineffective in author identification in multiple-
topic corpora”&lt;/em&gt; But there are exception if the content-words denotes a
particular knowledge about a topic that could be correlated with the
author.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;An example of this is the “Walewein” paper where the 100-150 most common words
which are principally composed of content-words were able to
distinguish the two authors of a text while the 1-50 most common
words, principally function-words, were able to detect the scribes
that also modified the text.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The paper summarizes the features used by several papers (2006):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;lexical: average word/sentence length, vocabulary richness&lt;/li&gt;
  &lt;li&gt;syntactic: freq of words, use of punctuation&lt;/li&gt;
  &lt;li&gt;structural: paragraph length, indentation, greeting/farewell
statements&lt;/li&gt;
  &lt;li&gt;content-specific: freq of keywords&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;The structural seems very interesting. Opening phrases (like
“In my opinion I …”) could be very characteristic of the author.
The use of listing (the ones that begin with &lt;code class=&quot;highlighter-rouge&quot;&gt;'-'&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;'*'&lt;/code&gt;) also.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Table 3 describes more of these in details.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;“Structural features and
content-specific features showed particular discriminating
capabilities for authorship identification on online messages.
SVM and neural networks outperformed C4.5 and neural
networks significantly for the authorship-identification task.”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Most of the cited papers analyze very small set of documents (~80)
and a very small set of authors (~4).&lt;/p&gt;

&lt;p&gt;Some exceptions have 300 or even 1200 documents and 7, 10 and 45
authors.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Quite small&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;“Content-specific features
improved the performance of the three classifiers signifi-
cantly for the English datasets […] e.g., some people preferred check
as a payment method; some people mostly sell Microsoft products).”&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;I don’t think that this is true in general (like a characteristic of
the author). The dataset used in the paper has a very broad topic so
it is possible that some people wrote only about a sub topic and other
people about another hence having the discriminant.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Very good paper to read it again.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;a-prototype-for-authorship-attribution-studies&quot;&gt;&lt;em&gt;A Prototype for Authorship Attribution Studies&lt;/em&gt;&lt;/h3&gt;

&lt;p&gt;&lt;label for=&quot;mn-a6f31899fcb4cbffa5658e393bd7c6d3&quot; class=&quot;margin-toggle&quot;&gt; ⊕&lt;/label&gt;&lt;input type=&quot;checkbox&quot; id=&quot;mn-a6f31899fcb4cbffa5658e393bd7c6d3&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;marginnote&quot;&gt;Authors:
Patrick Juola, John Sofko, Patrick Brennan
&lt;br /&gt;
Duquesne University
 &lt;/span&gt;&lt;/p&gt;

&lt;p&gt;A survey of the current state of the art. It points to some other
resources and shows some results but nothing concrete.&lt;/p&gt;

&lt;p&gt;The authors proposes a three-phases “framework” to develop/research
stylometrics: canonization, determination of the event set and
statistical inference.&lt;/p&gt;

&lt;p&gt;In short: extract text from the media, remove spurious noise and apply
other kind of filtering/normalization (canonization); from there select
the features to analyze and possible eliminate uninteresting events
(determination) and finally perform a machine learning technique
(inference).&lt;/p&gt;

&lt;p&gt;A current practice these days.&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;Java Graphical Authorship Attribution Program&lt;/em&gt; or JGAAP program is
mentioned.&lt;/p&gt;

&lt;p&gt;A substantial part of the paper focus in uninteresting parts of JGAAP
like the Graphical User Interface (GUI), saving/loading files and high
level code description.&lt;/p&gt;

&lt;h2 id=&quot;more-theoretical-like-papers&quot;&gt;More Theoretical-like Papers&lt;/h2&gt;

&lt;h3 id=&quot;computational-constancy-measures-of-textsyules-k-and-rényis-entropy&quot;&gt;&lt;em&gt;Computational Constancy Measures of TextsYule’s K and Rényi’s Entropy&lt;/em&gt;&lt;/h3&gt;

&lt;p&gt;&lt;label for=&quot;mn-9a4c931ad2e89915322e8fd7ea82c154&quot; class=&quot;margin-toggle&quot;&gt; ⊕&lt;/label&gt;&lt;input type=&quot;checkbox&quot; id=&quot;mn-9a4c931ad2e89915322e8fd7ea82c154&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;marginnote&quot;&gt;Authors:
Kumiko Tanaka-Ishii, Shunsuke Aihara
&lt;br /&gt;
Kyushu University, JST-PRESTO, Gunosy Inc.
 &lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;“A constancy measure for a natural language text is […] a computational
measure that converges to a value for a certain amount of text and remains
invariant for any larger size […], its value could be considered as a
text characteristic.”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Yule’s K is defined as&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;K = C \left( -\frac{1}{N} + \sum_{i = 1}^{imax} V(i,N) \left( \frac{i}{N} \right)^2 \right)&lt;/script&gt;

&lt;!-- _a --&gt;

&lt;p&gt;where &lt;script type=&quot;math/tex&quot;&gt;N&lt;/script&gt; is the total number of words in the text, &lt;script type=&quot;math/tex&quot;&gt;V(N)&lt;/script&gt; the number of
distinct words, &lt;script type=&quot;math/tex&quot;&gt;V(i,N)&lt;/script&gt; the number of words that appear &lt;script type=&quot;math/tex&quot;&gt;i&lt;/script&gt; times and &lt;script type=&quot;math/tex&quot;&gt;imax&lt;/script&gt;
the largest frequency of a word.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;We could use &lt;script type=&quot;math/tex&quot;&gt;N&lt;/script&gt; as &lt;script type=&quot;math/tex&quot;&gt;imax&lt;/script&gt; because for the &lt;script type=&quot;math/tex&quot;&gt;i&lt;/script&gt; that &lt;script type=&quot;math/tex&quot;&gt;% &lt;![CDATA[
imax &lt; i &lt;= N %]]&gt;&lt;/script&gt; the
value of &lt;script type=&quot;math/tex&quot;&gt;V(i,N)&lt;/script&gt; is zero but using &lt;script type=&quot;math/tex&quot;&gt;imax&lt;/script&gt; directly is faster.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The constant &lt;script type=&quot;math/tex&quot;&gt;C&lt;/script&gt; was defined by Yule to &lt;script type=&quot;math/tex&quot;&gt;10^4&lt;/script&gt;.&lt;/p&gt;

&lt;p&gt;Golcher’s V is defines as &lt;script type=&quot;math/tex&quot;&gt;k/N&lt;/script&gt; where &lt;script type=&quot;math/tex&quot;&gt;N&lt;/script&gt; is the length of the string and &lt;script type=&quot;math/tex&quot;&gt;k&lt;/script&gt;
the number of inner nodes of a Patricia suffix tree of the text.&lt;/p&gt;

&lt;p&gt;The paper describes other metrics including &lt;script type=&quot;math/tex&quot;&gt;H_a&lt;/script&gt;, the
Renyi Entropy, a generalization of the Shannon entropy defined as:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;H_a(X) = \frac{1}{1-a} \textrm{log} \left( \sum_{\forall X} P(X)^a \right)&lt;/script&gt;

&lt;!-- _a --&gt;

&lt;p&gt;Where &lt;script type=&quot;math/tex&quot;&gt;a &gt;= 0&lt;/script&gt;, &lt;script type=&quot;math/tex&quot;&gt;a != 1&lt;/script&gt;, &lt;script type=&quot;math/tex&quot;&gt;P(X)&lt;/script&gt; the probability function of &lt;script type=&quot;math/tex&quot;&gt;X&lt;/script&gt;.&lt;/p&gt;

&lt;p&gt;When &lt;script type=&quot;math/tex&quot;&gt;a == 0&lt;/script&gt;, it reduces to &lt;script type=&quot;math/tex&quot;&gt;H_0(X) = 1 \textrm{log} \left( \sum_{\forall X} 1 \right)&lt;/script&gt; &lt;!-- _a --&gt;
&lt;script type=&quot;math/tex&quot;&gt;H_0(X) = \textrm{log} ( |X| )&lt;/script&gt;  (aka indicates the number of distinct occurrences
of &lt;script type=&quot;math/tex&quot;&gt;X&lt;/script&gt;)&lt;/p&gt;

&lt;p&gt;When a approximates to 1 (limit), &lt;script type=&quot;math/tex&quot;&gt;H&lt;/script&gt; reduces to Shannon entropy.&lt;/p&gt;

&lt;p&gt;For &lt;script type=&quot;math/tex&quot;&gt;H_2(X)&lt;/script&gt; the authors shown that &lt;em&gt;”[&lt;script type=&quot;math/tex&quot;&gt;H_2&lt;/script&gt;] immediately shows the
essential equivalence to Yule’s K&lt;/em&gt;”&lt;/p&gt;

&lt;p&gt;The authors shown empirically that &lt;script type=&quot;math/tex&quot;&gt;H_2&lt;/script&gt; converges to a value for texts of
between &lt;script type=&quot;math/tex&quot;&gt;10^2&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;10^4&lt;/script&gt; words/characters depending of &lt;script type=&quot;math/tex&quot;&gt;H_2&lt;/script&gt; was defined for
words or characters respectively.&lt;/p&gt;

&lt;p&gt;The authors also shown that &lt;script type=&quot;math/tex&quot;&gt;H_2&lt;/script&gt; is not a good discriminant for
authorship: &lt;em&gt;“Examining the nature of the convergent values
revealed that K does not possess the discriminatory power
of author identification as Yule had hoped.”&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;script type=&quot;math/tex&quot;&gt;H_2&lt;/script&gt; or Yule’s Y converges fast so it could be applied to short
terms. Defined as it was in the paper (for words and characters) it will
not work for authorship attribution but it may work under a different
feature set (input) instead of words/characters.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;cross-entropy-and-linguistic-typology&quot;&gt;&lt;em&gt;Cross-entropy and linguistic typology&lt;/em&gt;&lt;/h3&gt;

&lt;p&gt;&lt;label for=&quot;mn-1b94b4105603fbc0c879e45143c4bae1&quot; class=&quot;margin-toggle&quot;&gt; ⊕&lt;/label&gt;&lt;input type=&quot;checkbox&quot; id=&quot;mn-1b94b4105603fbc0c879e45143c4bae1&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;marginnote&quot;&gt;Authors:
Patrick Juola
&lt;br /&gt;
University of Oxford
 &lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Describes briefly the application of the &lt;em&gt;cross-entroy&lt;/em&gt; for language
categorization.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;“Cross-entropy appears to be a meaningful and easy to measure method of
determining “linguistic distance” that is more sensitive
to variances in lexical choice, word usage, style, and syntax than
conventional methods.”&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;understanding-and-explaining-delta-measures-for-authorship-attribution&quot;&gt;&lt;em&gt;Understanding and explaining Delta measures for authorship attribution&lt;/em&gt;&lt;/h3&gt;

&lt;p&gt;&lt;label for=&quot;mn-664d528323819d10d626a3b18d01af37&quot; class=&quot;margin-toggle&quot;&gt; ⊕&lt;/label&gt;&lt;input type=&quot;checkbox&quot; id=&quot;mn-664d528323819d10d626a3b18d01af37&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;marginnote&quot;&gt;Authors:
Stefan Evert, Thomas Proisl, Fotis Jannidis, Isabella Reger, Steffen Pielström, Christof Schöch and Thorsten Vitt
&lt;br /&gt;
Friedrich-Alexander-Universität Erlangen-Nürnberg and Julius-Maximilians-Universität Würzburg
 &lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Describes and analyzes Burrows’ Delta distance based on the Manhattan
distance and different variations of it including Euclidean, Linear and
Cosine distances.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A paper to review later if required.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;good-but-no-so-good-papers&quot;&gt;Good but no so good papers&lt;/h2&gt;

&lt;h3 id=&quot;whos-at-the-keyboard-authorship-attribution-in-digital-evidence-investigations&quot;&gt;&lt;em&gt;Who’s At The Keyboard? Authorship Attribution in Digital Evidence Investigations&lt;/em&gt;&lt;/h3&gt;

&lt;p&gt;&lt;label for=&quot;mn-7f2d5b81fd11d24979a2de1ad87a167c&quot; class=&quot;margin-toggle&quot;&gt; ⊕&lt;/label&gt;&lt;input type=&quot;checkbox&quot; id=&quot;mn-7f2d5b81fd11d24979a2de1ad87a167c&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;marginnote&quot;&gt;Authors:
Carole E. Chaski.
&lt;br /&gt;
Institute for Linguistic Evidence, Inc
 &lt;/span&gt;&lt;/p&gt;

&lt;p&gt;The paper presents the results of some other researches. The one that
scored the highest authorship attribution was:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;“counting particular errors or idiosyncrasies and inputting this into a
statistical classification procedure &lt;a href=&quot;using&quot;&gt;…&lt;/a&gt; supported vector machines
(SVM) and C4.5 analysis”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The paper names these as &lt;em&gt;“stylemarkers”&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;For stylometrics, the paper mentions references to other papers where
they used
&lt;em&gt;“word length, phrase length, sentence length, vocabulary frequency,
distribution of words of different lengths”&lt;/em&gt; as features and SVM (with
accuracy that oscillated between 46% and 100%), discriminant function analysis
(accuracy between 87% and 89%) and using neural networks (accuracy 84%).&lt;/p&gt;

&lt;p&gt;The dataset for the paper consisted on several writings from several
authors about 10 different topics.&lt;/p&gt;

&lt;p&gt;While the paper takes into consideration some biases like age and gender
the 10 topics are to my opinion biased to “personal topics”.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;“Describe a traumatic or terrifying event in your life and how you
overcame it.”&lt;/em&gt; is an example.&lt;/p&gt;

&lt;p&gt;The paper uses the ALIAS software and restricts the analysis of the
samples to only &lt;em&gt;“punctuation, syntactic and lexical”&lt;/em&gt; features.&lt;/p&gt;

&lt;p&gt;The punctuation consists of counting the &lt;em&gt;placement&lt;/em&gt; of the punctuation
marks: at the end of clause (EOC), at the end of phrase (EOP) and in the
middle of a word (like the dash in “re-invent” or the apostrophe in
“don’”)&lt;/p&gt;

&lt;p&gt;The author claims that this is &lt;em&gt;“slighter better performance”&lt;/em&gt; than the
counting of the punctuation mark alone where the placement is ignored.&lt;/p&gt;

&lt;p&gt;The syntactic structures refers to the way that a “common” construction
deviates to an “uncommon” construction.&lt;/p&gt;

&lt;p&gt;The “common/uncommon” are named “unmarked/marked” constructions. This is
the technical name and “common/uncommon” are the names that I gave them
due my lack of expertise in the topic.&lt;/p&gt;

&lt;p&gt;A “common” (unmarked) construction could be “how old are you?”. In
English we could say “old” and “young” but it is very common to use
“old” for some reason. The “uncommon” (marked) would be “how young are
you?”.&lt;/p&gt;

&lt;p&gt;The “common/uncommon” does not limit to words but to phrases as well, no
only in literal phrases but in the &lt;em&gt;syntax&lt;/em&gt; of these.&lt;/p&gt;

&lt;p&gt;“the white house” follows the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;adjetive&amp;gt; &amp;lt;noun&amp;gt;&lt;/code&gt; “common” pattern.&lt;/p&gt;

&lt;p&gt;While it is clear that these “common/uncommon” feature could spot
non-native writers, it is not very clear to me how to use it for
authorship attribution in general.&lt;/p&gt;

&lt;p&gt;Perhaps seeing repetitive patterns in the “uncommon” parts of a phrase?
Like “the big white house” and “the white big house”: the order of the
adjetives may leave a fingerprint of the author.&lt;/p&gt;

&lt;p&gt;The last feature is lexical features (word lengths, and stuff like
that). The paper distinguishes between functional and content
words but use both.&lt;/p&gt;

&lt;p&gt;These features (punctuation, syntactic and lexical) are extracted using
ALIAS. Sadly it is a paid, closed source software (done by the author of
the paper) and the dataset seems to be closed too.&lt;/p&gt;

&lt;p&gt;For the “machine learning” part, the paper used linear
discriminant function analysis (DFA).&lt;/p&gt;

&lt;h3 id=&quot;determination-of-writing-styles-to-detect-similarities-in-digital-documents&quot;&gt;&lt;em&gt;Determination of writing styles to detect similarities in digital documents&lt;/em&gt;&lt;/h3&gt;

&lt;p&gt;&lt;label for=&quot;mn-9ccc45f89ad680ed51e1d714e206d0eb&quot; class=&quot;margin-toggle&quot;&gt; ⊕&lt;/label&gt;&lt;input type=&quot;checkbox&quot; id=&quot;mn-9ccc45f89ad680ed51e1d714e206d0eb&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;marginnote&quot;&gt;Authors:
Yohandri Ril Gil, Yuniet del Carmen Toll Palma, Eddy Fonseca Lahens
&lt;br /&gt;
University of Information Sciences, Havana
 &lt;/span&gt;&lt;/p&gt;

&lt;p&gt;The paper describes a stylometric mathematical model:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;frequency of stop words: articles, prepositions, adverbs and conjunctions.&lt;/li&gt;
  &lt;li&gt;level of difficulty: what’s the &lt;em&gt;education level&lt;/em&gt; required to understand
the text. It uses the Flesch-Kincaid index (English only).&lt;/li&gt;
  &lt;li&gt;richness of vocabulary&lt;/li&gt;
  &lt;li&gt;mean sentence length&lt;/li&gt;
  &lt;li&gt;mean word length&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The authors claim that
&lt;em&gt;“The proposed method for determining writing styles can be used in a
scenario where it is necessary to describe documents whose authorship
has been validated.”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;But the “discussion and conclusions” section talks more about the
underlying motivation for a person to do plagiarism than about the
model.&lt;/p&gt;

&lt;p&gt;They also claim&lt;/p&gt;

&lt;p&gt;&lt;em&gt;“The extraction of the style vector marks the
difference between authors, whether or not they cover the same topic. By
applying the proposed mathematical model to a considerable set of documents,
it was found that trends really do exist when it comes to drafting, and
that such trends put a stamp of authenticity onto a document.”&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;In a personal opinion, I’m have my doubts about these statements based
on the few numbers shown in the paper.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;stylometry-based-approach-for-detecting-writing-style-changes-in-literary-texts&quot;&gt;&lt;em&gt;Stylometry-based Approach for Detecting Writing Style Changes in Literary Texts&lt;/em&gt;&lt;/h3&gt;

&lt;p&gt;&lt;label for=&quot;mn-f8e1942b92f3abedb3baf092d6bf26b5&quot; class=&quot;margin-toggle&quot;&gt; ⊕&lt;/label&gt;&lt;input type=&quot;checkbox&quot; id=&quot;mn-f8e1942b92f3abedb3baf092d6bf26b5&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;marginnote&quot;&gt;Authors:
Helena Gómez-Adorno, Juan-Pablo Posadas-Duran, Germán Rios-Toledo, Grigori Sidorov, Gerardo Sierra
&lt;br /&gt;
Instituto Politécnico Nacional, Mexico; Universidad Nacional Autónoma de México, Mexico; Instituto Politécnico Nacional (IPN), Mexico; Centro Nacional de Investigación y Desarrollo Tecnológico, Mexico
 &lt;/span&gt;&lt;/p&gt;

&lt;p&gt;The paper compares the performance of different algorithms (Logistic Regression
and two implementation of Support Vector Machine) and different sets of
features (statistics like mean, average of word length, sentences
length, punctuation and stop words among others) to classify
writings of different authors.&lt;/p&gt;

&lt;p&gt;The Figure 1 of the paper shows that&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;using SVM over punctuation feature only yields a very good results.&lt;/li&gt;
  &lt;li&gt;using Logistic Regression as default for other combination of
features yields very good results.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;While those are interesting facts, there is no clear evidence of it (a
very small corpus was used).&lt;/p&gt;

&lt;p&gt;The paper shows that some authors’ styles are more sensible to some
features and algorithms than others.&lt;/p&gt;

&lt;p&gt;From a total of 6 authors:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;“[Punctuation-based models] classified
the writing stage of a work above 70% of the times
for two authors […], [in the case of other two authors] 
the combination
of phraseology-and punctuation-based features obtained the best
performance. The combination
of all types of features obtained the best
performance for [the remaining two authors]”&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;It doesn’t look solid.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;what-kicked-everything&quot;&gt;What kicked everything&lt;/h2&gt;

&lt;h3 id=&quot;detecting-deterring-ghostwritten-papers-best-practices&quot;&gt;&lt;em&gt;Detecting deterring ghostwritten papers, best practices&lt;/em&gt;&lt;/h3&gt;

&lt;p&gt;&lt;label for=&quot;mn-3a83cf25a5fc5d5c304eb2a1b6131218&quot; class=&quot;margin-toggle&quot;&gt; ⊕&lt;/label&gt;&lt;input type=&quot;checkbox&quot; id=&quot;mn-3a83cf25a5fc5d5c304eb2a1b6131218&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;marginnote&quot;&gt;Authors:
David A. Tomar (Ed Dante)
 &lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://thebestschools.org/resources/detecting-deterring-ghostwritten-papers-best-practices/&quot;&gt;It is what started this.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Classify the students paying for a ghost writer in three categories:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Non native language: students that they need to write an essay in a
foreign language, let’s say English. The student knows that he/she will have
more opportunities to succeed if the essay is written by a native
English speaker.&lt;/li&gt;
  &lt;li&gt;Composition/Research deficient students: students that, while they
can speak and write in the target language, they have hard time to
write an essay or doing the homework.&lt;/li&gt;
  &lt;li&gt;Lazy students: they prefer to pay for a service instead of doing the
work.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Detecting a ghost writer is hard and having solid proof of it is harder.&lt;/p&gt;

&lt;p&gt;The best strategy is to disallow the possibility from the begin making
the decision of hiring a ghost writer much expensive, riskier.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;In-class writing: the students write during the class so it is hard
for a ghost writer to be there&lt;/li&gt;
  &lt;li&gt;Multi-draft process: have a periodic review with the students and
check the evolution of the essay/work.&lt;/li&gt;
  &lt;li&gt;Personalization of the subject matter: use topics that are more
personal and can be bind to the author. That part is important, the
subject must be bound to the student in some verificable way
otherwise a ghost writer could just write a personal subject about
him/her!&lt;/li&gt;
  &lt;li&gt;Original course materials: make the topic have something very unique.
Don’t repeat yourself.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These should be combined and adapted to the particular class.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Having 1o1 meetings with the students randomly chosen to discuss the
implementation details of a work makes the “multi-draft process”
scalable.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Exit interviews (interviews that happen when the student does a
final submission) are an example of that.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A very nice article to read.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;resources&quot;&gt;Resources&lt;/h2&gt;

&lt;p&gt;NLTK’s &lt;a href=&quot;https://www.nltk.org/_modules/nltk/tokenize/punkt.html&quot;&gt;punkt&lt;/a&gt; module: Punkt Sentence Tokenizer&lt;/p&gt;

&lt;p&gt;&lt;em&gt;“This tokenizer divides a text into a list of sentences
by using an unsupervised algorithm to build a model for abbreviation
words, collocations, and words that start sentences.  It must be
trained on a large collection of plaintext in the target language
before it can be used.”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;“The NLTK data package includes a pre-trained Punkt tokenizer for
English.”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;It is used to determine when a period marks the end of a sentence and
when it doesn’t and things like that.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/euske/pdfminer/&quot;&gt;PDFMiner&lt;/a&gt; (community): parser for PDF files&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://cligs.hypotheses.org/577&quot;&gt;Blog post&lt;/a&gt; that explains how to call R code from Python using the &lt;code class=&quot;highlighter-rouge&quot;&gt;rpy2&lt;/code&gt;
module. In particular how to call the R package &lt;code class=&quot;highlighter-rouge&quot;&gt;stylo&lt;/code&gt; from Python&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/computationalstylistics/stylo&quot;&gt;Stylo&lt;/a&gt;: R package for stylometric analyses&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/evllabs/JGAAP&quot;&gt;JGAAP&lt;/a&gt;: Java Graphical Authorship Attribution Program is a tool to allow
nonexperts to use cutting edge machine learning techniques on text
attribution problems&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.nltk.org/&quot;&gt;NTLK&lt;/a&gt;: Natural Language Toolkit for Python&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://stanfordnlp.github.io/stanza/index.html&quot;&gt;Stanza&lt;/a&gt;: A Python NLP Package for Many Human Languages&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/chrisspen/weka&quot;&gt;Weka&lt;/a&gt;: a toolset/framework for ML like skilearn but with a GUI. It is
very interesting.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://cschoel.github.io/nolds/nolds.html&quot;&gt;Nolds&lt;/a&gt;: Python package with algorithms to analyze random sequences (signals,
market time series, text perhaps?)&lt;/p&gt;

&lt;h2 id=&quot;some-other-resources&quot;&gt;Some other resources&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/Hassaan-Elahi/Writing-Styles-Classification-Using-Stylometric-Analysis&quot;&gt;Identifying Different Writing Styles in a Document Intrinsically Using Stylometric Analysis&lt;/a&gt;
It is a single Python file with several metrics poorly documented.
It could be useful to see the code for some cases because it has a lot
of metrics, most of them mentioned in the paper of Zheng.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.turnitin.com/&quot;&gt;Turnitin&lt;/a&gt;: among other stuff, it has a plagiarism detection.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://aliastechnology.com&quot;&gt;ALIAS&lt;/a&gt; is program developed by Carole E.
Chaski for &lt;em&gt;“lemmatizing, computing
lexical frequency ranking, calculating lexical, sentential and text lengths,
punctuation-edge counting, Part-Of-Speech-tagging (POS-tagging) , n-graph
and n-gram sorting, and markedness subcategorizing”&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Sadly it is a paid, closed source software.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;n-gram is used to denote the sequence of &lt;script type=&quot;math/tex&quot;&gt;n&lt;/script&gt; elements like words or
POS tags while n-graph denotes sequences of &lt;script type=&quot;math/tex&quot;&gt;n&lt;/script&gt; characters.&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name>Gehn</name></author><summary type="html">A ghost writer is a person that writes a document, essay or paper but the work is presented by other person who claims to be the author. Detecting deterring ghostwritten papers is an article written by a (ex)ghost writer and explains what happens behind the scene when a student pays for this dark service. Would be possible to detect this in an automated way? Given a set of documents, could we determine of they were written or not by the person or people who claim to be the authors? This problem is known as authorship attribution and I will show a few papers that I read about this, in particular around the concept of stylometric, fingerprints that the real author leaves when he or she writes.</summary></entry><entry><title type="html">Kasiski Test - Part I</title><link href="/book-of-gehn/articles/2020/10/11/Kasiski-Test-Part-I.html" rel="alternate" type="text/html" title="Kasiski Test - Part I" /><published>2020-10-11T00:00:00+02:00</published><updated>2020-10-11T00:00:00+02:00</updated><id>/book-of-gehn/articles/2020/10/11/Kasiski-Test-Part-I</id><content type="html" xml:base="/book-of-gehn/articles/2020/10/11/Kasiski-Test-Part-I.html">&lt;p&gt;The tricky part of breaking the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Vigen%C3%A8re_cipher&quot;&gt;Vigenere cipher&lt;/a&gt;
consists in finding the length of the key.&lt;/p&gt;

&lt;p&gt;We discussed this in the
&lt;a href=&quot;/book-of-gehn/articles/2018/05/01/Breaking-Vigenere.html&quot;&gt;breaking Vigenere&lt;/a&gt;
post.&lt;/p&gt;

&lt;p&gt;In that occasion we used the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Hamming_distance&quot;&gt;Hamming distance&lt;/a&gt; and
the &lt;a href=&quot;/book-of-gehn/articles/2019/10/04/Index-of-Coincidence.html&quot;&gt;Index of Coincidence&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;But another method existed much before the development of the IC around 1922.&lt;/p&gt;

&lt;p&gt;In 1863, Kasiski published a method to guess the length of the secret
key, method that we know today as the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Kasiski_examination&quot;&gt;Kasiski test&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let’s explore a &lt;script type=&quot;math/tex&quot;&gt;O(\vert s \vert)&lt;/script&gt; solution with a worst case of
&lt;script type=&quot;math/tex&quot;&gt;O(\vert s \vert^2)&lt;/script&gt;&lt;!--more--&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-naive-solution&quot;&gt;The naive solution&lt;/h2&gt;

&lt;p&gt;The Kasiski test consists in finding repeated ngrams in the ciphertext
and measure the distance between them.&lt;/p&gt;

&lt;p&gt;If there are repeated ngram in the plaintext that were &lt;em&gt;leaked&lt;/em&gt; in the
ciphertext, that means that the secret key was also repeated exactly in
that part.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;                     repeated ngrams
                /----------/-----------/
    ptext:      69 63 65 20 69 63 65 20 62 61 62 79
    kstream:    73 6F 6E 67 73 6F 6E 67 73 6F 6E 67  (key = 73 6F 6E 67)
    ctext:      1A 0C 0B 47 1A 0C 0B 47 11 0E 0C 1E
                \----------\-----------\
                     repeated ngrams
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;label for=&quot;mn-7aa1bda5b4adf142e467684892c97b5d&quot; class=&quot;margin-toggle&quot;&gt; ⊕&lt;/label&gt;&lt;input type=&quot;checkbox&quot; id=&quot;mn-7aa1bda5b4adf142e467684892c97b5d&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;marginnote&quot;&gt;It is perfectly possible to find repeated ngrams randomly,
just by luck. Those are the “exceptions”.
&lt;br /&gt;
I will talk about that in the second-part post.
 &lt;/span&gt;&lt;/p&gt;

&lt;p&gt;With some exceptions, the distance between two repeated ngrams in
the ciphertext must be then a multiple of the length of the key.&lt;/p&gt;

&lt;p&gt;But for a particular ngram of length &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt;, finding all the repeated
ngrams requires scan the whole string, an effort of
&lt;script type=&quot;math/tex&quot;&gt;O(\vert s \vert)&lt;/script&gt;, proportional to the size of the input string.&lt;/p&gt;

&lt;p&gt;Repeating the process for all the ngrams of length &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt; yields
&lt;script type=&quot;math/tex&quot;&gt;O(\vert s \vert^2)&lt;/script&gt;.&lt;/p&gt;

&lt;p&gt;And that’s only for &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt;. Repeating everything again for
the ngrams of length &lt;code class=&quot;highlighter-rouge&quot;&gt;n+1&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;n+2&lt;/code&gt; and so
on blows up quickly to &lt;script type=&quot;math/tex&quot;&gt;O(\vert s \vert^3)&lt;/script&gt;.&lt;/p&gt;

&lt;p&gt;No no, we can improve this.&lt;/p&gt;

&lt;h2 id=&quot;the-strategy&quot;&gt;The strategy&lt;/h2&gt;

&lt;h3 id=&quot;as_ngram_repeated_positions-algorithm&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;as_ngram_repeated_positions&lt;/code&gt; algorithm&lt;/h3&gt;

&lt;p&gt;We build the list of &lt;em&gt;all&lt;/em&gt; repeated ngrams of length &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt; using
hashing in &lt;script type=&quot;math/tex&quot;&gt;O(\vert s \vert)&lt;/script&gt; and not &lt;script type=&quot;math/tex&quot;&gt;O(\vert s \vert^2)&lt;/script&gt;.&lt;/p&gt;

&lt;h3 id=&quot;merge_overlaping-algorithm&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;merge_overlaping&lt;/code&gt; algorithm&lt;/h3&gt;

&lt;p&gt;&lt;label for=&quot;mn-b1a4c559712afcfe68a3cc14a228a82b&quot; class=&quot;margin-toggle&quot;&gt; ⊕&lt;/label&gt;&lt;input type=&quot;checkbox&quot; id=&quot;mn-b1a4c559712afcfe68a3cc14a228a82b&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;marginnote&quot;&gt;This is an example of
&lt;a href=&quot;https://en.wikipedia.org/wiki/Dynamic_programming&quot;&gt;dynamic
programming&lt;/a&gt;.
Take a look of
&lt;a href=&quot;assets/kasiski/MatthewBerntsenBUThesis.7z&quot;&gt;Automating the Cracking of Simple Ciphers, by Matthew C. Berntsen&lt;/a&gt;
for a similar idea.
 &lt;a href=&quot;assets/kasiski/perf_kasiski.py&quot;&gt;&lt;i class=&quot;fab fa-github&quot;&gt;&lt;/i&gt; code&lt;/a&gt;
 &lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Then, we build the list of the repeated ngrams of length &lt;code class=&quot;highlighter-rouge&quot;&gt;n+1&lt;/code&gt;
&lt;em&gt;reusing&lt;/em&gt; the finding of the previous step.&lt;/p&gt;

&lt;p&gt;This will require &lt;script type=&quot;math/tex&quot;&gt;O(g)&lt;/script&gt; where &lt;script type=&quot;math/tex&quot;&gt;g&lt;/script&gt; is the size of the list built in the
previous step.&lt;/p&gt;

&lt;p&gt;While &lt;script type=&quot;math/tex&quot;&gt;O(g) = O(\vert s \vert)&lt;/script&gt; in the worst case, it is expected to
find &lt;em&gt;very few&lt;/em&gt; repeated ngrams of length &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt; so in the practice
&lt;script type=&quot;math/tex&quot;&gt;O(g) \ll O(\vert s \vert)&lt;/script&gt;.&lt;/p&gt;

&lt;h3 id=&quot;deltas_from_positions-algorithm&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;deltas_from_positions&lt;/code&gt; algorithm&lt;/h3&gt;

&lt;p&gt;The distances between the ngrams found can also be found in &lt;script type=&quot;math/tex&quot;&gt;O(g)&lt;/script&gt;.&lt;/p&gt;

&lt;p&gt;The naive implementation would require &lt;script type=&quot;math/tex&quot;&gt;O(g^2)&lt;/script&gt; but we can improve it
a little.&lt;/p&gt;

&lt;h3 id=&quot;frequency_of_deltas-algorithm-aka-the-main&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;frequency_of_deltas&lt;/code&gt; algorithm (aka the main)&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;frequency_of_deltas&lt;/code&gt; will combine all the previous algorithms.&lt;/p&gt;

&lt;p&gt;It can be done roughly in
&lt;script type=&quot;math/tex&quot;&gt;O(\vert s \vert) + O(g^m)&lt;/script&gt; where &lt;script type=&quot;math/tex&quot;&gt;m&lt;/script&gt; is the count of iterations that we
repeat &lt;code class=&quot;highlighter-rouge&quot;&gt;merge_overlaping&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In the worst case, &lt;script type=&quot;math/tex&quot;&gt;O(g^m)&lt;/script&gt; behaves as &lt;script type=&quot;math/tex&quot;&gt;O(\vert s \vert^2)&lt;/script&gt; and
&lt;code class=&quot;highlighter-rouge&quot;&gt;frequency_of_deltas&lt;/code&gt; will be quadratic.&lt;/p&gt;

&lt;p&gt;But as we said, we don’t expect to find many repeated ngrams so the term
&lt;script type=&quot;math/tex&quot;&gt;O(g^m)&lt;/script&gt; will be negligible and &lt;code class=&quot;highlighter-rouge&quot;&gt;frequency_of_deltas&lt;/code&gt; will remain linear.&lt;/p&gt;

&lt;p&gt;We have the strategy, now we need the correct tools.&lt;/p&gt;

&lt;h2 id=&quot;data-structures&quot;&gt;Data structures&lt;/h2&gt;

&lt;p&gt;We will use the following data structures:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;dictionaries: with &lt;script type=&quot;math/tex&quot;&gt;O(1)&lt;/script&gt; for insertion or update of a key.&lt;/li&gt;
  &lt;li&gt;lists: with &lt;script type=&quot;math/tex&quot;&gt;O(1)&lt;/script&gt; for append and &lt;script type=&quot;math/tex&quot;&gt;O(n)&lt;/script&gt; for iteration.&lt;/li&gt;
  &lt;li&gt;default-dictionaries: like the dictionaries but with the handy
shortcut to create and add an entry in the dictionary if the key
requested is not present.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Python is not the fastest language but it has all the tools needed.&lt;/p&gt;

&lt;p&gt;Let’s start!&lt;/p&gt;

&lt;h2 id=&quot;repeating-ngram-list---as_ngram_repeated_positions-algorithm&quot;&gt;Repeating ngram list - &lt;code class=&quot;highlighter-rouge&quot;&gt;as_ngram_repeated_positions&lt;/code&gt; algorithm&lt;/h2&gt;

&lt;p&gt;We are interested in to find all the positions of every single repeated
ngram in the text.&lt;/p&gt;

&lt;p&gt;Focus only on the ngrams of 2 characters for now.&lt;/p&gt;

&lt;p&gt;&lt;label for=&quot;mf-8c277780c7574cdaab2a355d0f29039e&quot; class=&quot;margin-toggle &quot;&gt;⊕&lt;/label&gt;&lt;input type=&quot;checkbox&quot; id=&quot;mf-8c277780c7574cdaab2a355d0f29039e&quot; class=&quot;margin-toggle &quot; /&gt;&lt;span class=&quot;marginnote &quot;&gt;&lt;img class=&quot;fullwidth&quot; alt=&quot;&quot; src=&quot;/book-of-gehn/assets/kasiski/kasiski_scan_count.png&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;We need to count how many instances of the same ngram are, so we can
know which are unique; and we need to track their position, so
we can later know the distance between them.&lt;/p&gt;

&lt;p&gt;Storing every ngram instance in memory is expensive (for a 2 characters
ngram you will have to store twice the source string).&lt;/p&gt;

&lt;p&gt;A simple solution is to use an id: different ngrams will have different
ids while the instances of the &lt;em&gt;same&lt;/em&gt; ngram will have the same id.&lt;/p&gt;

&lt;figure&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;img style=&quot;max-width:45%;&quot; src=&quot;/book-of-gehn/assets/kasiski/kasiski_scan_positions.png&quot; /&gt;&lt;/figure&gt;

&lt;p&gt;The following Python fragment summarizes the above:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# input: s, the original text
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id_of_ngram&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pos_sorted&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ngram_cnt_by_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;defaultdict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ngram_cnt_by_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# id==0 is reserved for deletions, see later
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ngram&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;enumerate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ngrams&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)):&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id_of_ngram&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setdefault&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ngram&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id_of_ngram&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;pos_sorted&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ngram_cnt_by_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;label for=&quot;mf-3dfbcfb6f6d4f6825eea9bcbb994fbfe&quot; class=&quot;margin-toggle &quot;&gt;⊕&lt;/label&gt;&lt;input type=&quot;checkbox&quot; id=&quot;mf-3dfbcfb6f6d4f6825eea9bcbb994fbfe&quot; class=&quot;margin-toggle &quot; /&gt;&lt;span class=&quot;marginnote &quot;&gt;&lt;img class=&quot;fullwidth&quot; alt=&quot;&quot; src=&quot;/book-of-gehn/assets/kasiski/as_ngram_repeated_positions.png&quot; /&gt;  &lt;br /&gt;Input-size/time-taken relationship of &lt;code class=&quot;highlighter-rouge&quot;&gt;as_ngram_repeated_positions&lt;/code&gt;.
 &lt;a href=&quot;assets/kasiski/perf_kasiski.py&quot;&gt;&lt;i class=&quot;fab fa-github&quot;&gt;&lt;/i&gt; code&lt;/a&gt;
&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;For a string of &lt;script type=&quot;math/tex&quot;&gt;\vert s \vert&lt;/script&gt; characters the algorithm generates
a list of &lt;script type=&quot;math/tex&quot;&gt;\vert s \vert&lt;/script&gt;
tuples. If chosen the data structures correctly, the algorithm runs
in &lt;script type=&quot;math/tex&quot;&gt;O(\vert s \vert)&lt;/script&gt; (linear time and space).&lt;/p&gt;

&lt;p&gt;One final step remains: once we have the list we need to filter out
any unique ngram (those that have a counter of less than 2).&lt;/p&gt;

&lt;p&gt;This is also linear.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;pos_sorted&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos_sorted&lt;/span&gt;
                      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ngram_cnt_by_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;figure&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;img style=&quot;max-width:60%;&quot; src=&quot;/book-of-gehn/assets/kasiski/kasiski_scan_count_filter.png&quot; /&gt;&lt;/figure&gt;

&lt;p&gt;The final result is a list of tuples &lt;code class=&quot;highlighter-rouge&quot;&gt;(position, id)&lt;/code&gt; with the
positions of the ngrams and their identifiers &lt;em&gt;sorted&lt;/em&gt; by their
position.&lt;/p&gt;

&lt;p&gt;The algorithm can be generalized to find all the non-unique ngrams of
length &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt; changing &lt;code class=&quot;highlighter-rouge&quot;&gt;s.ngrams(2)&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;s.ngrams(n)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The trick is how to build the list of ngrams of &lt;code class=&quot;highlighter-rouge&quot;&gt;n+1&lt;/code&gt;
length &lt;em&gt;reusing&lt;/em&gt; the ngrams of length &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt; found by the above algorithm.&lt;/p&gt;

&lt;h2 id=&quot;superior-ngram-order---merge_overlaping-algorithm&quot;&gt;Superior ngram order - &lt;code class=&quot;highlighter-rouge&quot;&gt;merge_overlaping&lt;/code&gt; algorithm&lt;/h2&gt;

&lt;p&gt;The idea is that two ngrams &lt;code class=&quot;highlighter-rouge&quot;&gt;g_1&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;g_2&lt;/code&gt; of &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt; characters
at positions &lt;code class=&quot;highlighter-rouge&quot;&gt;p_1&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;p_2&lt;/code&gt; in the original string can be &lt;em&gt;merged&lt;/em&gt;
and build a ngram of &lt;code class=&quot;highlighter-rouge&quot;&gt;n+1&lt;/code&gt; bytes at &lt;code class=&quot;highlighter-rouge&quot;&gt;p_1&lt;/code&gt; if and only if
&lt;code class=&quot;highlighter-rouge&quot;&gt;p_1 + 1 == p_2&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In other words, they are consecutive.&lt;/p&gt;

&lt;figure&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;img style=&quot;max-width:60%;&quot; src=&quot;/book-of-gehn/assets/kasiski/kasiski_merge.png&quot; /&gt;&lt;/figure&gt;

&lt;p&gt;A merged ngram not necessary means that it is a repeated ngram but
we know that any repeated ngram will be a merged one.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;id_of_ngram&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ngram_cnt_by_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;defaultdict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ngram_cnt_by_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;enumerate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;zip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos_sorted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos_sorted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:])):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pcur&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pnex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nex&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pcur&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pnex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;pos_sorted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# delete later (index 0 is special)
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# the id of the merged ngram is formed by the ids of the
&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;# original pair of ngrams.
&lt;/span&gt;        &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id_of_ngram&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setdefault&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id_of_ngram&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;pos_sorted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pcur&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;# new ngram
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;ngram_cnt_by_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# the last position P1 always is &quot;deleted&quot; because there is
# not P2 such P1 + 1 == P2 *and* P1 &amp;lt; P2 (basically because there
# are no more positions after P1)
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos_sorted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;During the scan we also count how many ngrams we built: unique
ngrams are filtered later in linear time removing the false positives.&lt;/p&gt;

&lt;p&gt;&lt;label for=&quot;mf-0466b2ac93c53d43876c9893ceda0d57&quot; class=&quot;margin-toggle &quot;&gt;⊕&lt;/label&gt;&lt;input type=&quot;checkbox&quot; id=&quot;mf-0466b2ac93c53d43876c9893ceda0d57&quot; class=&quot;margin-toggle &quot; /&gt;&lt;span class=&quot;marginnote &quot;&gt;&lt;img class=&quot;fullwidth&quot; alt=&quot;&quot; src=&quot;/book-of-gehn/assets/kasiski/merge_overlaping.png&quot; /&gt;  &lt;br /&gt;Input-size/time-taken relationship of &lt;code class=&quot;highlighter-rouge&quot;&gt;merge_overlaping&lt;/code&gt;.
 &lt;a href=&quot;assets/kasiski/perf_kasiski.py&quot;&gt;&lt;i class=&quot;fab fa-github&quot;&gt;&lt;/i&gt; code&lt;/a&gt;
&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;pos_sorted&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos_sorted&lt;/span&gt;
                      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ngram_cnt_by_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;merge_overlaping&lt;/code&gt; is a linear operation in terms of the initial &lt;code class=&quot;highlighter-rouge&quot;&gt;pos_sorted&lt;/code&gt;
list not in terms of the length of the input strings.&lt;/p&gt;

&lt;p&gt;In the practice this means that &lt;code class=&quot;highlighter-rouge&quot;&gt;merge_overlaping&lt;/code&gt; – &lt;script type=&quot;math/tex&quot;&gt;O(g)&lt;/script&gt; – will be
faster than &lt;code class=&quot;highlighter-rouge&quot;&gt;as_ngram_repeated_positions&lt;/code&gt; – &lt;script type=&quot;math/tex&quot;&gt;O(\vert s \vert)&lt;/script&gt;.&lt;/p&gt;

&lt;h2 id=&quot;computing-the-gaps---deltas_from_positions-algorithm&quot;&gt;Computing the gaps - &lt;code class=&quot;highlighter-rouge&quot;&gt;deltas_from_positions&lt;/code&gt; algorithm&lt;/h2&gt;

&lt;p&gt;Now that we have the position of each repeated ngram we want to
calculate the distance between them.&lt;/p&gt;

&lt;p&gt;We are interested in the distance between the &lt;em&gt;same&lt;/em&gt; ngrams.&lt;/p&gt;

&lt;p&gt;This is because we assume that the same repeated ngram in a ciphertext
is due the encryption of the same plaintext &lt;em&gt;and&lt;/em&gt; the repeating key of
Vigenere was aligned.&lt;/p&gt;

&lt;p&gt;The distance should be then a multiple of the length of the key.&lt;/p&gt;

&lt;p&gt;&lt;label for=&quot;mf-2c67b39cb16460c7f5e089e831cf95e4&quot; class=&quot;margin-toggle &quot;&gt;⊕&lt;/label&gt;&lt;input type=&quot;checkbox&quot; id=&quot;mf-2c67b39cb16460c7f5e089e831cf95e4&quot; class=&quot;margin-toggle &quot; /&gt;&lt;span class=&quot;marginnote &quot;&gt;&lt;img class=&quot;fullwidth&quot; alt=&quot;&quot; src=&quot;/book-of-gehn/assets/kasiski/kasiski_pos_grouped.png&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# group first
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos_grouped&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;defaultdict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos_sorted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pos_grouped&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# compute the gaps later
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delta_stats&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;positions&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos_grouped&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;zip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;positions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;positions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:]))&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;delta_stats&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;label for=&quot;mf-46e954f537e253f23e73044c8610e9aa&quot; class=&quot;margin-toggle &quot;&gt;⊕&lt;/label&gt;&lt;input type=&quot;checkbox&quot; id=&quot;mf-46e954f537e253f23e73044c8610e9aa&quot; class=&quot;margin-toggle &quot; /&gt;&lt;span class=&quot;marginnote &quot;&gt;&lt;img class=&quot;fullwidth&quot; alt=&quot;&quot; src=&quot;/book-of-gehn/assets/kasiski/kasiski_distances.png&quot; /&gt;  &lt;br /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;We simplify the maths and calculate then the difference
between &lt;em&gt;consecutive&lt;/em&gt; positions for a given ngram.&lt;/p&gt;

&lt;p&gt;We assume that difference between non-consecutive values will yield a
multiple of the previous shorter difference hence it will be also a
multiple of the key length.&lt;/p&gt;

&lt;p&gt;In other words, calculating the “multiple of the multiple” does not add any
new information.&lt;/p&gt;

&lt;h2 id=&quot;frequency-of-deltas---frequency_of_deltas-algorithm&quot;&gt;Frequency of deltas - &lt;code class=&quot;highlighter-rouge&quot;&gt;frequency_of_deltas&lt;/code&gt; algorithm&lt;/h2&gt;

&lt;p&gt;Basically we put all the algorithms to work together:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pos_sorted&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;as_ngram_repeated_positions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos_sorted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;delta_stats&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;deltas_from_positions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos_sorted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delta_stats&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;pos_sorted&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;merge_overlaping&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos_sorted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here are some examples using
&lt;a href=&quot;https://pypi.org/project/cryptonita/&quot;&gt;cryptonita&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;cryptonita&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;cryptonita.stats.kasiski&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;frequency_of_deltas&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'ABCDBCDABCDBC'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;frequency_of_deltas&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})]&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'1A0C0B471A0C0B47110E0C1E'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;encoding&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;frequency_of_deltas&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In the last example the first &lt;code class=&quot;highlighter-rouge&quot;&gt;Counter&lt;/code&gt; is for the ngrams
&lt;code class=&quot;highlighter-rouge&quot;&gt;1A 0C 0B&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;0C 0B 47&lt;/code&gt; where found repeated at a distance of 4 once
each one (2 in total). The second &lt;code class=&quot;highlighter-rouge&quot;&gt;Counter&lt;/code&gt; is for &lt;code class=&quot;highlighter-rouge&quot;&gt;1A 0C 0B 47&lt;/code&gt;
repeated once at a distance of 4.&lt;/p&gt;

&lt;p&gt;As predicted the expected effort is linear while the worst case is
quadratic.&lt;/p&gt;

&lt;figure&gt;&lt;figcaption&gt;&lt;span&gt;&lt;br /&gt;
Expected case. &lt;code class=&quot;highlighter-rouge&quot;&gt;frequency_of_deltas&lt;/code&gt; has a linear response when
the size of the input increase linearly.
 &lt;a href=&quot;assets/kasiski/perf_kasiski.py&quot;&gt;&lt;i class=&quot;fab fa-github&quot;&gt;&lt;/i&gt; code&lt;/a&gt;
&lt;/span&gt;&lt;/figcaption&gt;&lt;img src=&quot;/book-of-gehn/assets/kasiski/frequency_of_deltas.png&quot; /&gt;&lt;/figure&gt;

&lt;figure&gt;&lt;figcaption&gt;&lt;span&gt;&lt;br /&gt;
Worst case. &lt;code class=&quot;highlighter-rouge&quot;&gt;frequency_of_deltas&lt;/code&gt; has a quadratic response when
the size of the input increase linearly. Even with this result,
it is better than cubic the naive implementation.
 &lt;a href=&quot;assets/kasiski/perf_kasiski.py&quot;&gt;&lt;i class=&quot;fab fa-github&quot;&gt;&lt;/i&gt; code&lt;/a&gt;
&lt;/span&gt;&lt;/figcaption&gt;&lt;img src=&quot;/book-of-gehn/assets/kasiski/frequency_of_deltas_worst_case.png&quot; /&gt;&lt;/figure&gt;

&lt;h2 id=&quot;final-thoughts&quot;&gt;Final thoughts&lt;/h2&gt;

&lt;p&gt;With &lt;code class=&quot;highlighter-rouge&quot;&gt;frequency_of_deltas&lt;/code&gt; we have the most likely difference or gap,
gap that it should be a multiple of the length of the key.&lt;/p&gt;

&lt;p&gt;But what if a repeated ngram happen just by luck?&lt;/p&gt;

&lt;p&gt;That’s for the Part II.&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/book-of-gehn/articles/2018/05/01/Breaking-Vigenere.html&quot;&gt;Breaking Vigenere&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/book-of-gehn/articles/2019/10/04/Index-of-Coincidence.html&quot;&gt;Index of Coincidence&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://wiki.python.org/moin/TimeComplexity&quot;&gt;Python Time Complexity&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Dynamic_programming&quot;&gt;Dynamic Programming&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;assets/kasiski/MatthewBerntsenBUThesis.7z&quot;&gt;Automating the Cracking of Simple Ciphers, by Matthew C. Berntsen&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Gehn</name></author><summary type="html">The tricky part of breaking the Vigenere cipher consists in finding the length of the key. We discussed this in the breaking Vigenere post. In that occasion we used the Hamming distance and the Index of Coincidence. But another method existed much before the development of the IC around 1922. In 1863, Kasiski published a method to guess the length of the secret key, method that we know today as the Kasiski test. Let’s explore a solution with a worst case of</summary></entry><entry><title type="html">Debug: the Case of a CPU Burning Ruby Process</title><link href="/book-of-gehn/articles/2020/09/13/Debug-the-Case-of-a-CPU-Burning-Ruby-Process.html" rel="alternate" type="text/html" title="Debug: the Case of a CPU Burning Ruby Process" /><published>2020-09-13T00:00:00+02:00</published><updated>2020-09-13T00:00:00+02:00</updated><id>/book-of-gehn/articles/2020/09/13/Debug-the-Case-of-a-CPU-Burning-Ruby-Process</id><content type="html" xml:base="/book-of-gehn/articles/2020/09/13/Debug-the-Case-of-a-CPU-Burning-Ruby-Process.html">&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;executor.rb&lt;/code&gt; is a little program that starts and finishes other programs
based on the needs of the system.&lt;/p&gt;

&lt;p&gt;It is expected to have one and only one &lt;code class=&quot;highlighter-rouge&quot;&gt;executor.rb&lt;/code&gt; process running with
little overhead.&lt;/p&gt;

&lt;p&gt;In one of the machines in the lab I found the opposite: two &lt;code class=&quot;highlighter-rouge&quot;&gt;executor.rb&lt;/code&gt;
instances and one of them running at top speed, consuming 100% of CPU.&lt;/p&gt;

&lt;p&gt;For the rest, the system was working properly so one of
the &lt;code class=&quot;highlighter-rouge&quot;&gt;executor.rb&lt;/code&gt; was doing its job.&lt;/p&gt;

&lt;p&gt;But what was the &lt;em&gt;“twin evil”&lt;/em&gt; process doing with the CPU?&lt;!--more--&gt;&lt;/p&gt;

&lt;h2 id=&quot;ruby-stack-sampling-with-rbspy&quot;&gt;Ruby stack sampling with &lt;code class=&quot;highlighter-rouge&quot;&gt;rbspy&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;To get some insight I used &lt;a href=&quot;https://github.com/rbspy/rbspy&quot;&gt;rbspy&lt;/a&gt;. It
profiles a Ruby process sampling its memory, reconstructing the stack
and showing which stack traces are the most common executed.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo&lt;/span&gt; ./rbspy record &lt;span class=&quot;nt&quot;&gt;--pid&lt;/span&gt; 2331 &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; 120 &lt;span class=&quot;nt&quot;&gt;--raw-file&lt;/span&gt; data.gz        &lt;span class=&quot;c&quot;&gt;# byexample: +skip&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Two minutes of sampling was done for the good and the bad
&lt;code class=&quot;highlighter-rouge&quot;&gt;executor.rb&lt;/code&gt; processes.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;rbspy&lt;/code&gt; can also generate
&lt;a href=&quot;https://rbspy.github.io/using-flamegraphs/&quot;&gt;flame graphs&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;./rbspy report &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; flamegraph &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; data.gz  &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; out-good.svg      &lt;span class=&quot;c&quot;&gt;# byexample: +skip&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;figure class=&quot;fullwidth&quot;&gt;&lt;img src=&quot;/book-of-gehn/assets/debugging/flame-ruby-executor.png&quot; /&gt;&lt;figcaption&gt;Flamegraph of 2 minutes sampling. On top a good behaving `executor.rb`,
spending most of the time waiting (right side). On bottom, its evil twin
with a totally broken call stack.&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Unfortunately the call stack of the buggy process makes no sense.&lt;/p&gt;

&lt;h2 id=&quot;syscall-tracing-with-strace&quot;&gt;Syscall tracing with &lt;code class=&quot;highlighter-rouge&quot;&gt;strace&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;&lt;label for=&quot;mn-2ac570267a9c9aef07d41df2a0f317ad&quot; class=&quot;margin-toggle&quot;&gt; ⊕&lt;/label&gt;&lt;input type=&quot;checkbox&quot; id=&quot;mn-2ac570267a9c9aef07d41df2a0f317ad&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;marginnote&quot;&gt;It would not be first time that I see a infinite loop calling &lt;code class=&quot;highlighter-rouge&quot;&gt;read(fd,
buf, 0)&lt;/code&gt;  &lt;/span&gt;&lt;/p&gt;

&lt;p&gt;I rollback to the traditional
&lt;a href=&quot;https://linux.die.net/man/1/strace&quot;&gt;strace&lt;/a&gt;. It slows down quite a bit
the debugged process but knowing which syscall is being executed can be
of a great help.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;strace &lt;span class=&quot;nt&quot;&gt;-tt&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-T&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 2331
&amp;lt;...&amp;gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;pid 2331] 16:45:05.676271 sched_yield&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 0 &amp;lt;0.000008&amp;gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;pid 2331] 16:45:05.676309 sched_yield&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 0 &amp;lt;0.000008&amp;gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;pid 2331] 16:45:05.676346 sched_yield&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 0 &amp;lt;0.000008&amp;gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;pid 2331] 16:45:05.676383 sched_yield&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 0 &amp;lt;0.000008&amp;gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;pid 2331] 16:45:05.676419 sched_yield&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 0 &amp;lt;0.000007&amp;gt;
&amp;lt;...&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://www.man7.org/linux/man-pages/man2/sched_yield.2.html&quot;&gt;sched_yield()&lt;/a&gt;
is a syscall to &lt;em&gt;“relinquish the CPU”&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The caller thread decides that it cannot make any useful so it tells the
OS that it should be moved out of the CPU (move the thread from running
to ready) so other threads can use it.&lt;/p&gt;

&lt;p&gt;&lt;label for=&quot;mn-616c8d5d8c31981ce03e5e124aef13e8&quot; class=&quot;margin-toggle&quot;&gt; ⊕&lt;/label&gt;&lt;input type=&quot;checkbox&quot; id=&quot;mn-616c8d5d8c31981ce03e5e124aef13e8&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;marginnote&quot;&gt;I talk a marginally about this in my
&lt;a href=&quot;/book-of-gehn/articles/2020/02/15/CPU-Cache-Coherence.html&quot;&gt;other post&lt;/a&gt;
 &lt;/span&gt;&lt;/p&gt;

&lt;p&gt;I found this syscall in the past to implement a neighbor-friendly busy wait
loop. Something like this:&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;wait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;some_condition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;sched_yield&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;No code in &lt;code class=&quot;highlighter-rouge&quot;&gt;executor.rb&lt;/code&gt; was doing such a thing however, I was still missing
something.&lt;/p&gt;

&lt;h2 id=&quot;c-stack-sampling-with-linux-perf&quot;&gt;C stack sampling with Linux &lt;code class=&quot;highlighter-rouge&quot;&gt;perf&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;And &lt;a href=&quot;https://perf.wiki.kernel.org/index.php/Main_Page&quot;&gt;Linux perf&lt;/a&gt;
filled the blanks.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;perf top &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 2331                 &lt;span class=&quot;c&quot;&gt;# byexample: +skip&lt;/span&gt;
&amp;lt;...&amp;gt;
34.90%  &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;kernel]              &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;k] do_syscall_64
15.37%  &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;kernel]              &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;k] syscall_return_via_sysret
 9.08%  &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;unknown]             &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;k] 0xfffffe000000601e
 5.89%  &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;kernel]              &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;k] pvclock_clocksource_read
 5.06%  &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;kernel]              &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;k] __schedule
 2.52%  &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;kernel]              &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;k] __raw_callee_save___pv_queued_spin_unloc
 2.45%  libc-2.24.so          &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;.] __sched_yield
 2.21%  &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;kernel]              &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;k] _raw_spin_lock
 2.16%  &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;kernel]              &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;k] __entry_trampoline_start
 2.01%  libruby-2.3.so.2.3.0  &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;.] rb_thread_stop_timer_thread
 1.86%  &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;unknown]             &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;k] 0xfffffe0000006000
 1.61%  &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;kernel]              &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;k] cpuacct_charge
&amp;lt;...&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;rb_thread_stop_timer_thread&lt;/code&gt; is a function of the ruby virtual
machine and it was my first suspect.&lt;/p&gt;

&lt;p&gt;A search in google completed the story.&lt;/p&gt;

&lt;h2 id=&quot;finding-the-bug-with-google-and-the-open-source-community&quot;&gt;Finding the bug with Google and the Open Source Community&lt;/h2&gt;

&lt;p&gt;Bug reports &lt;a href=&quot;https://bugs.ruby-lang.org/issues/13794&quot;&gt;here&lt;/a&gt; and
&lt;a href=&quot;https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=876377&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A counter is used for signaling between threads and
&lt;a href=&quot;https://en.wikipedia.org/wiki/Compare-and-swap&quot;&gt;CAS&lt;/a&gt; loop for
detecting when it is zero yielding the CPU with &lt;code class=&quot;highlighter-rouge&quot;&gt;sched_yield&lt;/code&gt; if the
condition was not met yet.&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;native_stop_timer_thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ATOMIC_CAS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timer_thread_pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;writing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rb_atomic_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;native_thread_yield&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If a fork happen after one thread increments the counter but before
someone decrements it, the child process will get stuck waiting for the
counter to be zero.&lt;/p&gt;

&lt;p&gt;This makes totally sense for &lt;code class=&quot;highlighter-rouge&quot;&gt;executor.rb&lt;/code&gt; which main task is to fork and
exec other processes.&lt;/p&gt;

&lt;p&gt;But I need to be sure that this is the bug.&lt;/p&gt;

&lt;h2 id=&quot;confirming-the-bug-with-gdb&quot;&gt;Confirming the bug with GDB&lt;/h2&gt;

&lt;p&gt;I attached &lt;a href=&quot;https://www.gnu.org/software/gdb/&quot;&gt;gdb&lt;/a&gt; to ruby process
and confirmed the bug.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;gdb &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 2331                      &lt;span class=&quot;c&quot;&gt;# byexample: +skip&lt;/span&gt;
&amp;lt;...&amp;gt;
0x0000&amp;lt;...&amp;gt; &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;sched_yield &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; from /lib/x86_64-linux-gnu/libc.so.6
&amp;lt;...&amp;gt;
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;gdb&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; bt
&lt;span class=&quot;c&quot;&gt;#0  0x0000&amp;lt;...&amp;gt; in sched_yield () from/lib/x86_64-linux-gnu/libc.so.6&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#1  0x0000&amp;lt;...&amp;gt; in native_stop_timer_thread () atthread_pthread.c&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#2  rb_thread_stop_timer_thread () at thread.c&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#3  0x0000&amp;lt;...&amp;gt; in before_exec_non_async_signal_safe () atprocess.c&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#4  before_exec () at process.c&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#5  rb_f_exec (argc=&amp;lt;optimized out&amp;gt;, argv=&amp;lt;optimized out&amp;gt;) atprocess.c&lt;/span&gt;
&amp;lt;...&amp;gt;
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;gdb&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; frame 2
&lt;span class=&quot;c&quot;&gt;#2  rb_thread_stop_timer_thread () at thread.c&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;gdb&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; p timer_thread_pipe
&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;normal &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;3, 4&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;, low &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;5, 6&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;, owner_process &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 0, writing &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 1&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;With &lt;code class=&quot;highlighter-rouge&quot;&gt;timer_thread_pipe.writing&lt;/code&gt; in 1, the CAS loop will never end.&lt;/p&gt;

&lt;p&gt;Note that attaching a debugger is quite disruptive as it stops the
debugged process; Linux &lt;code class=&quot;highlighter-rouge&quot;&gt;perf&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;rbspy&lt;/code&gt; are much less intrusive
and more appropriate for production environments.&lt;/p&gt;

&lt;h2 id=&quot;final-thoughts&quot;&gt;Final thoughts&lt;/h2&gt;

&lt;p&gt;No single tool can always give you the answer and sometimes you need
more than tools to solve the puzzle.&lt;/p&gt;

&lt;p&gt;You are not alone. People is out there to help you.&lt;/p&gt;

&lt;p&gt;But do not relay in google/stackoverflow only: without searching a little
from your side generic queries like &lt;em&gt;“ruby program consumes 100% CPU”&lt;/em&gt;
will lead you to nowhere.&lt;/p&gt;</content><author><name>Gehn</name></author><summary type="html">executor.rb is a little program that starts and finishes other programs based on the needs of the system. It is expected to have one and only one executor.rb process running with little overhead. In one of the machines in the lab I found the opposite: two executor.rb instances and one of them running at top speed, consuming 100% of CPU. For the rest, the system was working properly so one of the executor.rb was doing its job. But what was the “twin evil” process doing with the CPU?</summary></entry><entry><title type="html">Reds and Blues Architecture</title><link href="/book-of-gehn/articles/2020/09/09/Reds-and-Blues-Architecture.html" rel="alternate" type="text/html" title="Reds and Blues Architecture" /><published>2020-09-09T00:00:00+02:00</published><updated>2020-09-09T00:00:00+02:00</updated><id>/book-of-gehn/articles/2020/09/09/Reds-and-Blues-Architecture</id><content type="html" xml:base="/book-of-gehn/articles/2020/09/09/Reds-and-Blues-Architecture.html">&lt;p&gt;Could we design an architecture that allows us to have insight about the
performance of the system?&lt;/p&gt;

&lt;p&gt;When you spend nights debugging searching where is the bottleneck, it is
when you blame the you of the past for a so &lt;em&gt;opaque&lt;/em&gt; and slow architecture.&lt;/p&gt;

&lt;p&gt;This is the proposal of a simple architecture that allows
introspection and enables – too many times forgotten – basic
optimizations.&lt;!--more--&gt;&lt;/p&gt;

&lt;h2 id=&quot;a-case-of-study&quot;&gt;A case of study&lt;/h2&gt;

&lt;p&gt;Imagine that we need to accept requests from a client and forward them
to a server.&lt;/p&gt;

&lt;p&gt;The server will do the real job and it will return us the result of the
operation which we will store in a database.&lt;/p&gt;

&lt;p&gt;But the server is stateful and processing the same request twice will
corrupt the server.&lt;/p&gt;

&lt;p&gt;It is our job to filter the duplicates out.&lt;/p&gt;

&lt;p&gt;For that we use the same database to query if the given task was already
seen or if it is a novel one.&lt;/p&gt;

&lt;p&gt;The following pseudo-code shows the proposed solution:&lt;/p&gt;

&lt;p&gt;&lt;label for=&quot;mf-c517aba0e777644668f87b82062240e3&quot; class=&quot;margin-toggle &quot;&gt;⊕&lt;/label&gt;&lt;input type=&quot;checkbox&quot; id=&quot;mf-c517aba0e777644668f87b82062240e3&quot; class=&quot;margin-toggle &quot; /&gt;&lt;span class=&quot;marginnote &quot;&gt;&lt;img style=&quot;max-width: 100%;&quot; class=&quot;fullwidth&quot; alt=&quot;&quot; src=&quot;/book-of-gehn/assets/design/reds-and-blues-original.png&quot; /&gt;  &lt;br /&gt;Original design: a little messy with IO mixed with CPU bounded code.&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;req&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;receive_request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;calculate_hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;database&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is_present&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# nothing else, drop duplicated
&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;database&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create_new_request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;process_request_and_get_result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;database&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;save_result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When we stress the code we found that it is just not fast enough.&lt;/p&gt;

&lt;p&gt;The code uses different resources and all of them need to be up to the
task.&lt;/p&gt;

&lt;p&gt;Because there is no separation between them, it is hard to know where is
the bottleneck.&lt;/p&gt;

&lt;h2 id=&quot;reds-and-blues&quot;&gt;Reds and Blues&lt;/h2&gt;

&lt;p&gt;We can refactor the code into several threads allowing each to interact
with a single resource.&lt;/p&gt;

&lt;p&gt;In particular we want to distinguish which threads do IO operations and which
don’t.&lt;/p&gt;

&lt;p&gt;The threads will communicate each other with queues.&lt;/p&gt;

&lt;p&gt;The objective is &lt;em&gt;not&lt;/em&gt; to run code concurrently to booster the speed but
to &lt;em&gt;make explicit the implicit&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;And the queues will provide us that insight.&lt;/p&gt;

&lt;p&gt;But first, this is the diagram of the refactored code:&lt;/p&gt;

&lt;figure&gt;&lt;figcaption&gt;&lt;span&gt;Split the code into 5 threads connected with queues. From left to right,
up to down: R, H, N, P and S.
&lt;br /&gt;
Each thread and arrow is colored: reds for IO code and blues for CPU
code.&lt;/span&gt;&lt;/figcaption&gt;&lt;img src=&quot;/book-of-gehn/assets/design/reds-and-blues-redesigned.png&quot; /&gt;&lt;/figure&gt;

&lt;p&gt;Consider the queue between the thread that receives the requests (R) and
the thread that calculates the hash of it (H).&lt;/p&gt;

&lt;p&gt;If the queue starts to fill up that would mean that or we are receiving
too many requests or that the hash is taking more than than expected.&lt;/p&gt;

&lt;p&gt;The queue does not tell exactly where is the problem but &lt;em&gt;cuts and
reduces&lt;/em&gt; the search area.&lt;/p&gt;

&lt;p&gt;Some other examples:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;if the threads N’s and S’s queues are getting full, that may indicate
a problem with the database. Slow queries? Slow disk?&lt;/li&gt;
  &lt;li&gt;if instead the thread P is the bottleneck, then the server is the
problem. Slow network? Too chatty protocol? A server-side problem?&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;the-queues&quot;&gt;The queues&lt;/h2&gt;

&lt;p&gt;To make any insight the queues must track:&lt;/p&gt;

&lt;p&gt;&lt;label for=&quot;mf-281f20833cb43e4fcb40920dfa571ba5&quot; class=&quot;margin-toggle &quot;&gt;⊕&lt;/label&gt;&lt;input type=&quot;checkbox&quot; id=&quot;mf-281f20833cb43e4fcb40920dfa571ba5&quot; class=&quot;margin-toggle &quot; /&gt;&lt;span class=&quot;marginnote &quot;&gt;&lt;img style=&quot;max-width: 60%;&quot; class=&quot;fullwidth&quot; alt=&quot;&quot; src=&quot;/book-of-gehn/assets/design/comm/queues-stats.png&quot; /&gt;  &lt;br /&gt;Metrics: in and out over time, plus drops and queue's length. When
two queues are connected, one of the metrics can be deduced from the
other.&lt;/span&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;items pushed into the queue over time (throughput of the producer)&lt;/li&gt;
  &lt;li&gt;items popped from the queue over time (throughput of the consumer)&lt;/li&gt;
  &lt;li&gt;the occupancy of the queue (also known as the length of the queue)&lt;/li&gt;
  &lt;li&gt;items dropped due the queue was full&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In a architecture where there are multiple queues, it is generally
redundant to have a count of the items pushed and the items popped.&lt;/p&gt;

&lt;p&gt;We could track only the items pushed and use that metric for the exit
queue to estimate the items popped from the enter queue.&lt;/p&gt;

&lt;p&gt;For example, if the thread H is pushing 10k items per second in the exit
queue (that connects H with N), we can conclude that H is popping 10k items
per seconds from its enter queue (that connects R with H).&lt;/p&gt;

&lt;p&gt;&lt;label for=&quot;mf-7ab23d6394645fa9e0949d9dc148e056&quot; class=&quot;margin-toggle &quot;&gt;⊕&lt;/label&gt;&lt;input type=&quot;checkbox&quot; id=&quot;mf-7ab23d6394645fa9e0949d9dc148e056&quot; class=&quot;margin-toggle &quot; /&gt;&lt;span class=&quot;marginnote &quot;&gt;&lt;img style=&quot;max-width: 40%;&quot; class=&quot;fullwidth&quot; alt=&quot;&quot; src=&quot;/book-of-gehn/assets/stuff/reallycoolstuff.png&quot; /&gt;  &lt;br /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;For analyzing the performance
&lt;a href=&quot;http://www.brendangregg.com/usemethod.html&quot;&gt;Brendan Gregg’s USE method&lt;/a&gt;
states that every resource must be characterized by three metrics:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;utilization: average time that the resource was busy&lt;/li&gt;
  &lt;li&gt;saturation: degree of extra work that the resource didn’t handle,
often queued&lt;/li&gt;
  &lt;li&gt;errors: well, that, errors, like drops.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are two categories of resources which differ in the definition of
&lt;em&gt;utilization&lt;/em&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;IO resources, like network, disk: the utilization is the amount of
time that the resource was busy.&lt;/li&gt;
  &lt;li&gt;Capacity resources, like the memory: the utilization in this case is
the amount of memory in use.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is more generic way to analysis the performance of a system: using
queues for statistics is a particular case.&lt;/p&gt;

&lt;p&gt;But there is more…&lt;/p&gt;

&lt;h2 id=&quot;batchbulk-for-free&quot;&gt;Batch/Bulk for free&lt;/h2&gt;

&lt;p&gt;&lt;label for=&quot;mf-e52f0d894e8b298f95ffdd338fa34654&quot; class=&quot;margin-toggle &quot;&gt;⊕&lt;/label&gt;&lt;input type=&quot;checkbox&quot; id=&quot;mf-e52f0d894e8b298f95ffdd338fa34654&quot; class=&quot;margin-toggle &quot; /&gt;&lt;span class=&quot;marginnote &quot;&gt;&lt;img style=&quot;max-width: 60%;&quot; class=&quot;fullwidth&quot; alt=&quot;&quot; src=&quot;/book-of-gehn/assets/design/comm/chatty.png&quot; /&gt;  &lt;br /&gt;Each message requires an encapsulation header and a &lt;em&gt;syscall&lt;/em&gt; to send it.
Costs that you may per message; more messages means more you pay.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;The explicit queues allows to delay the processing but in exchange they
allow to process the items in batch or bulk operations.&lt;/p&gt;

&lt;p&gt;A classic example would be the database: instead of querying each time
we could query every 1k items doing a single bulk operation.&lt;/p&gt;

&lt;p&gt;For example, we could save 1k results in a single operation.&lt;/p&gt;

&lt;p&gt;This not only save bandwidth with the database but also IO operations.&lt;/p&gt;

&lt;p&gt;&lt;label for=&quot;mf-5d01a65f89c4de875e29e386764cc57e&quot; class=&quot;margin-toggle &quot;&gt;⊕&lt;/label&gt;&lt;input type=&quot;checkbox&quot; id=&quot;mf-5d01a65f89c4de875e29e386764cc57e&quot; class=&quot;margin-toggle &quot; /&gt;&lt;span class=&quot;marginnote &quot;&gt;&lt;img style=&quot;max-width: 60%;&quot; class=&quot;fullwidth&quot; alt=&quot;&quot; src=&quot;/book-of-gehn/assets/design/comm/less-chatty.png&quot; /&gt;  &lt;br /&gt;Less is more. Also it enables specific per-bundle compression.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;The communication with the server could be also improved. Instead of
sending a request per work item, we could send them in packs: less
messages going back and forward through the network it is always a good
deal.&lt;/p&gt;

&lt;p&gt;Less chatty communication means more time and space for the real data,
a better channel utilization.&lt;/p&gt;

&lt;h2 id=&quot;asynchronous-for-free&quot;&gt;Asynchronous for free&lt;/h2&gt;

&lt;p&gt;And talking about network, sending a request and &lt;em&gt;waiting&lt;/em&gt; for the
response is incredible slow.&lt;/p&gt;

&lt;p&gt;&lt;label for=&quot;mf-9d739157461ce1da740357d1ae16d884&quot; class=&quot;margin-toggle &quot;&gt;⊕&lt;/label&gt;&lt;input type=&quot;checkbox&quot; id=&quot;mf-9d739157461ce1da740357d1ae16d884&quot; class=&quot;margin-toggle &quot; /&gt;&lt;span class=&quot;marginnote &quot;&gt;&lt;img style=&quot;max-width: 60%;&quot; class=&quot;fullwidth&quot; alt=&quot;&quot; src=&quot;/book-of-gehn/assets/design/comm/async.png&quot; /&gt;  &lt;br /&gt;While a bulk calls amortize the cost per message, asynchronous
calls make more use of the capacity of the network so you can send
more in the same time.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;We can send the requests &lt;em&gt;asynchronously&lt;/em&gt; to the server without waiting
for the responses, and receive them later.&lt;/p&gt;

&lt;p&gt;This is perfectly possible because we put queues between who trigger the
request (N) and who do something with the response (S).&lt;/p&gt;

&lt;p&gt;The architecture supports asynchronous mechanisms out of the box.&lt;/p&gt;

&lt;h2 id=&quot;everything-is-violet&quot;&gt;Everything is violet&lt;/h2&gt;

&lt;p&gt;We categorized the threads in threads with high IO and threads with high
CPU but it is important to highlight the fact that all the threads are
running in the same machine with &lt;strong&gt;shared&lt;/strong&gt; resources.&lt;/p&gt;

&lt;p&gt;A CPU thread could end up doing a lot of IO because the system ran out
of memory and it is swapping.&lt;/p&gt;

&lt;p&gt;A IO thread that sends requests to the network may use a lot of CPU because
the serialization of the request is expensive.&lt;/p&gt;

&lt;p&gt;The queues provide insight but they must be taken as a complement of
other metrics of the system.&lt;/p&gt;

&lt;p&gt;At the end, everything is tainted with reds &lt;em&gt;and&lt;/em&gt; blues.&lt;/p&gt;

&lt;h2 id=&quot;further-readings&quot;&gt;Further readings&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.brendangregg.com/usemethod.html&quot;&gt;Brendan Gregg’s USE method&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=K9w2cipqfvc&quot;&gt;Performance Analysis: The USE Method&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Gehn</name></author><summary type="html">Could we design an architecture that allows us to have insight about the performance of the system? When you spend nights debugging searching where is the bottleneck, it is when you blame the you of the past for a so opaque and slow architecture. This is the proposal of a simple architecture that allows introspection and enables – too many times forgotten – basic optimizations.</summary></entry><entry><title type="html">Debugging Lock Free Algorithms</title><link href="/book-of-gehn/articles/2020/05/16/Debugging-Lock-Free-Algorithms.html" rel="alternate" type="text/html" title="Debugging Lock Free Algorithms" /><published>2020-05-16T00:00:00+02:00</published><updated>2020-05-16T00:00:00+02:00</updated><id>/book-of-gehn/articles/2020/05/16/Debugging-Lock-Free-Algorithms</id><content type="html" xml:base="/book-of-gehn/articles/2020/05/16/Debugging-Lock-Free-Algorithms.html">&lt;p&gt;Debugging multithread code is hard and lock free algorithms
is harder.&lt;/p&gt;

&lt;p&gt;What cleaver tricks can we use?&lt;!--more--&gt;&lt;/p&gt;

&lt;h2 id=&quot;back-to-the-old-good-mutex&quot;&gt;Back to the old good mutex&lt;/h2&gt;

&lt;p&gt;One simple strategy is to use a traditional mutex or other lock
mechanisms to make our lock free code into something much easier to
reason about.&lt;/p&gt;

&lt;p&gt;Consider a lock free MPMC queue; making it thread safe with a mutex
is plain simple:&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mutex_lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;full&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;mutex_unlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mutex_unlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mutex_lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;empty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;mutex_unlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mutex_unlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;label for=&quot;mn-d7e5c1aa888416c0537985bcd405f11c&quot; class=&quot;margin-toggle&quot;&gt; ⊕&lt;/label&gt;&lt;input type=&quot;checkbox&quot; id=&quot;mn-d7e5c1aa888416c0537985bcd405f11c&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;marginnote&quot;&gt;&lt;em&gt;Most?&lt;/em&gt; A &lt;code class=&quot;highlighter-rouge&quot;&gt;mutex_lock&lt;/code&gt;/&lt;code class=&quot;highlighter-rouge&quot;&gt;mutex_unlock&lt;/code&gt; pair works
as an &lt;code class=&quot;highlighter-rouge&quot;&gt;ACQUIRE&lt;/code&gt;/&lt;code class=&quot;highlighter-rouge&quot;&gt;RELEASE&lt;/code&gt; pair: instructions
from the critical section (CS) cannot be moved &lt;em&gt;above the lock&lt;/em&gt; nor
&lt;em&gt;below the unlock&lt;/em&gt; but instructions &lt;em&gt;outside&lt;/em&gt; of the CS can get into the CS
moving from the upside &lt;em&gt;below the lock&lt;/em&gt; and
from the downside &lt;em&gt;above the unlock&lt;/em&gt;
&lt;br /&gt;
In short, some reorders are &lt;em&gt;still&lt;/em&gt; possible: things before and after the CS
can get in, things in the CS cannot get out. &lt;/span&gt;&lt;/p&gt;

&lt;p&gt;What did we get? &lt;em&gt;Most&lt;/em&gt; of the possible reorders
and subtle race conditions are out.&lt;/p&gt;

&lt;figure&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;img src=&quot;/book-of-gehn/assets/mpmc-queue/mutex.png&quot; /&gt;&lt;/figure&gt;

&lt;p&gt;If you still have a bug then it is more likely to be a &lt;em&gt;classic&lt;/em&gt; bug like
mistaking &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;&lt;/code&gt; by &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;=&lt;/code&gt; or a missing &lt;code class=&quot;highlighter-rouge&quot;&gt;+1&lt;/code&gt; somewhere –&lt;em&gt;and trust me, you
will make this kind of errors too&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&quot;lightweight-prints&quot;&gt;Lightweight prints&lt;/h2&gt;

&lt;p&gt;&lt;label for=&quot;mn-99114dcac28d017f0e326fed2d887b8e&quot; class=&quot;margin-toggle&quot;&gt; ⊕&lt;/label&gt;&lt;input type=&quot;checkbox&quot; id=&quot;mn-99114dcac28d017f0e326fed2d887b8e&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;marginnote&quot;&gt;
A buffer of fixed size power of 2 with entries of fixed size
simplify the implementation making it faster and less intrusive
than a plain &lt;code class=&quot;highlighter-rouge&quot;&gt;printf&lt;/code&gt;. &lt;/span&gt;&lt;/p&gt;

&lt;p&gt;The idea is to have a global shared ring buffer for logs with multiple
writers in mind.&lt;/p&gt;

&lt;p&gt;To avoid race conditions among the writers, the index is incremented
atomically before doing each write. This is another example of a
&lt;em&gt;reserve-and-then&lt;/em&gt; strategy.&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;trace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;seq&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__atomic_fetch_add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tpos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__ATOMIC_RELAXED&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;seq&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tmask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;tbuf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;thread_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;tbuf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;seq&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;seq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;tbuf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In my &lt;a href=&quot;/book-of-gehn/articles/2020/03/22/Lock-Free-Queue-Part-I.html&quot;&gt;previous post&lt;/a&gt;
we saw that a write may not be visible to others until we need &lt;em&gt;commit&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;We don’t do this on purpose: if we add a kind of barrier/memory reorder
we may be affecting the code under test and we may masking the bug.&lt;/p&gt;

&lt;p&gt;&lt;label for=&quot;mmkd-279a024733ed9ead498068a1e44e6e4e&quot; class=&quot;margin-toggle&quot;&gt; ⊕&lt;/label&gt;&lt;input type=&quot;checkbox&quot; id=&quot;mmkd-279a024733ed9ead498068a1e44e6e4e&quot; class=&quot;margin-toggle&quot; /&gt;&lt;/p&gt;
&lt;div id=&quot;mk-mmkd-279a024733ed9ead498068a1e44e6e4e&quot;&gt;&lt;span class=&quot;marginnote marginmarkdowncode&quot;&gt;&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;gdb&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;print pretty on
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;gdb&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; p &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;tpos - 5&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &amp;amp; tmask
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;gdb&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; p tbuf[&lt;span class=&quot;nv&quot;&gt;$]&lt;/span&gt;@5
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;Pretty print the last 5 entries&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;script&gt;$(document).ready(function () {$('#mk-mmkd-279a024733ed9ead498068a1e44e6e4e &gt; span').insertAfter($('#mmkd-279a024733ed9ead498068a1e44e6e4e'))});&lt;/script&gt;&lt;/div&gt;

&lt;p&gt;Anyways the buffer is not read ever –it is a multiple-writers zero-readers
buffer. This idea is to read the buffer from a debugger in a synchronous way
so we should not have any race condition.&lt;/p&gt;

&lt;h3 id=&quot;what-you-read-is-not-what-it-happen&quot;&gt;What you read is not what it happen&lt;/h3&gt;

&lt;p&gt;Consider the following traced code:&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;trace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;foo...&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You may think that the trace is enough to know when &lt;code class=&quot;highlighter-rouge&quot;&gt;foo()&lt;/code&gt; is called.&lt;/p&gt;

&lt;p&gt;You may read&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;thread 1: foo...
thread 2: foo...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;but what happen actually was that thread 2 called &lt;code class=&quot;highlighter-rouge&quot;&gt;foo()&lt;/code&gt; before
the thread 1:&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// thread 1                         // thread 2&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;trace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;foo...&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                                    &lt;span class=&quot;n&quot;&gt;trace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;foo...&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                                    &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Interleaving is possible, and no, you cannot use a mutex there.&lt;/p&gt;

&lt;p&gt;&lt;label for=&quot;mmkd-c4e79dfe919e5ac07386d2372ccb8ad0&quot; class=&quot;margin-toggle&quot;&gt; ⊕&lt;/label&gt;&lt;input type=&quot;checkbox&quot; id=&quot;mmkd-c4e79dfe919e5ac07386d2372ccb8ad0&quot; class=&quot;margin-toggle&quot; /&gt;&lt;/p&gt;
&lt;div id=&quot;mk-mmkd-c4e79dfe919e5ac07386d2372ccb8ad0&quot;&gt;&lt;span class=&quot;marginnote marginmarkdowncode&quot;&gt;&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;thread 1: begin foo...
thread 2: begin foo...
thread 2: end foo...
thread 1: end foo...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;You may read this but...&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;script&gt;$(document).ready(function () {$('#mk-mmkd-c4e79dfe919e5ac07386d2372ccb8ad0 &gt; span').insertAfter($('#mmkd-c4e79dfe919e5ac07386d2372ccb8ad0'))});&lt;/script&gt;&lt;/div&gt;

&lt;p&gt;Wrapping the code with two traces is a better alternative:&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;trace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;begin foo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;trace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;end foo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;However you still cannot know if thread 1 called &lt;code class=&quot;highlighter-rouge&quot;&gt;foo()&lt;/code&gt; before or after
the thread 2.&lt;/p&gt;

&lt;p&gt;If &lt;code class=&quot;highlighter-rouge&quot;&gt;trace()&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;foo()&lt;/code&gt; are inline, the compiler/CPU may see
this:&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;tbuf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tpos&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;begin foo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;foo_a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;foo_b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;tbuf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tpos&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;end foo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There is an obvious relationship between the first and the second
trace instructions so &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;begin foo...&quot;&lt;/code&gt; happens before &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;end foo...&quot;&lt;/code&gt;
but nothing prevents the compiler or the CPU to reorder the inline
instructions from &lt;code class=&quot;highlighter-rouge&quot;&gt;foo()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So what could happen is:&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// thread 1                         // thread 2&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;foo_a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;foo_b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;tbuf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tpos&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;begin foo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                                    &lt;span class=&quot;n&quot;&gt;tbuf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tpos&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;begin foo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                                    &lt;span class=&quot;n&quot;&gt;tbuf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tpos&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;end foo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;tbuf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tpos&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;end foo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                                    &lt;span class=&quot;n&quot;&gt;foo_a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                                    &lt;span class=&quot;n&quot;&gt;foo_b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So not only thread 1 called &lt;code class=&quot;highlighter-rouge&quot;&gt;foo()&lt;/code&gt; &lt;em&gt;before&lt;/em&gt; thread 2 but even after
the log entry &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;end foo&quot;&lt;/code&gt; the thread 2 &lt;em&gt;didn’t call&lt;/em&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;foo()&lt;/code&gt; at all.&lt;/p&gt;

&lt;p&gt;Sorry to say but you don’t have much options and whatever you choose
it will affect the precision of the log or it will affect the behaviour
of you code under debug.&lt;/p&gt;

&lt;h2 id=&quot;automated-tools&quot;&gt;Automated tools&lt;/h2&gt;

&lt;p&gt;This would be the holy grial but we are still far from a tool to detect
race conditions in general.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://clang.llvm.org/docs/ThreadSanitizer.html&quot;&gt;Thread Sanitizer&lt;/a&gt;, also
known as &lt;em&gt;tsan&lt;/em&gt;, goes in that direction.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://valgrind.org/docs/manual/hg-manual.html&quot;&gt;Helgrind&lt;/a&gt; has been
for a while too.&lt;/p&gt;

&lt;p&gt;This is a huge area to explore…&lt;/p&gt;

&lt;h2 id=&quot;code&quot;&gt;Code&lt;/h2&gt;

&lt;p&gt;Take at look how &lt;a href=&quot;https://github.com/eldipa/loki&quot;&gt;loki library’s&lt;/a&gt;
debug facilities are implemented. It humbly supports tracing, mutexes and
a compiled version with tsan.&lt;/p&gt;

&lt;p&gt;Alternative methods are welcome!!&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Jeff Preshing’s &lt;a href=&quot;https://preshing.com/20120522/lightweight-in-memory-logging/&quot;&gt;lightweight logging&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Shameem Akhter and Jason Roberts’ &lt;a href=&quot;https://www.drdobbs.com/cpp/multithreaded-debugging-techniques/199200938?pgno=1&quot;&gt;multithreading debugging techniques&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;References were taken on May 1st.&lt;/p&gt;</content><author><name>Gehn</name></author><summary type="html">Debugging multithread code is hard and lock free algorithms is harder. What cleaver tricks can we use?</summary></entry><entry><title type="html">Lock Free Queue - Part II</title><link href="/book-of-gehn/articles/2020/04/28/Lock-Free-Queue-Part-II.html" rel="alternate" type="text/html" title="Lock Free Queue - Part II" /><published>2020-04-28T00:00:00+02:00</published><updated>2020-04-28T00:00:00+02:00</updated><id>/book-of-gehn/articles/2020/04/28/Lock-Free-Queue-Part-II</id><content type="html" xml:base="/book-of-gehn/articles/2020/04/28/Lock-Free-Queue-Part-II.html">&lt;p&gt;If implementing a lock-free queue for only one producer and consumer
is tricky, adding more producers and consumers moves this
to the next level.&lt;/p&gt;

&lt;p&gt;This is the continuation of the
&lt;a href=&quot;/book-of-gehn/articles/2020/03/22/Lock-Free-Queue-Part-I.html&quot;&gt;lock-free single-producer single-consumer queue&lt;/a&gt;&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;Not only we need to prevent race conditions between the producers and
the consumers but also between producers and between consumers.&lt;/p&gt;

&lt;h2 id=&quot;race-between-producers&quot;&gt;Race between producers&lt;/h2&gt;

&lt;p&gt;Recall the first part of &lt;code class=&quot;highlighter-rouge&quot;&gt;push()&lt;/code&gt;: we load the producer’s head,
and calculate if we have enough room for the incoming data and
if we have, we update the producer’s head to the next position.&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;queue_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;old_prod_head&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prod_head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cons_tail&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__atomic_load_n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cons_tail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__ATOMIC_ACQUIRE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;free_entries&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;capacity&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cons_tail&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;old_prod_head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;free_entries&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;free_entries&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;free_entries&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;free_entries&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;errno&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ENOBUFS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;new_prod_head&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;old_prod_head&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prod_head&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_prod_head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Consider now what would happen if we have two producers: both will
compete in a race to put what they &lt;em&gt;think&lt;/em&gt; that it is the new value of head.&lt;/p&gt;

&lt;p&gt;More over the space reserved for both will overlap leading
to a memory corruption.&lt;/p&gt;

&lt;figure&gt;&lt;figcaption&gt;&lt;span&gt;Two producers racing for reserving the same space.&lt;/span&gt;&lt;/figcaption&gt;&lt;img src=&quot;/book-of-gehn/assets/mpmc-queue/reserve-race-condition.png&quot; /&gt;&lt;/figure&gt;

&lt;p&gt;What we need is the load, compute and store on &lt;code class=&quot;highlighter-rouge&quot;&gt;q-&amp;gt;prod_head&lt;/code&gt;
as a &lt;em&gt;single atomic operation&lt;/em&gt;. This is called &lt;em&gt;read-modify-write&lt;/em&gt; operation.&lt;/p&gt;

&lt;p&gt;No builtin atomic exists for that but we can built one with a &lt;em&gt;compare and swap&lt;/em&gt;
instruction&lt;label for=&quot;mn-557e66b2758a8897f20e4426dee57c2e&quot; class=&quot;margin-toggle&quot;&gt; ⊕&lt;/label&gt;&lt;input type=&quot;checkbox&quot; id=&quot;mn-557e66b2758a8897f20e4426dee57c2e&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;marginnote&quot;&gt;Or &lt;em&gt;compare and exchange&lt;/em&gt; &lt;/span&gt;.&lt;/p&gt;

&lt;h2 id=&quot;move-the-headtail-forward-atomically---cas-loop&quot;&gt;Move the head/tail forward atomically - CAS loop&lt;/h2&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;queue_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;old_prod_head&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__atomic_load_n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prod_head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__ATOMIC_RELAXED&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;cons_tail&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__atomic_load_n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cons_tail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__ATOMIC_ACQUIRE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;free_entries&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;capacity&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cons_tail&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;old_prod_head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;free_entries&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;free_entries&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;free_entries&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;free_entries&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;errno&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ENOBUFS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;new_prod_head&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;old_prod_head&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;success&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__atomic_compare_exchange_n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
                        &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prod_head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;      &lt;span class=&quot;c1&quot;&gt;// what we want to update,&lt;/span&gt;
                        &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;old_prod_head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;// asumming that still have this value,&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;new_prod_head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;      &lt;span class=&quot;c1&quot;&gt;// with this value as the new one.&lt;/span&gt;
                        &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;__ATOMIC_RELAXED&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;__ATOMIC_RELAXED&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;label for=&quot;mn-a9943ae19dddd108a19afccbbb809e86&quot; class=&quot;margin-toggle&quot;&gt; ⊕&lt;/label&gt;&lt;input type=&quot;checkbox&quot; id=&quot;mn-a9943ae19dddd108a19afccbbb809e86&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;marginnote&quot;&gt;Note that I said “it still has the same value”; I did't say “the value
did't change”. For our queue it doesn't matter but for other
structures it is really important and the confusion leads to the
&lt;a href=&quot;https://en.wikipedia.org/wiki/ABA_problem&quot;&gt;ABA problem&lt;/a&gt;
 &lt;/span&gt;&lt;/p&gt;

&lt;p&gt;The idea is to do an atomic read, do all the modifications and checks
that we need and then do an atomic write with the new value
&lt;em&gt;only if&lt;/em&gt; the head is &lt;em&gt;still&lt;/em&gt; pointing to the same position that we read.&lt;/p&gt;

&lt;p&gt;That is what &lt;code class=&quot;highlighter-rouge&quot;&gt;__atomic_compare_exchange_n&lt;/code&gt; is about.&lt;/p&gt;

&lt;p&gt;If it is, it means that no other producer moved the head and we can
proceed.&lt;/p&gt;

&lt;p&gt;&lt;label for=&quot;mn-cacb598c79e7dc10a7397be9b1e09e11&quot; class=&quot;margin-toggle&quot;&gt; ⊕&lt;/label&gt;&lt;input type=&quot;checkbox&quot; id=&quot;mn-cacb598c79e7dc10a7397be9b1e09e11&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;marginnote&quot;&gt;There is no need to do an explicit atomic load again,
&lt;code class=&quot;highlighter-rouge&quot;&gt;__atomic_compare_exchange_n&lt;/code&gt; will do it for us if it fails. &lt;/span&gt;&lt;/p&gt;

&lt;p&gt;If not, we need to retry again until we succeed.&lt;/p&gt;

&lt;p&gt;This loop makes the &lt;code class=&quot;highlighter-rouge&quot;&gt;push()&lt;/code&gt;
to take an unbound number of steps (loop iterations) until
it can proceed. The queue is lock-free but no &lt;em&gt;wait-free&lt;/em&gt; anymore.&lt;/p&gt;

&lt;h2 id=&quot;waiting-for-others&quot;&gt;Waiting for others&lt;/h2&gt;

&lt;p&gt;Once a producer finished the write it &lt;em&gt;releases&lt;/em&gt; it updating
the producer’s tail to the new head.&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(...)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// write the data&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;old_prod_head&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;__atomic_store_n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prod_tail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_prod_head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__ATOMIC_RELEASE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;However we have another race condition here.&lt;/p&gt;

&lt;p&gt;It is not about the store of the value, we can use an atomic
store for that; it is about the &lt;em&gt;order&lt;/em&gt; of the stores.&lt;/p&gt;

&lt;p&gt;Both producers have the correct notion of the next head
thanks to the CAS loop however this is only truth &lt;strong&gt;if&lt;/strong&gt;
the first producers updates the tail &lt;strong&gt;before&lt;/strong&gt; the second one.&lt;/p&gt;

&lt;p&gt;Recall that the producer’s tail is the marker for the consumers
to stop, preventing them to read undefined data.&lt;/p&gt;

&lt;p&gt;If the second producer updates the tail there are not guaranties
that the first producer finished her writing by then; she
didn’t &lt;em&gt;released&lt;/em&gt; the memory reserved.&lt;/p&gt;

&lt;figure&gt;&lt;figcaption&gt;&lt;span&gt;Two producers racing for marking the data as ready.
&lt;br /&gt;
If the producer 2 updates the tail before the producer 1, the
consumers may read that the producer 1 may not had written yet.&lt;/span&gt;&lt;/figcaption&gt;&lt;img src=&quot;/book-of-gehn/assets/mpmc-queue/ready-race-condition.png&quot; /&gt;&lt;/figure&gt;

&lt;p&gt;What we need is to enforce an order: all the previous &lt;code class=&quot;highlighter-rouge&quot;&gt;push()&lt;/code&gt; must
complete before a producer update the tail.&lt;/p&gt;

&lt;p&gt;We can get this waiting until the tail reaches the old head meaning
that any reserved space for writing (between the tail and the old head)
was used and released.&lt;/p&gt;

&lt;p&gt;So the next block reserved begins at the old head/current tail and ends
at the new head.&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(...)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// write the data&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;old_prod_head&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// loop until the tail reaches our original head.&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// ensuring that no other previous push is still in progress&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;volatile&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prod_tail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;old_prod_head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Tell the CPU that this is busy-loop so he can take a rest&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;loki_cpu_relax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;__atomic_store_n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prod_tail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_prod_head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__ATOMIC_RELEASE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;multi-producer-multi-consumer-queue-final-version&quot;&gt;Multi-producer multi-consumer queue (final version)&lt;/h2&gt;

&lt;p&gt;The code can be found in &lt;a href=&quot;https://github.com/eldipa/loki&quot;&gt;the loki library&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;fullwidth&quot;&gt;&lt;img src=&quot;/book-of-gehn/assets/mpmc-queue/relativity-quantic-concurrent-programming.png&quot; /&gt;&lt;figcaption&gt;&lt;/figcaption&gt;&lt;/figure&gt;

&lt;h2 id=&quot;future-research-on-the-busy-waits&quot;&gt;Future research on the busy waits&lt;/h2&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;push()&lt;/code&gt;, and analogously the &lt;code class=&quot;highlighter-rouge&quot;&gt;pop()&lt;/code&gt;, has two busy waits: the
CAS loop for update the head and the wait-for-others for updating
the tail in order.&lt;/p&gt;

&lt;p&gt;Both loops have an impact on the parallelism depending of different
factors.&lt;/p&gt;

&lt;p&gt;It is expected to have more contention in the CAS loop as the number
of producers increase, especially when the data written is small.&lt;/p&gt;

&lt;p&gt;On the other hand, it is expected to have more time wasted on the
wait-for-others loop when the data is larger as this should dominate
the time needed to complete one &lt;code class=&quot;highlighter-rouge&quot;&gt;push()&lt;/code&gt; and therefore preventing
to complete the next ones.&lt;/p&gt;

&lt;p&gt;In a future post I will explore this.&lt;/p&gt;

&lt;p&gt;More readings:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://patches.dpdk.org/patch/40489/&quot;&gt;preemptive nature of ring algorithm (DPDK)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://cbloomrants.blogspot.com/2012/06/06-12-12-another-threading-post-index.html&quot;&gt;cbloomrants’ posts about threading&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.gotw.ca/publications/&quot;&gt;H Sutter’s Effective Concurrency seriers&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://preshing.com/&quot;&gt;Jeff Preshing’s posts&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;other-implementations&quot;&gt;Other implementations&lt;/h2&gt;

&lt;p&gt;I didn’t have the chance to explore this, but the
&lt;a href=&quot;https://software.intel.com/en-us/forums/intel-moderncode-for-parallel-architectures/topic/295836&quot;&gt;Thomasson’s MPMC queue&lt;/a&gt;
followed another approach based in a linked list.&lt;/p&gt;

&lt;p&gt;The documentation says that it has lock free &lt;code class=&quot;highlighter-rouge&quot;&gt;pop()&lt;/code&gt; and wait free
&lt;code class=&quot;highlighter-rouge&quot;&gt;push()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The only downside is that requires a double-word CAS instruction.&lt;/p&gt;

&lt;h2 id=&quot;open-questions&quot;&gt;Open questions&lt;/h2&gt;

&lt;p&gt;The DPDK’s &lt;a href=&quot;http://git.dpdk.org/dpdk/tree/lib/librte_ring/rte_ring_c11_mem.h&quot;&gt;ring buffer&lt;/a&gt;
adds a &lt;em&gt;fence&lt;/em&gt; between the read of the &lt;em&gt;old&lt;/em&gt; producer’s head and the read
of the consumer’s tail and I cite:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Ensure the head is read before tail”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;queue_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;old_prod_head&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__atomic_load_n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prod_head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__ATOMIC_RELAXED&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;cm&quot;&gt;/* Ensure the head is read before tail */&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;__atomic_thread_fence&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__ATOMIC_ACQUIRE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;cons_tail&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__atomic_load_n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cons_tail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__ATOMIC_ACQUIRE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;free_entries&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;capacity&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cons_tail&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;old_prod_head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;cm&quot;&gt;/* rest of the CAS loop */&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;em&gt;thread fence&lt;/em&gt; synchronize with the atomic ensuring that
the head stored by one producer is visible by the load of another.&lt;/p&gt;

&lt;p&gt;Is it possible for a producer to load a head &lt;em&gt;too&lt;/em&gt; old? By the moment
of the load another producer had already stored a new value but it is still
not visible by the former.&lt;/p&gt;

&lt;p&gt;If that is possible the former producer will compute an incorrect &lt;code class=&quot;highlighter-rouge&quot;&gt;free_entries&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;What about the CAS instruction? If the producer didn’t see the updated value
by the time it does the CAS instruction, it will be setting the &lt;em&gt;wrong&lt;/em&gt; head
value just as if the CAS loop wasn’t there.&lt;/p&gt;

&lt;p&gt;Am I missing something? – Probably.&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;p&gt;Kip Macy implemented a &lt;a href=&quot;https://svnweb.freebsd.org/base/release/8.0.0/sys/sys/buf_ring.h?revision=199625&amp;amp;amp&quot;&gt;buffer ring&lt;/a&gt;
for FreeBSD. It was the base foundation
for DPDK’s &lt;a href=&quot;http://git.dpdk.org/dpdk/tree/lib/librte_ring/rte_ring_c11_mem.h&quot;&gt;rte_ring&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Also &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc/_005f_005fatomic-Builtins.html&quot;&gt;GCC Atomics, gcc.gnu.org&lt;/a&gt;
and my previous post
&lt;a href=&quot;/book-of-gehn/articles/2020/03/22/Lock-Free-Queue-Part-I.html&quot;&gt;lock-free single-producer single-consumer queue&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;References at March 2020.&lt;/p&gt;</content><author><name>Gehn</name></author><summary type="html">If implementing a lock-free queue for only one producer and consumer is tricky, adding more producers and consumers moves this to the next level. This is the continuation of the lock-free single-producer single-consumer queue</summary></entry></feed>