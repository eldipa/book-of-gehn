<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.6">Jekyll</generator><link href="/book-of-gehn/feed.xml" rel="self" type="application/atom+xml" /><link href="/book-of-gehn/" rel="alternate" type="text/html" /><updated>2021-01-10T03:45:59+01:00</updated><id>/book-of-gehn/feed.xml</id><title type="html">The Book of Gehn</title><subtitle></subtitle><author><name>Gehn</name></author><entry><title type="html">iasm: Interactive Assembler</title><link href="/book-of-gehn/articles/2021/01/09/Interactive-Assembler.html" rel="alternate" type="text/html" title="iasm: Interactive Assembler" /><published>2021-01-09T00:00:00+01:00</published><updated>2021-01-09T00:00:00+01:00</updated><id>/book-of-gehn/articles/2021/01/09/Interactive-Assembler</id><content type="html" xml:base="/book-of-gehn/articles/2021/01/09/Interactive-Assembler.html">&lt;p&gt;I crossed with a series of &lt;a href=&quot;https://github.com/azeria-labs/ARM-challenges&quot;&gt;Arm challenges&lt;/a&gt;
by causality and I decided to give it a shoot.&lt;/p&gt;

&lt;p&gt;But I have &lt;strong&gt;0&lt;/strong&gt; knowledge about Arm so the disassembly of the binaries
were too strange for me.&lt;/p&gt;

&lt;p&gt;I stepped back to plan it better: my idea was to use GDB to debug small snippets of Arm
code, learn about it before jumping into the challenges.&lt;/p&gt;

&lt;p&gt;I setup a &lt;a href=&quot;/book-of-gehn/articles/2020/12/15/Qemulating-Rasbian-ARM.html&quot;&gt;QEMU virtual machine&lt;/a&gt;
running Rasbian in an Arm CPU.&lt;/p&gt;

&lt;p&gt;With a GCC and GDB running there I started but the compile-load-debug
cycle was too inflexible.&lt;/p&gt;

&lt;p&gt;I could not use it to &lt;em&gt;explore&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;If I wanted to see the effect of a particular instruction I needed to write
it in assembly, compile it and debug it.&lt;/p&gt;

&lt;p&gt;And the time between the “what does X?” and the “X does this” was too
large, reducing the &lt;em&gt;momentum&lt;/em&gt; that you have when you explore something
new.&lt;/p&gt;

&lt;p&gt;Too tedious.&lt;/p&gt;

&lt;p&gt;So I decided to shorten the cycle writing an
&lt;a href=&quot;https://github.com/bad-address/iasm&quot;&gt;&lt;em&gt;interactive&lt;/em&gt; assembler&lt;/a&gt;.&lt;!--more--&gt;&lt;/p&gt;

&lt;h2 id=&quot;first-try-gdb-as-the-engine&quot;&gt;First try: GDB as the engine&lt;/h2&gt;

&lt;p&gt;GDB can manipulate the memory of the debuggee process. In particular we
could write binary code, jump to it and execute it. Perfect.&lt;/p&gt;

&lt;p&gt;But GDB doesn’t have a compiler for assembly.&lt;/p&gt;

&lt;p&gt;Or has it?&lt;/p&gt;

&lt;h3 id=&quot;keystone-engine&quot;&gt;Keystone engine&lt;/h3&gt;

&lt;p&gt;No, but one can be implemented easily with
&lt;a href=&quot;https://www.keystone-engine.org/&quot;&gt;keystone-engine&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Keystone takes assembly code and compiles it. Having Python bindings
we could put this into a GDB plugin and &lt;em&gt;presto!&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;second-try-unicorn-engine&quot;&gt;Second try: Unicorn engine&lt;/h2&gt;

&lt;p&gt;GDB requires a full operative
system (Rasbian) running in a full emulated QEMU machine.&lt;/p&gt;

&lt;p&gt;Can we make it lighter? – Yes we can.&lt;/p&gt;

&lt;h3 id=&quot;unicorn-engine&quot;&gt;Unicorn engine&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://www.unicorn-engine.org/&quot;&gt;unicorn-engine&lt;/a&gt; it is a CPU emulator
based on QEMU.&lt;/p&gt;

&lt;p&gt;The trick is that Unicorn only emulates the CPU and memory and nothing
else: no devices, disks or network cards.&lt;/p&gt;

&lt;p&gt;Without anything to manage, Unicorn does not need an operative system
making it a solution much lighter.&lt;/p&gt;

&lt;p&gt;And better, the Python bindings for Unicorn gives us access to the CPU
registers and memory so we can get rid of GDB.&lt;/p&gt;

&lt;h2 id=&quot;iasm-keystone--unicorn--python&quot;&gt;iasm: keystone + unicorn + python&lt;/h2&gt;

&lt;p&gt;I soon realized that while learning Arm by writing code is the best way
to do it,
writing &lt;em&gt;everything&lt;/em&gt; in assembly is hard.&lt;/p&gt;

&lt;p&gt;Simple tasks like initialize the registers or print a chunk
of stack involves several instructions.&lt;/p&gt;

&lt;p&gt;In Python &lt;code class=&quot;highlighter-rouge&quot;&gt;r0 = 1111127999&lt;/code&gt;. In Arm:&lt;/p&gt;

&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;ldr&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Lval&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Lval&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;word&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1111127999&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So, &lt;a href=&quot;https://github.com/bad-address/iasm&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;iasm&lt;/code&gt;&lt;/a&gt; has an escape mode.
Basically I call &lt;code class=&quot;highlighter-rouge&quot;&gt;eval&lt;/code&gt;/&lt;code class=&quot;highlighter-rouge&quot;&gt;exec&lt;/code&gt;
emulating with Python variables like &lt;code class=&quot;highlighter-rouge&quot;&gt;r0&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;M&lt;/code&gt; registers
and memory.&lt;/p&gt;

&lt;p&gt;And that’s &lt;code class=&quot;highlighter-rouge&quot;&gt;iasm&lt;/code&gt; an keystone assembler connected with a unicorn
emulator and some python code to glue them.&lt;/p&gt;

&lt;h2 id=&quot;features&quot;&gt;Features&lt;/h2&gt;

&lt;h3 id=&quot;python-prompt-toolkit&quot;&gt;Python Prompt Toolkit&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://python-prompt-toolkit.readthedocs.io/en/latest/&quot;&gt;python-prompt-toolkit&lt;/a&gt;
or PPT for short, is a library to build CLI applications.&lt;/p&gt;

&lt;p&gt;It has syntax highlighting as you write (using &lt;a href=&quot;https://pygments.org/&quot;&gt;pygments&lt;/a&gt;),
autocompletion and command line history.&lt;/p&gt;

&lt;p&gt;An enhanced replacement for Python’s &lt;code class=&quot;highlighter-rouge&quot;&gt;input&lt;/code&gt; for sure.&lt;/p&gt;

&lt;h3 id=&quot;memory&quot;&gt;Memory&lt;/h3&gt;

&lt;p&gt;Unicorn has &lt;code class=&quot;highlighter-rouge&quot;&gt;mem_read&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;mem_write&lt;/code&gt; to change the memory of the
process but like any other process, the memory pages need to be mapped
before with &lt;code class=&quot;highlighter-rouge&quot;&gt;mem_map&lt;/code&gt; and released with &lt;code class=&quot;highlighter-rouge&quot;&gt;mem_unmap&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;mu&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mem_map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x2000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;mu&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mem_write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x1100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x1200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;A&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;mu&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mem_read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x1100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x1200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;mu&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mem_unmap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x2000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;iasm&lt;/code&gt; has a more pythonic syntax accessible from the Python shell:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x2000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# map and initialize
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Mapping&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;memory&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;region&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x1000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x1fff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sz&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x1050&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x1055&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x41&lt;/span&gt;       &lt;span class=&quot;c1&quot;&gt;# write like 'memset'
&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x1055&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x105a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'B'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;# write like 'memcpy'
&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x1050&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x105a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;# read
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AAAAABBBBB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;# list mapped pages
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x1000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x1fff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sz&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x1000000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x11fffff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sz&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x200000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;del&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x2000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;# unmap
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;allocate-stack&quot;&gt;Allocate stack&lt;/h3&gt;

&lt;p&gt;To allocate the stack and setup the (Arm) registers just run:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x2000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Mapping&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;memory&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;region&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x1000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x1fff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sz&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x2000&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now, play with it and practice your (Arm) assembly:&lt;/p&gt;

&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r1&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And check the stack (was &lt;code class=&quot;highlighter-rouge&quot;&gt;r0&lt;/code&gt; pushed before &lt;code class=&quot;highlighter-rouge&quot;&gt;r1&lt;/code&gt; or not? Check it!)&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:]&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;# from sp to the end of the mapped page
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;\&lt;span class=&quot;n&quot;&gt;x04&lt;/span&gt;\&lt;span class=&quot;n&quot;&gt;x00&lt;/span&gt;\&lt;span class=&quot;n&quot;&gt;x00&lt;/span&gt;\&lt;span class=&quot;n&quot;&gt;x00&lt;/span&gt;\&lt;span class=&quot;n&quot;&gt;x08&lt;/span&gt;\&lt;span class=&quot;n&quot;&gt;x00&lt;/span&gt;\&lt;span class=&quot;n&quot;&gt;x00&lt;/span&gt;\&lt;span class=&quot;n&quot;&gt;x00&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;initialization-script&quot;&gt;Initialization script&lt;/h3&gt;

&lt;p&gt;Write in a file all the initialization like the stack allocation and
load it from the command line with &lt;code class=&quot;highlighter-rouge&quot;&gt;-i&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;';! r0 = r1 = r2 = 8'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; init

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;iasm &lt;span class=&quot;nt&quot;&gt;-a&lt;/span&gt; arm &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; arm &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; init
Mapping memory region &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;0x1000000-0x11fffff] &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;sz 0x200000&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;------&lt;/span&gt;  -  &lt;span class=&quot;nt&quot;&gt;------&lt;/span&gt;  -  &lt;span class=&quot;nt&quot;&gt;------&lt;/span&gt;  -  &lt;span class=&quot;nt&quot;&gt;------&lt;/span&gt;  &lt;span class=&quot;nt&quot;&gt;-----&lt;/span&gt;
    r0  8  r1      8  r2      8  r3      0
&amp;lt;...&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;inline-documentation&quot;&gt;Inline documentation&lt;/h3&gt;

&lt;p&gt;Following the tradition of Python, &lt;code class=&quot;highlighter-rouge&quot;&gt;iasm&lt;/code&gt; includes documentation for the
assembly instructions.&lt;/p&gt;

&lt;p&gt;After the mnemonic type &lt;code class=&quot;highlighter-rouge&quot;&gt;?&lt;/code&gt; and enter to show it:&lt;/p&gt;

&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mul&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Basically what I did was to convert to text the manual of reference of
the ISA (typically it is a PDF file) and then parse the text.&lt;/p&gt;

&lt;p&gt;I only focused in the documentation of the instructions, the rest is up
to the user to search the complete story in the official documentation
(only Arm for now)&lt;/p&gt;

&lt;h3 id=&quot;globs-registers&quot;&gt;Globs registers&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;iasm&lt;/code&gt; allows to select which registers to show using &lt;em&gt;globs&lt;/em&gt;,
Unix like pattern expressions defined by
&lt;a href=&quot;https://docs.python.org/3/library/fnmatch.html&quot;&gt;fnmatch&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;iasm &lt;span class=&quot;nt&quot;&gt;-a&lt;/span&gt; arm &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; arm &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'r[0-9]'&lt;/span&gt;
Mapping memory region &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;0x1000000-0x11fffff] &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;sz 0x200000&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt;  -  &lt;span class=&quot;nt&quot;&gt;-----&lt;/span&gt;  -  &lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt;  -  &lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt;  -
r0  0  r1     0  r2  0  r3  0
r4  0  r5     0  r6  0  r7  0
r8  0  r9/sb  0
&lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt;  -  &lt;span class=&quot;nt&quot;&gt;-----&lt;/span&gt;  -  &lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt;  -  &lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt;  -
&amp;lt;...&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So the expression &lt;code class=&quot;highlighter-rouge&quot;&gt;r[0-9]&lt;/code&gt; selects all the Arm registers from &lt;code class=&quot;highlighter-rouge&quot;&gt;r0&lt;/code&gt; to
&lt;code class=&quot;highlighter-rouge&quot;&gt;r15&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;compressed-hex-values&quot;&gt;Compressed hex values&lt;/h3&gt;

&lt;p&gt;32 bit numbers are too large to display (and 64 bit address are
worse!).&lt;/p&gt;

&lt;p&gt;Instead, &lt;code class=&quot;highlighter-rouge&quot;&gt;iasm&lt;/code&gt; shows them as &lt;em&gt;compressed&lt;/em&gt; hexadecimal numbers.&lt;/p&gt;

&lt;p&gt;They are like hexadecimals but the number is split into 4-digits groups
divided by a &lt;code class=&quot;highlighter-rouge&quot;&gt;:&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The leading zeros of each group are omitted and if the group is full of
zeros only a single &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt; is put and if the group is on the left (more
significant digits), the whole group is omitted.&lt;/p&gt;

&lt;p&gt;Here are some examples:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;0x00000000             0
0x000000ab            ab
0x00ab00cd         ab:cd
0x00ab0000          ab:0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;!-- stuff --&gt;

&lt;script&gt;
function fix_asm_syntax(ev) {
    // pip install selectq
    //   cond = (val('text()') == 'blt') | (val('text()') == 'b') | (val('text()').startswith('mov')) | ...
    //   div = sQ.select('div', attr('class').contains('language-nasm'))
    //   xpath = div.select('span', cond)

    // Make some instructions &quot;keywords&quot;
    var xpath = &quot;.//div[contains(@class,'language-nasm')]//span[(((text() = 'blt') or (text() = 'b')) or starts-with(text(), 'mov')) or starts-with(text(), 'ldm') or starts-with(text(), 'stm') or starts-with(text(), 'ldr') or starts-with(text(), 'bx') or starts-with(text(), 'bl') or starts-with(text(), 'bne') or starts-with(text(), 'mvn')]&quot;;
    var elems_iter = document.evaluate(xpath, document, null, XPathResult.ANY_TYPE, null);

    var elems = [];
    var el = elems_iter.iterateNext();
    while (el) {
        elems.push(el);
        el = elems_iter.iterateNext();
    }
    for (var i = 0; i &lt; elems.length; i++) {
        var el = elems[i];
        el.classList.add('k'); // keyword
        el.classList.remove('n'); // noun
    }

    // Remove the 'err' class
    var xpath = &quot;.//div[contains(@class,'language-nasm')]//span[@class='err']&quot;
    var elems_iter = document.evaluate(xpath, document, null, XPathResult.ANY_TYPE, null);

    var elems = [];
    var el = elems_iter.iterateNext();
    while (el) {
        elems.push(el);
        el = elems_iter.iterateNext();
    }
    for (var i = 0; i &lt; elems.length; i++) {
        var el = elems[i];
        el.classList.remove('err'); // syntax error
    }

    // Remove the 'err' class
    var xpath = &quot;.//div[contains(@class,'language-python')]//span[@class='err']&quot;
    var elems_iter = document.evaluate(xpath, document, null, XPathResult.ANY_TYPE, null);

    var elems = [];
    var el = elems_iter.iterateNext();
    while (el) {
        elems.push(el);
        el = elems_iter.iterateNext();
    }
    for (var i = 0; i &lt; elems.length; i++) {
        var el = elems[i];
        el.classList.remove('err'); // syntax error
    }
}

document.addEventListener('DOMContentLoaded', fix_asm_syntax);
&lt;/script&gt;</content><author><name>Gehn</name></author><summary type="html">I crossed with a series of Arm challenges by causality and I decided to give it a shoot. But I have 0 knowledge about Arm so the disassembly of the binaries were too strange for me. I stepped back to plan it better: my idea was to use GDB to debug small snippets of Arm code, learn about it before jumping into the challenges. I setup a QEMU virtual machine running Rasbian in an Arm CPU. With a GCC and GDB running there I started but the compile-load-debug cycle was too inflexible. I could not use it to explore. If I wanted to see the effect of a particular instruction I needed to write it in assembly, compile it and debug it. And the time between the “what does X?” and the “X does this” was too large, reducing the momentum that you have when you explore something new. Too tedious. So I decided to shorten the cycle writing an interactive assembler.</summary></entry><entry><title type="html">Review Arm Assembly</title><link href="/book-of-gehn/articles/2021/01/04/Review-Arm-Assembly.html" rel="alternate" type="text/html" title="Review Arm Assembly" /><published>2021-01-04T00:00:00+01:00</published><updated>2021-01-04T00:00:00+01:00</updated><id>/book-of-gehn/articles/2021/01/04/Review-Arm-Assembly</id><content type="html" xml:base="/book-of-gehn/articles/2021/01/04/Review-Arm-Assembly.html">&lt;p&gt;There is no other way to learn something that playing with it.&lt;/p&gt;

&lt;p&gt;Take assembly code, read it and predice what will do. Then test it.&lt;/p&gt;

&lt;p&gt;Those mistakes, those mismatches between what you think and what it
really is, those &lt;em&gt;surprises&lt;/em&gt; are what move us forward into learning. Deeper.&lt;/p&gt;

&lt;p&gt;In this post I will dig into Arm, assisted with an
&lt;a href=&quot;https://github.com/bad-address/iasm&quot;&gt;interactive assembler&lt;/a&gt;.&lt;!--more--&gt;&lt;/p&gt;

&lt;h2 id=&quot;gcc-generated-arm-assembly&quot;&gt;GCC generated Arm assembly&lt;/h2&gt;

&lt;p&gt;We will see the assembly of the following C code compiled as:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pi@raspberrypi:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gcc &lt;span class=&quot;nt&quot;&gt;-S&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-O0&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; asm1.asm asm1.c
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;raspberrypi&lt;/code&gt; is a QEMU virtual machine for Arm running a Raspbian
Stretch. The setup is explained in my previous post
&lt;a href=&quot;/book-of-gehn/articles/2020/12/15/Qemulating-Rasbian-ARM.html&quot;&gt;QEMUlating a Rasbian (ARM)&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The code is quite simple:&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;rand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x4041&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x4041&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let’s dig into the assembly. I will use an
&lt;a href=&quot;https://github.com/bad-address/iasm&quot;&gt;interactive assembler&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;the-rand-function&quot;&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;rand&lt;/code&gt; function&lt;/h2&gt;

&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;align&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;global&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rand&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arch&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;armv6&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;syntax&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unified&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arm&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fpu&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vfp&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;rand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;function&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;rand&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;; link register save eliminated.&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;str&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;fp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;]!&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;add&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;fp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;mov&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;r3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;66&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;mov&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;r0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r3&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;add&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;sp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ldr&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;fp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[sp],&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;bx&lt;/span&gt;      &lt;span class=&quot;n&quot;&gt;lr&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;rand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rand&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;First, the code is aligned and the symbol is marked as “global”.
&lt;code class=&quot;highlighter-rouge&quot;&gt;.arm&lt;/code&gt; says that the code is Arm (aka &lt;code class=&quot;highlighter-rouge&quot;&gt;.code 32&lt;/code&gt;).&lt;/p&gt;

&lt;h3 id=&quot;prologue&quot;&gt;Prologue&lt;/h3&gt;

&lt;p&gt;The function begins saving the &lt;em&gt;frame pointer&lt;/em&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;fp&lt;/code&gt; in the stack.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;str fp, [sp, #-4]!&lt;/code&gt; is a &lt;em&gt;pre-index&lt;/em&gt; addressing store: the &lt;code class=&quot;highlighter-rouge&quot;&gt;fp&lt;/code&gt;
is saved 4 bytes “up” in the stack (the stack grows towards lower
addresses).&lt;/p&gt;

&lt;p&gt;And the store is in &lt;em&gt;pre write-back&lt;/em&gt; store (&lt;code class=&quot;highlighter-rouge&quot;&gt;!&lt;/code&gt;): the &lt;code class=&quot;highlighter-rouge&quot;&gt;sp&lt;/code&gt; is
updated (decremented by 4) &lt;em&gt;before&lt;/em&gt; performing the store.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;sp&lt;/code&gt; points always to the latest &lt;em&gt;valid&lt;/em&gt; value in the stack. That’s
why &lt;code class=&quot;highlighter-rouge&quot;&gt;sp&lt;/code&gt; is decremented before performing the store.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;add fp, sp, #0&lt;/code&gt; is an alternative to &lt;code class=&quot;highlighter-rouge&quot;&gt;mov fp, sp&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;At the begin of the call:&lt;/p&gt;

&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;------&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;------&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;----&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;------&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;---------&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;------&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;---------&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;r0&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;r1&lt;/span&gt;      &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;r2&lt;/span&gt;      &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;          &lt;span class=&quot;n&quot;&gt;r3&lt;/span&gt;      &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;r4&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;r5&lt;/span&gt;      &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;r6&lt;/span&gt;      &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;          &lt;span class=&quot;n&quot;&gt;r7&lt;/span&gt;      &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;r8&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;r9&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sb&lt;/span&gt;   &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;r10&lt;/span&gt;     &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;          &lt;span class=&quot;n&quot;&gt;r11&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fp&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;bbbb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bbbb&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;r12&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ip&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;r13&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sp&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;2000&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;r14&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lr&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;aaaa&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;aaaa&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;r15&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;------&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;------&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;----&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;------&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;---------&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;------&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;---------&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After the &lt;code class=&quot;highlighter-rouge&quot;&gt;fp&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;sp&lt;/code&gt; update:&lt;/p&gt;

&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;------&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;------&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;----&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;------&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;---------&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;------&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;-----&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;r0&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;r1&lt;/span&gt;      &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;r2&lt;/span&gt;      &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;          &lt;span class=&quot;n&quot;&gt;r3&lt;/span&gt;      &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;r4&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;r5&lt;/span&gt;      &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;r6&lt;/span&gt;      &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;          &lt;span class=&quot;n&quot;&gt;r7&lt;/span&gt;      &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;r8&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;r9&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sb&lt;/span&gt;   &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;r10&lt;/span&gt;     &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;          &lt;span class=&quot;n&quot;&gt;r11&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fp&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ffc&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;r12&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ip&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;r13&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sp&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ffc&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;r14&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lr&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;aaaa&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;aaaa&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;r15&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;------&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;------&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;----&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;------&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;---------&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;------&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;-----&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;label for=&quot;mn-275f0f8b94cfa074405e20db30591048&quot; class=&quot;margin-toggle&quot;&gt; ⊕&lt;/label&gt;&lt;input type=&quot;checkbox&quot; id=&quot;mn-275f0f8b94cfa074405e20db30591048&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;marginnote&quot;&gt;&lt;a href=&quot;https://github.com/bad-address/iasm&quot;&gt;iasm&lt;/a&gt;, the interactive assembler,
allows to explore the memory with the &lt;code class=&quot;highlighter-rouge&quot;&gt;M&lt;/code&gt; object. &lt;code class=&quot;highlighter-rouge&quot;&gt;M[sp:]&lt;/code&gt; means show
the memory from the address stored in &lt;code class=&quot;highlighter-rouge&quot;&gt;sp&lt;/code&gt; to the last address mapped
page.
&lt;br /&gt;
In other words: show the stack.
 &lt;/span&gt;&lt;/p&gt;

&lt;p&gt;And the state of the stack is:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;\&lt;span class=&quot;n&quot;&gt;xbb&lt;/span&gt;\&lt;span class=&quot;n&quot;&gt;xbb&lt;/span&gt;\&lt;span class=&quot;n&quot;&gt;xbb&lt;/span&gt;\&lt;span class=&quot;n&quot;&gt;xbb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;\&lt;span class=&quot;n&quot;&gt;xbb&lt;/span&gt;\&lt;span class=&quot;n&quot;&gt;xbb&lt;/span&gt;\&lt;span class=&quot;n&quot;&gt;xbb&lt;/span&gt;\&lt;span class=&quot;n&quot;&gt;xbb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sp&lt;/code&gt; points always to the latest value of the stack; &lt;code class=&quot;highlighter-rouge&quot;&gt;fp&lt;/code&gt; points to the
previous &lt;code class=&quot;highlighter-rouge&quot;&gt;fp&lt;/code&gt; value (&lt;code class=&quot;highlighter-rouge&quot;&gt;0xbbbbbbbb&lt;/code&gt; in this case).&lt;/p&gt;

&lt;h3 id=&quot;body&quot;&gt;Body&lt;/h3&gt;

&lt;p&gt;The assembler didn’t optimize the code: it stored in &lt;code class=&quot;highlighter-rouge&quot;&gt;r3&lt;/code&gt; the immediate
value of &lt;code class=&quot;highlighter-rouge&quot;&gt;#66&lt;/code&gt; (0x42) to then copy it to &lt;code class=&quot;highlighter-rouge&quot;&gt;r0&lt;/code&gt; (the register used for
returning values). &lt;code class=&quot;highlighter-rouge&quot;&gt;mov r0, #66&lt;/code&gt; would be shorter.&lt;/p&gt;

&lt;h3 id=&quot;epilogue&quot;&gt;Epilogue&lt;/h3&gt;

&lt;p&gt;Then the &lt;code class=&quot;highlighter-rouge&quot;&gt;sp&lt;/code&gt; is restored to the current &lt;code class=&quot;highlighter-rouge&quot;&gt;fp&lt;/code&gt; and the &lt;code class=&quot;highlighter-rouge&quot;&gt;fp&lt;/code&gt; is restored
to the previous &lt;code class=&quot;highlighter-rouge&quot;&gt;fp&lt;/code&gt; value with &lt;code class=&quot;highlighter-rouge&quot;&gt;ldr fp, [sp], #4&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This load is a &lt;em&gt;pre-index&lt;/em&gt; addressing with &lt;em&gt;post write-back&lt;/em&gt;. That’s it,
the &lt;code class=&quot;highlighter-rouge&quot;&gt;fp&lt;/code&gt; is loaded with the valued pointed by &lt;code class=&quot;highlighter-rouge&quot;&gt;sp&lt;/code&gt; and then &lt;code class=&quot;highlighter-rouge&quot;&gt;sp&lt;/code&gt; is
added 4 bytes (aka pop).&lt;/p&gt;

&lt;p&gt;The compiler however should optimize this because the stack is not used
at all so saving and restoring &lt;code class=&quot;highlighter-rouge&quot;&gt;fp&lt;/code&gt; has no value.&lt;/p&gt;

&lt;p&gt;What the compiled did, it didn’t save the &lt;em&gt;link&lt;/em&gt; register &lt;code class=&quot;highlighter-rouge&quot;&gt;lr&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The register holds the address to where return from a call. Because
&lt;code class=&quot;highlighter-rouge&quot;&gt;rand&lt;/code&gt; doesn’t call anything, &lt;code class=&quot;highlighter-rouge&quot;&gt;lr&lt;/code&gt; from the caller is preserved so it is
not needed to save it in the stack.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;bx lr&lt;/code&gt; returns to the caller.&lt;/p&gt;

&lt;h2 id=&quot;the-sum-function&quot;&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;sum&lt;/code&gt; function&lt;/h2&gt;

&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;str&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;fp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;]!&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;add&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;fp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;sp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;str&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;r0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;str&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;r1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ldr&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;r2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ldr&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;r3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;add&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;r3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r3&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;mov&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;r0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r3&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;add&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;sp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ldr&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;fp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[sp],&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;bx&lt;/span&gt;      &lt;span class=&quot;n&quot;&gt;lr&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;prologue-1&quot;&gt;Prologue&lt;/h3&gt;

&lt;p&gt;In this case the function allocates 12 bytes to hold local variables
(&lt;code class=&quot;highlighter-rouge&quot;&gt;sub sp, sp, #12&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;The second argument &lt;code class=&quot;highlighter-rouge&quot;&gt;r1&lt;/code&gt; is stored in the top of the stack; the first
argument &lt;code class=&quot;highlighter-rouge&quot;&gt;r0&lt;/code&gt; is stored below. Arguments are pushed from left (&lt;code class=&quot;highlighter-rouge&quot;&gt;r0&lt;/code&gt;) to
right (&lt;code class=&quot;highlighter-rouge&quot;&gt;r1&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;The call convention says that the arguments are passed via registers (up
to 4 args). They are set by the caller and, if needed, the callee needs
to preserve them in the stack.&lt;/p&gt;

&lt;p&gt;No really needed here because &lt;code class=&quot;highlighter-rouge&quot;&gt;sum&lt;/code&gt; does not call other function but
still the compiler follows the cookbook.&lt;/p&gt;

&lt;p&gt;The function allocated 12 byte to hold 3 variables of 32 bits. We stored
2, the arguments, but the third element is never set.&lt;/p&gt;

&lt;p&gt;The registers at the begin of the call were:&lt;/p&gt;

&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;------&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;---------&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;------&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;---------&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;------&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;---------&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;------&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;---------&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;r0&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;cccc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cccc&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;r1&lt;/span&gt;      &lt;span class=&quot;n&quot;&gt;dddd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dddd&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;r2&lt;/span&gt;      &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;          &lt;span class=&quot;n&quot;&gt;r3&lt;/span&gt;      &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;r4&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;          &lt;span class=&quot;n&quot;&gt;r5&lt;/span&gt;      &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;          &lt;span class=&quot;n&quot;&gt;r6&lt;/span&gt;      &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;          &lt;span class=&quot;n&quot;&gt;r7&lt;/span&gt;      &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;r8&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;          &lt;span class=&quot;n&quot;&gt;r9&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sb&lt;/span&gt;   &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;          &lt;span class=&quot;n&quot;&gt;r10&lt;/span&gt;     &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;          &lt;span class=&quot;n&quot;&gt;r11&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fp&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;bbbb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bbbb&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;r12&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ip&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;          &lt;span class=&quot;n&quot;&gt;r13&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sp&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;2000&lt;/span&gt;       &lt;span class=&quot;n&quot;&gt;r14&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lr&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;aaaa&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;aaaa&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;r15&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;------&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;---------&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;------&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;---------&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;------&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;---------&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;------&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;---------&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And after the stores, the stack has:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;\&lt;span class=&quot;n&quot;&gt;xdd&lt;/span&gt;\&lt;span class=&quot;n&quot;&gt;xdd&lt;/span&gt;\&lt;span class=&quot;n&quot;&gt;xdd&lt;/span&gt;\&lt;span class=&quot;n&quot;&gt;xdd&lt;/span&gt;\&lt;span class=&quot;n&quot;&gt;xcc&lt;/span&gt;\&lt;span class=&quot;n&quot;&gt;xcc&lt;/span&gt;\&lt;span class=&quot;n&quot;&gt;xcc&lt;/span&gt;\&lt;span class=&quot;n&quot;&gt;xcc&lt;/span&gt;\&lt;span class=&quot;n&quot;&gt;x00&lt;/span&gt;\&lt;span class=&quot;n&quot;&gt;x00&lt;/span&gt;\&lt;span class=&quot;n&quot;&gt;x00&lt;/span&gt;\&lt;span class=&quot;n&quot;&gt;x00&lt;/span&gt;\&lt;span class=&quot;n&quot;&gt;xbb&lt;/span&gt;\&lt;span class=&quot;n&quot;&gt;xbb&lt;/span&gt;\&lt;span class=&quot;n&quot;&gt;xbb&lt;/span&gt;\&lt;span class=&quot;n&quot;&gt;xbb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;            &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;            &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;??&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;            &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;\&lt;span class=&quot;n&quot;&gt;xbb&lt;/span&gt;\&lt;span class=&quot;n&quot;&gt;xbb&lt;/span&gt;\&lt;span class=&quot;n&quot;&gt;xbb&lt;/span&gt;\&lt;span class=&quot;n&quot;&gt;xbb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I presume that the unused space (??) is for the &lt;code class=&quot;highlighter-rouge&quot;&gt;lr&lt;/code&gt; register.&lt;/p&gt;

&lt;h2 id=&quot;the-main-function&quot;&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;main&lt;/code&gt; function&lt;/h2&gt;

&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;push&lt;/span&gt;    &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lr&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;add&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;fp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;sp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;bl&lt;/span&gt;      &lt;span class=&quot;n&quot;&gt;rand&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;str&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;r0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ldr&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;r3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;cmp&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;r3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;bne&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L6&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;mov&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;r3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;       &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L7&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ldr&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;r3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ldr&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;r2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L9&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;cmp&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;r3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r2&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ble&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L8&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ldr&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;r1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L9&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ldr&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;r0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;bl&lt;/span&gt;      &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;mov&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;r3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r0&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;       &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L7&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;mvn&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;r3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;mov&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;r0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r3&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;sp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;pop&lt;/span&gt;     &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;align&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;prologue-2&quot;&gt;Prologue&lt;/h3&gt;

&lt;p&gt;The function saves &lt;code class=&quot;highlighter-rouge&quot;&gt;fp&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;lr&lt;/code&gt; with a single &lt;code class=&quot;highlighter-rouge&quot;&gt;push {fp,lr}&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;{r,r}&lt;/code&gt; notation is a &lt;em&gt;set&lt;/em&gt;, not a &lt;em&gt;list&lt;/em&gt;: registers are pushed in
the &lt;em&gt;inverse&lt;/em&gt; order of the registers (&lt;code class=&quot;highlighter-rouge&quot;&gt;r0&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;r15&lt;/code&gt;)
regardless of how the &lt;code class=&quot;highlighter-rouge&quot;&gt;push&lt;/code&gt; is written.&lt;/p&gt;

&lt;p&gt;In our case &lt;code class=&quot;highlighter-rouge&quot;&gt;fp&lt;/code&gt; is &lt;code class=&quot;highlighter-rouge&quot;&gt;r11&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;lr&lt;/code&gt; is &lt;code class=&quot;highlighter-rouge&quot;&gt;r14&lt;/code&gt; so that is the natural order,
then the inverse order applies: &lt;code class=&quot;highlighter-rouge&quot;&gt;r14&lt;/code&gt; is pushed first, &lt;code class=&quot;highlighter-rouge&quot;&gt;r11&lt;/code&gt; later.&lt;/p&gt;

&lt;p&gt;In short: &lt;code class=&quot;highlighter-rouge&quot;&gt;r14&lt;/code&gt; will be at the bottom of the stack (higher addresses)
while &lt;code class=&quot;highlighter-rouge&quot;&gt;r11&lt;/code&gt; will be at the top (lower addresses).&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;fp&lt;/code&gt; is then updated to the base of the stack for the current
function call. The stack frame begins &lt;em&gt;after&lt;/em&gt; storing the previous &lt;code class=&quot;highlighter-rouge&quot;&gt;fp&lt;/code&gt;
so the current &lt;code class=&quot;highlighter-rouge&quot;&gt;fp&lt;/code&gt; points to the saved &lt;code class=&quot;highlighter-rouge&quot;&gt;lr&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;fp&lt;/code&gt; update is done with &lt;code class=&quot;highlighter-rouge&quot;&gt;add fp, sp, #4&lt;/code&gt; (by this moment the &lt;code class=&quot;highlighter-rouge&quot;&gt;sp&lt;/code&gt;
is off by 4 due the push of &lt;code class=&quot;highlighter-rouge&quot;&gt;lr&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;The registers at the begin of the call were:&lt;/p&gt;

&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;------&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;---------&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;------&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;---------&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;------&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;---------&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;------&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;---------&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;r0&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;cccc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cccc&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;r1&lt;/span&gt;      &lt;span class=&quot;n&quot;&gt;dddd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dddd&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;r2&lt;/span&gt;      &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;          &lt;span class=&quot;n&quot;&gt;r3&lt;/span&gt;      &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;r4&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;          &lt;span class=&quot;n&quot;&gt;r5&lt;/span&gt;      &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;          &lt;span class=&quot;n&quot;&gt;r6&lt;/span&gt;      &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;          &lt;span class=&quot;n&quot;&gt;r7&lt;/span&gt;      &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;r8&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;          &lt;span class=&quot;n&quot;&gt;r9&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sb&lt;/span&gt;   &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;          &lt;span class=&quot;n&quot;&gt;r10&lt;/span&gt;     &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;          &lt;span class=&quot;n&quot;&gt;r11&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fp&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;bbbb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bbbb&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;r12&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ip&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;          &lt;span class=&quot;n&quot;&gt;r13&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sp&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;2000&lt;/span&gt;       &lt;span class=&quot;n&quot;&gt;r14&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lr&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;aaaa&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;aaaa&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;r15&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;------&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;---------&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;------&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;---------&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;------&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;---------&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;------&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;---------&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And after the &lt;code class=&quot;highlighter-rouge&quot;&gt;push&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;add&lt;/code&gt;, the registers were:&lt;/p&gt;

&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;------&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;---------&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;------&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;---------&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;------&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;---------&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;------&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;-----&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;r0&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;cccc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cccc&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;r1&lt;/span&gt;      &lt;span class=&quot;n&quot;&gt;dddd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dddd&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;r2&lt;/span&gt;      &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;          &lt;span class=&quot;n&quot;&gt;r3&lt;/span&gt;      &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;r4&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;          &lt;span class=&quot;n&quot;&gt;r5&lt;/span&gt;      &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;          &lt;span class=&quot;n&quot;&gt;r6&lt;/span&gt;      &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;          &lt;span class=&quot;n&quot;&gt;r7&lt;/span&gt;      &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;r8&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;          &lt;span class=&quot;n&quot;&gt;r9&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sb&lt;/span&gt;   &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;          &lt;span class=&quot;n&quot;&gt;r10&lt;/span&gt;     &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;          &lt;span class=&quot;n&quot;&gt;r11&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fp&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ffc&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;r12&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ip&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;          &lt;span class=&quot;n&quot;&gt;r13&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sp&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ff8&lt;/span&gt;       &lt;span class=&quot;n&quot;&gt;r14&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lr&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;aaaa&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;aaaa&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;r15&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;------&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;---------&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;------&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;---------&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;------&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;---------&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;------&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;-----&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And the stack:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;\&lt;span class=&quot;n&quot;&gt;xbb&lt;/span&gt;\&lt;span class=&quot;n&quot;&gt;xbb&lt;/span&gt;\&lt;span class=&quot;n&quot;&gt;xbb&lt;/span&gt;\&lt;span class=&quot;n&quot;&gt;xbb&lt;/span&gt;\&lt;span class=&quot;n&quot;&gt;xaa&lt;/span&gt;\&lt;span class=&quot;n&quot;&gt;xaa&lt;/span&gt;\&lt;span class=&quot;n&quot;&gt;xaa&lt;/span&gt;\&lt;span class=&quot;n&quot;&gt;xaa&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;            &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;\&lt;span class=&quot;n&quot;&gt;xaa&lt;/span&gt;\&lt;span class=&quot;n&quot;&gt;xaa&lt;/span&gt;\&lt;span class=&quot;n&quot;&gt;xaa&lt;/span&gt;\&lt;span class=&quot;n&quot;&gt;xaa&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is &lt;strong&gt;not&lt;/strong&gt; compatible with what we saw in &lt;code class=&quot;highlighter-rouge&quot;&gt;rand&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;sum&lt;/code&gt;: the
&lt;code class=&quot;highlighter-rouge&quot;&gt;fp&lt;/code&gt; points to the saved &lt;code class=&quot;highlighter-rouge&quot;&gt;fp&lt;/code&gt; in these functions but points to &lt;code class=&quot;highlighter-rouge&quot;&gt;lr&lt;/code&gt; in
&lt;code class=&quot;highlighter-rouge&quot;&gt;main&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Also, in &lt;code class=&quot;highlighter-rouge&quot;&gt;sum&lt;/code&gt; we believed that 4 unused bytes were reserved to store
&lt;code class=&quot;highlighter-rouge&quot;&gt;lr&lt;/code&gt; but here we see that the space is reserved later with
&lt;code class=&quot;highlighter-rouge&quot;&gt;sub sp, sp, #8&lt;/code&gt; and does not include space for &lt;code class=&quot;highlighter-rouge&quot;&gt;lr&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;comparisons&quot;&gt;Comparisons&lt;/h3&gt;

&lt;p&gt;The call to &lt;code class=&quot;highlighter-rouge&quot;&gt;rand&lt;/code&gt; (parameterless) is done with &lt;code class=&quot;highlighter-rouge&quot;&gt;bl&lt;/code&gt;, branch and link.&lt;/p&gt;

&lt;p&gt;The return value is in &lt;code class=&quot;highlighter-rouge&quot;&gt;r0&lt;/code&gt; and for some reason it is pushed and popped
back from the stack into &lt;code class=&quot;highlighter-rouge&quot;&gt;r3&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;M[fp - 8]&lt;/code&gt; is used as the placeholder for this and for subsequent
references to the returned value of &lt;code class=&quot;highlighter-rouge&quot;&gt;rand&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Two comparisons are made for the &lt;code class=&quot;highlighter-rouge&quot;&gt;if-else if&lt;/code&gt; statement:&lt;/p&gt;

&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;        &lt;span class=&quot;n&quot;&gt;ldr&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;r3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;cmp&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;r3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ldr&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;r3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ldr&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;r2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L9&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;cmp&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;r3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The first compares &lt;code class=&quot;highlighter-rouge&quot;&gt;r3&lt;/code&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;rand&lt;/code&gt; returned value) with a immediate value
of &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;cmp r3, #0&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;The second compares two registers, &lt;code class=&quot;highlighter-rouge&quot;&gt;r3&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;r2&lt;/code&gt;, where &lt;code class=&quot;highlighter-rouge&quot;&gt;r2&lt;/code&gt; is also a
fixed value but it is to large to fit in the &lt;code class=&quot;highlighter-rouge&quot;&gt;cmp&lt;/code&gt; instruction as an
immediate value.&lt;/p&gt;

&lt;p&gt;In this case the value is loaded in the &lt;code class=&quot;highlighter-rouge&quot;&gt;r2&lt;/code&gt; register from the code
segment (label &lt;code class=&quot;highlighter-rouge&quot;&gt;.L9&lt;/code&gt;).&lt;/p&gt;

&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L9&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;word&lt;/span&gt;   &lt;span class=&quot;mi&quot;&gt;16449&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;function-call&quot;&gt;Function call&lt;/h3&gt;

&lt;p&gt;A function call is done with &lt;em&gt;branch with link&lt;/em&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;bl&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Arguments are passed via &lt;code class=&quot;highlighter-rouge&quot;&gt;r0&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;r3&lt;/code&gt; registers from left to right.
More than 4 arguments require the stack.&lt;/p&gt;

&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;        &lt;span class=&quot;c&quot;&gt;; call to sum(r, 0x4041)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ldr&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;r1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L9&lt;/span&gt;         &lt;span class=&quot;c&quot;&gt;; second arg&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ldr&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;r0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;]&lt;/span&gt;   &lt;span class=&quot;c&quot;&gt;; first arg&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;bl&lt;/span&gt;      &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;bl&lt;/code&gt; saves the next instruction (the &lt;em&gt;return address&lt;/em&gt;) in the &lt;em&gt;link&lt;/em&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;lr&lt;/code&gt; register (&lt;code class=&quot;highlighter-rouge&quot;&gt;r14&lt;/code&gt;) and set the destination address in the &lt;em&gt;program
counter&lt;/em&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;pc&lt;/code&gt; register (&lt;code class=&quot;highlighter-rouge&quot;&gt;r15&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;bx lr&lt;/code&gt; (&lt;em&gt;branch and exchange&lt;/em&gt;) is used to return to the caller.&lt;/p&gt;

&lt;h2 id=&quot;arm-directives&quot;&gt;Arm directives&lt;/h2&gt;

&lt;p&gt;Two more fragments remains that are not part of any function.&lt;/p&gt;

&lt;p&gt;These are &lt;a href=&quot;https://sourceware.org/binutils/docs-2.27/as/ARM-Directives.html&quot;&gt;directives for the
GNU Assembler&lt;/a&gt;,
see also
&lt;a href=&quot;https://ftp.gnu.org/old-gnu/Manuals/gas-2.9.1/html_chapter/as_7.html&quot;&gt;this&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arch&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;armv6&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eabi_attribute&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;28&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eabi_attribute&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eabi_attribute&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;21&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eabi_attribute&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;23&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eabi_attribute&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eabi_attribute&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eabi_attribute&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;26&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eabi_attribute&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eabi_attribute&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;34&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eabi_attribute&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;18&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;   &lt;span class=&quot;s&quot;&gt;&quot;asm1.c&quot;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ident&lt;/span&gt;  &lt;span class=&quot;s&quot;&gt;&quot;GCC: (Raspbian 8.3.0-6+rpi1) 8.3.0&quot;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;section&lt;/span&gt;        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;note&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GNU&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;progbits&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;final-thoughts&quot;&gt;Final thoughts&lt;/h2&gt;

&lt;p&gt;I have being reading &lt;a href=&quot;https://developer.arm.com/documentation/ihi0042/latest/&quot;&gt;documentation&lt;/a&gt;
and &lt;a href=&quot;https://www.coranac.com/tonc/text/asm.htm&quot;&gt;write ups&lt;/a&gt; about Arm
during the last weeks.&lt;/p&gt;

&lt;p&gt;When I
&lt;a href=&quot;/book-of-gehn/articles/2020/12/27/TLDR-Quick-Overview-of-Arm.html&quot;&gt;started&lt;/a&gt;
 my idea was to use a &lt;a href=&quot;/book-of-gehn/articles/2020/12/15/Qemulating-Rasbian-ARM.html&quot;&gt;QEMU virtual machine for
testing&lt;/a&gt;:
code a little of assembly, compile it, debugging it with GDB and seeing
the effects.&lt;/p&gt;

&lt;p&gt;It turns out to be tedious very quickly.&lt;/p&gt;

&lt;p&gt;I relayed then more in the documentation and the &lt;a href=&quot;https://documentation-service.arm.com/static/5ed66080ca06a95ce53f932d?token=&quot;&gt;instruction set
reference&lt;/a&gt;
but when I review real code (like the one in this post) some things made
no sense.&lt;/p&gt;

&lt;p&gt;Obviously there were errors in my interpretation of the code.&lt;/p&gt;

&lt;p&gt;That’s why I coded an &lt;a href=&quot;https://github.com/bad-address/iasm&quot;&gt;interactive assembler&lt;/a&gt;
to have a quick feedback of what each instruction does without requiring
a compile-upload-debug cycle.&lt;/p&gt;

&lt;p&gt;It really help me to “smooth out certain rough edges” and understand
better the code specially when the indexing flavors and how the things
are pushed and popped from the stack.&lt;/p&gt;

&lt;!-- stuff --&gt;

&lt;script&gt;
function fix_asm_syntax(ev) {
    // pip install selectq
    //   cond = (val('text()') == 'blt') | (val('text()') == 'b') | (val('text()').startswith('mov')) | ...
    //   div = sQ.select('div', attr('class').contains('language-nasm'))
    //   xpath = div.select('span', cond)

    // Make some instructions &quot;keywords&quot;
    var xpath = &quot;.//div[contains(@class,'language-nasm')]//span[(((text() = 'blt') or (text() = 'b')) or starts-with(text(), 'mov')) or starts-with(text(), 'ldm') or starts-with(text(), 'stm') or starts-with(text(), 'ldr') or starts-with(text(), 'bx') or starts-with(text(), 'bl') or starts-with(text(), 'bne') or starts-with(text(), 'mvn')]&quot;;
    var elems_iter = document.evaluate(xpath, document, null, XPathResult.ANY_TYPE, null);

    var elems = [];
    var el = elems_iter.iterateNext();
    while (el) {
        elems.push(el);
        el = elems_iter.iterateNext();
    }
    for (var i = 0; i &lt; elems.length; i++) {
        var el = elems[i];
        el.classList.add('k'); // keyword
        el.classList.remove('n'); // noun
    }

    // Remove the 'err' class
    var xpath = &quot;.//div[contains(@class,'language-nasm')]//span[@class='err']&quot;
    var elems_iter = document.evaluate(xpath, document, null, XPathResult.ANY_TYPE, null);

    var elems = [];
    var el = elems_iter.iterateNext();
    while (el) {
        elems.push(el);
        el = elems_iter.iterateNext();
    }
    for (var i = 0; i &lt; elems.length; i++) {
        var el = elems[i];
        el.classList.remove('err'); // syntax error
    }

    // Remove the 'err' class
    var xpath = &quot;.//div[contains(@class,'language-python')]//span[@class='err']&quot;
    var elems_iter = document.evaluate(xpath, document, null, XPathResult.ANY_TYPE, null);

    var elems = [];
    var el = elems_iter.iterateNext();
    while (el) {
        elems.push(el);
        el = elems_iter.iterateNext();
    }
    for (var i = 0; i &lt; elems.length; i++) {
        var el = elems[i];
        el.classList.remove('err'); // syntax error
    }
}

document.addEventListener('DOMContentLoaded', fix_asm_syntax);
&lt;/script&gt;</content><author><name>Gehn</name></author><summary type="html">There is no other way to learn something that playing with it. Take assembly code, read it and predice what will do. Then test it. Those mistakes, those mismatches between what you think and what it really is, those surprises are what move us forward into learning. Deeper. In this post I will dig into Arm, assisted with an interactive assembler.</summary></entry><entry><title type="html">TL;DR Quick Overview of Arm</title><link href="/book-of-gehn/articles/2020/12/27/TLDR-Quick-Overview-of-Arm.html" rel="alternate" type="text/html" title="TL;DR Quick Overview of Arm" /><published>2020-12-27T00:00:00+01:00</published><updated>2020-12-27T00:00:00+01:00</updated><id>/book-of-gehn/articles/2020/12/27/TLDR-Quick-Overview-of-Arm</id><content type="html" xml:base="/book-of-gehn/articles/2020/12/27/TLDR-Quick-Overview-of-Arm.html">&lt;p&gt;Speed-reading of
&lt;a href=&quot;https://www.coranac.com/tonc/text/asm.htm&quot;&gt;Whirlwind Tour of ARM Assembly&lt;/a&gt;.&lt;!--more--&gt;&lt;/p&gt;

&lt;h1 id=&quot;the-arm-instruction-set&quot;&gt;The Arm instruction set&lt;/h1&gt;

&lt;p&gt;Arm is a Reduced Instruction Set Computer (RISC) which have a small set
of instructions of fixed size in contrast with the Complex Instruction
Set Computer (CISC).&lt;/p&gt;

&lt;p&gt;In Arm the instructions are of 32 bits and the Thumb version has 16 and
32 bits instructions.&lt;/p&gt;

&lt;p&gt;ARMv3 to ARMv7 versions has 32 bits addresses, previous version has 26
bits and ARMv8 introduced the 64 bits addresses.&lt;/p&gt;

&lt;h3 id=&quot;almost-everything-is-conditional&quot;&gt;Almost everything is conditional&lt;/h3&gt;

&lt;p&gt;Instructions can be executed conditionally. This avoids explicit jumps
which are slower and the overall code size is smaller.&lt;/p&gt;

&lt;p&gt;Use this for small snippets and fallback to traditional branches/jumps
when the code is too large.&lt;/p&gt;

&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;; r2 = max(r0, r1), traditional impl with branches&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;cmp&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;r0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r1&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;blt&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Lbmax&lt;/span&gt;      &lt;span class=&quot;c&quot;&gt;; go to Lbmax if r0 &amp;lt; r1&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;mov&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;r2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r0&lt;/span&gt;      &lt;span class=&quot;c&quot;&gt;; r0 is higher ==&amp;gt; r0 &amp;gt; r1&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;       &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Lrest&lt;/span&gt;      &lt;span class=&quot;c&quot;&gt;; finish&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Lbmax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;mov&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;r2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r1&lt;/span&gt;      &lt;span class=&quot;c&quot;&gt;; r1 is higher&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Lrest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;                 &lt;span class=&quot;c&quot;&gt;;  rest of code&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;; r2 = max(r0, r1), with conditionals moves&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;cmp&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;r0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r1&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;movge&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;r2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r0&lt;/span&gt;      &lt;span class=&quot;c&quot;&gt;;  move if r0 &amp;gt;= r1 (r0 is higher)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;movlt&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;r2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r1&lt;/span&gt;      &lt;span class=&quot;c&quot;&gt;;  move if r0 &amp;lt; r1  (r1 is higher)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;                 &lt;span class=&quot;c&quot;&gt;;  rest of code&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;Example took from
&lt;a href=&quot;https://www.coranac.com/tonc/text/asm.htm&quot;&gt;Whirlwind Tour of Arm Assembly&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Other instructions are also conditional. Even the set of the CPSR
flags is conditional: &lt;code class=&quot;highlighter-rouge&quot;&gt;sub&lt;/code&gt; does not set the status flags while &lt;code class=&quot;highlighter-rouge&quot;&gt;subs&lt;/code&gt;
it does.&lt;/p&gt;

&lt;h3 id=&quot;immediate-values-and-the-second-operand-shift&quot;&gt;Immediate values and the second operand shift&lt;/h3&gt;

&lt;p&gt;Some instructions allow the second operand to be shifted/rotated in the
same instruction.&lt;/p&gt;

&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;k&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r1&lt;/span&gt;          &lt;span class=&quot;c&quot;&gt;;  r0 = r1 + r1&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;lsl&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;;  r0 = r1 + (r1 &amp;lt;&amp;lt; 4)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;lsl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r2&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;;  r0 = r1 + (r1 &amp;lt;&amp;lt; r2)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Five shift/rotation exist, both as part of an instruction like above
and as independent instructions as well.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The immediate value for shifts is limited to 31.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Logical shift left &lt;code class=&quot;highlighter-rouge&quot;&gt;lsl&lt;/code&gt;, logical shift right &lt;code class=&quot;highlighter-rouge&quot;&gt;lsr&lt;/code&gt;, arithmetic shift
right &lt;code class=&quot;highlighter-rouge&quot;&gt;asr&lt;/code&gt;, rotate right &lt;code class=&quot;highlighter-rouge&quot;&gt;ror&lt;/code&gt; and rotate right with extend &lt;code class=&quot;highlighter-rouge&quot;&gt;rrx&lt;/code&gt; (the
32 bits register is extended on the left with the &lt;em&gt;carry&lt;/em&gt; bit: the LSB
is rotated to the carry bit and the carry bit is shifted to the right
into the MSB of the register)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;          10000110
           \\\\\\\\
           ||||||| \
           vvvvvvv  \
          01000011   -&amp;gt; 0   (logical shift right)
          11000011   -&amp;gt; 0   (arithmetic shift right)

          10000110
           \\\\\\\\
           ||||||| \
           vvvvvvv  \
          01000011   |      (rotate shift right)
          ^---------/

   C=0    10000110
      \    \\\\\\\\
       \--\||||||| \
          vvvvvvvv  \
   C=0    01000011   |     (rotate right extended)
     ^---------------/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Having all these nice features in one instruction (shift, conditional,
flag set) come with a cost: less room for immediate values.&lt;/p&gt;

&lt;p&gt;In Thumb-2 and ARMv6 and above exists &lt;code class=&quot;highlighter-rouge&quot;&gt;mov rd, #&amp;lt;imm16&amp;gt;&lt;/code&gt; to set a 16
bits number in a register without the possibility of using any of those
fancy features. It is a plain move.&lt;/p&gt;

&lt;p&gt;But that’s the exception to the rule. Most of the instructions
including fancy moves only allow 8 bits immediate values.&lt;/p&gt;

&lt;p&gt;Like&lt;/p&gt;

&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;n&quot;&gt;movs&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;imm8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;lsl&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;    &lt;span class=&quot;c&quot;&gt;;  r0 = imm8 &amp;lt;&amp;lt; 4, update condition flags&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Larger than 255 values in &lt;code class=&quot;highlighter-rouge&quot;&gt;#&amp;lt;imm8&amp;gt;&lt;/code&gt; are possible because the instruction
has 12 bits to store them. Why not just &lt;code class=&quot;highlighter-rouge&quot;&gt;#&amp;lt;imm12&amp;gt;&lt;/code&gt; then?&lt;/p&gt;

&lt;p&gt;The 4 extra bits are used to rotate to the right the &lt;code class=&quot;highlighter-rouge&quot;&gt;#&amp;lt;imm8&amp;gt;&lt;/code&gt; value by
&lt;em&gt;twice&lt;/em&gt; the number encoded in those 4 bits.&lt;/p&gt;

&lt;p&gt;In other words, the final value is &lt;code class=&quot;highlighter-rouge&quot;&gt;n8 ror (2*r4)&lt;/code&gt;: the 8 bits encoded
number rotated by twice the 4 bits encoded.&lt;/p&gt;

&lt;p&gt;This allows to set immediate values larger than 12 bits but loosing the
possibility to encode some numbers. If you try to set one of those you
will get a &lt;em&gt;invalid constant&lt;/em&gt; error.&lt;/p&gt;

&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;k&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;128000&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;;   r2 = 0x1f400&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;127999&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;;   Invalid operand (KS_ERR_ASM_INVALIDOPERAND)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;More instructions are needed to compute an arbitrary 32 bits number or a
load.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Note: a 32 bit number can be set in two instructions: set the 16 lower
bits with &lt;code class=&quot;highlighter-rouge&quot;&gt;mov rd, #&amp;lt;imm16&amp;gt;&lt;/code&gt; and set the 16 upper bits with &lt;em&gt;move
top&lt;/em&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;movt rd, #&amp;lt;imm16&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;k&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xccdd&lt;/span&gt;      &lt;span class=&quot;c&quot;&gt;;   r2 = 0x0000ccdd&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;movt&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xaabb&lt;/span&gt;     &lt;span class=&quot;c&quot;&gt;;   r2 = 0xaabbccdd&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;registers&quot;&gt;Registers&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;r0&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;r3&lt;/code&gt; are &lt;em&gt;scratch&lt;/em&gt; registers: they are not preserved cross calls
and it is caller’s responsibility to preserve them if needed.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;r4&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;r11&lt;/code&gt; are &lt;em&gt;variable&lt;/em&gt; registers: they must be preserved cross
calls and it is callee’s responsibility to preserve them if needed.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;r9&lt;/code&gt; may play a different roll (platform dependent, known also as
&lt;em&gt;static base&lt;/em&gt; register or &lt;code class=&quot;highlighter-rouge&quot;&gt;sb&lt;/code&gt;) and &lt;code class=&quot;highlighter-rouge&quot;&gt;r11&lt;/code&gt;
may play the roll of &lt;code class=&quot;highlighter-rouge&quot;&gt;fp&lt;/code&gt; so both may not be free for arbitrary usage.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;bl&lt;/code&gt; instruction saves the next instruction (the &lt;em&gt;return address&lt;/em&gt;)
in the &lt;em&gt;link&lt;/em&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;lr&lt;/code&gt; register (&lt;code class=&quot;highlighter-rouge&quot;&gt;r14&lt;/code&gt;) and set the destination address
in the &lt;em&gt;program counter&lt;/em&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;pc&lt;/code&gt; register (&lt;code class=&quot;highlighter-rouge&quot;&gt;r15&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;For “long jumps” and inter-operability, the &lt;em&gt;intra-procedure-call&lt;/em&gt;
registry &lt;code class=&quot;highlighter-rouge&quot;&gt;ip&lt;/code&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;r12&lt;/code&gt;) is used.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;r13&lt;/code&gt; is the &lt;em&gt;stack pointer&lt;/em&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;sp&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Take a look at the
&lt;a href=&quot;https://developer.arm.com/documentation/ihi0042/latest/&quot;&gt;Procedure Call Standard for the Arm Architecture&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;data-instructions&quot;&gt;Data instructions&lt;/h2&gt;

&lt;p&gt;The arithmetic and logical instructions fall in this category; they
manipulate only on registers, never on memory.&lt;/p&gt;

&lt;p&gt;The destination and the first operand are registers while the second can
be a register, and immediate value or a register shifted by another
register or immediate value.&lt;/p&gt;

&lt;p&gt;They can be conditionally executed and conditionally set the status
flags.&lt;/p&gt;

&lt;p&gt;The
&lt;a href=&quot;https://documentation-service.arm.com/static/5ed66080ca06a95ce53f932d?token=&quot;&gt;ARM and Thumb-2 Instruction Set Quick Reference Card&lt;/a&gt;
is your friend!&lt;/p&gt;

&lt;p&gt;There are no division instructions except on ARMv7-R and ARMv7-M and multiplication
operations are more special.&lt;/p&gt;

&lt;p&gt;Because the registers are of 32 bits, the result of a multiplication
cannot fit there: we need 64 bits!&lt;/p&gt;

&lt;p&gt;There are two sets of multiplications: the one that stores the result in
a 32 bits register (&lt;code class=&quot;highlighter-rouge&quot;&gt;mul rd, rm, rs&lt;/code&gt;) and the one that stores it in two
registers (&lt;code class=&quot;highlighter-rouge&quot;&gt;umull rdlo, rdhi, rm rs&lt;/code&gt;) – the extra &lt;code class=&quot;highlighter-rouge&quot;&gt;l&lt;/code&gt; means &lt;code class=&quot;highlighter-rouge&quot;&gt;long&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;memory-instructions-load-and-store&quot;&gt;Memory instructions: load and store&lt;/h2&gt;

&lt;p&gt;Loads and stores are quite similar: they can operate (load/store)
on 32 bits words, half-words (&lt;code class=&quot;highlighter-rouge&quot;&gt;h&lt;/code&gt;) and bytes (&lt;code class=&quot;highlighter-rouge&quot;&gt;b&lt;/code&gt;), zero extended or
signed extended (&lt;code class=&quot;highlighter-rouge&quot;&gt;s&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;sh&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;sb&lt;/code&gt; respectively).&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Note: &lt;code class=&quot;highlighter-rouge&quot;&gt;sb&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;sh&lt;/code&gt; prefixes are not supported for stores.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;indexing&quot;&gt;Indexing&lt;/h3&gt;

&lt;p&gt;In &lt;code class=&quot;highlighter-rouge&quot;&gt;ldr rd, [rn]&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;str rd, [rn]&lt;/code&gt;, the &lt;code class=&quot;highlighter-rouge&quot;&gt;[ ]&lt;/code&gt; denotes dereferencing
and the &lt;code class=&quot;highlighter-rouge&quot;&gt;rn&lt;/code&gt; register is the &lt;em&gt;base register&lt;/em&gt;.&lt;/p&gt;

&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;n&quot;&gt;ldr&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[sp]&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;; r0 = stack top&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is the &lt;em&gt;register indirect addressing&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;An offset can be added to the base register, useful to iterate over an
array like &lt;code class=&quot;highlighter-rouge&quot;&gt;ldr rd, [rn, rm]&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;ldr rd, [rn, #4]&lt;/code&gt;
or even &lt;code class=&quot;highlighter-rouge&quot;&gt;ldr rd, [rn, rm, lsl #4]&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;n&quot;&gt;ldr&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[sp]&lt;/span&gt;                &lt;span class=&quot;c&quot;&gt;; r0 = stack top&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ldr&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;]&lt;/span&gt;            &lt;span class=&quot;c&quot;&gt;; r0 = elem below the top&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ldr&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r3&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;]&lt;/span&gt;            &lt;span class=&quot;c&quot;&gt;; if r3 == 4, same above (sp + 4)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ldr&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;lsl&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;]&lt;/span&gt;    &lt;span class=&quot;c&quot;&gt;; if r3 == 2, same above (sp + (1 &amp;lt;&amp;lt; 2))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is known as &lt;em&gt;pre-index addressing&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Note the use of squares in &lt;code class=&quot;highlighter-rouge&quot;&gt;ldr rd, [rn, rm, lsl #4]&lt;/code&gt;, the instruction
&lt;code class=&quot;highlighter-rouge&quot;&gt;ldr rd, [rn], rm, lsl #4&lt;/code&gt; is a pre-index addressing &lt;em&gt;with post
write-back&lt;/em&gt;: the base address is updated with the final value &lt;em&gt;after&lt;/em&gt;
the load completed.&lt;/p&gt;

&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;n&quot;&gt;ldr&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[sp],&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;     &lt;span class=&quot;c&quot;&gt;; r0 = stack top, sp move 4 down (aka &quot;pop&quot;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ldr&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[sp],&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;     &lt;span class=&quot;c&quot;&gt;; r0 = next stack top, sp move 4 down (aka &quot;pop&quot;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;A &lt;em&gt;pre write-back&lt;/em&gt; variant exists: &lt;code class=&quot;highlighter-rouge&quot;&gt;ldr rd, [rn, rm, lsl #4]!&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;n&quot;&gt;ldr&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;]!&lt;/span&gt;    &lt;span class=&quot;c&quot;&gt;; r0 = sp move 4 down then load (top was skipped)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;Note: &lt;em&gt;pre write-back&lt;/em&gt; makes more sense for stores (aka pushes)
and &lt;em&gt;post write-back&lt;/em&gt; for loads (aka pops)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;c&quot;&gt;; swap r0, r1 using the stack, really slow!&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;]!&lt;/span&gt;    &lt;span class=&quot;c&quot;&gt;; r0 = sp move 4 up then store (aka push)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;]!&lt;/span&gt;    &lt;span class=&quot;c&quot;&gt;; r1 = sp move 4 up then store (aka push)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ldr&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[sp],&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;      &lt;span class=&quot;c&quot;&gt;; r0 = stack top, sp move 4 down (aka &quot;pop&quot;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ldr&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[sp],&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;      &lt;span class=&quot;c&quot;&gt;; r1 = stack top, sp move 4 down (aka &quot;pop&quot;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;PC-relative addressing&lt;/em&gt; allows to load a memory which address is an
offset of the program counter: &lt;code class=&quot;highlighter-rouge&quot;&gt;ldr rd, &amp;lt;label&amp;gt;&lt;/code&gt;. This works only for
loads; useful to load numbers that cannot fit in an &lt;code class=&quot;highlighter-rouge&quot;&gt;imm8&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Not all the combinations of sizes and addressing are possible. Check
the data sheet.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;bulk-loadstore&quot;&gt;Bulk load/store&lt;/h3&gt;

&lt;p&gt;Several registers can be loaded or stored with a single &lt;em&gt;load multiple&lt;/em&gt;
(&lt;code class=&quot;highlighter-rouge&quot;&gt;ldm&lt;/code&gt;) and &lt;em&gt;store multiple&lt;/em&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;stm&lt;/code&gt;) instructions.&lt;/p&gt;

&lt;p&gt;They have a base address, a &lt;em&gt;set&lt;/em&gt; of registers and an &lt;em&gt;indexing affix&lt;/em&gt;
which controls how to “iterate the array/memory”.&lt;/p&gt;

&lt;p&gt;Four indexing exists: increment of the base address after/before accessing
the memory (&lt;code class=&quot;highlighter-rouge&quot;&gt;ia&lt;/code&gt;/&lt;code class=&quot;highlighter-rouge&quot;&gt;ib&lt;/code&gt;) and decrement of the base address after/before
(&lt;code class=&quot;highlighter-rouge&quot;&gt;da&lt;/code&gt;/&lt;code class=&quot;highlighter-rouge&quot;&gt;db&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ia&lt;/code&gt; is the default.&lt;/p&gt;

&lt;p&gt;In short:&lt;/p&gt;

&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;                            &lt;span class=&quot;c&quot;&gt;;              r4, r5, r6, r7&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ldmia&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;r0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r7&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;     &lt;span class=&quot;c&quot;&gt;;  *src++    :  0,  1,  2,  3&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ldmib&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;r0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r7&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;     &lt;span class=&quot;c&quot;&gt;;  *++src    :  1,  2,  3,  4&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ldmda&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;r0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r7&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;     &lt;span class=&quot;c&quot;&gt;;  *src--    : -3, -2, -1,  0&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ldmdb&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;r0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r7&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;     &lt;span class=&quot;c&quot;&gt;;  *--src    : -4, -3, -2, -1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Note the it is a &lt;em&gt;set&lt;/em&gt; of registers, &lt;strong&gt;not a list&lt;/strong&gt; so the order
is not important. The registers are loaded/stored by their index from
&lt;code class=&quot;highlighter-rouge&quot;&gt;r0&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;r15&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For loads the registers are loaded from memory into the registers
in the natural order: from &lt;code class=&quot;highlighter-rouge&quot;&gt;r0&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;r15&lt;/code&gt;. For stores, the registers
are dump into memory in the reverse order.&lt;/p&gt;

&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;            &lt;span class=&quot;o&quot;&gt;&amp;lt;------&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;store&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;direction&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;&amp;lt;------&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stack&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;grows&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;stmdb&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sp&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r1&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;    &lt;span class=&quot;c&quot;&gt;; stack top -&amp;gt; [r0  r1]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ldmia&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sp&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r3&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;    &lt;span class=&quot;c&quot;&gt;; r2 = r0; r3 = r1&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;load&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;direction&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;------&amp;gt;&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;stack&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shrinks&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;----&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The additional &lt;code class=&quot;highlighter-rouge&quot;&gt;!&lt;/code&gt; symbol means update the base register &lt;em&gt;before&lt;/em&gt; the
load or store but it doesn’t change how the load/store works.&lt;/p&gt;

&lt;p&gt;The data sheet says that &lt;code class=&quot;highlighter-rouge&quot;&gt;push&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;pop&lt;/code&gt; have the canonical form of
&lt;code class=&quot;highlighter-rouge&quot;&gt;stmdb sp!, {regs}&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;ldmia sp!, {regs}&lt;/code&gt; respectively.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Note that &lt;code class=&quot;highlighter-rouge&quot;&gt;sp&lt;/code&gt; points to the last value of the stack and &lt;code class=&quot;highlighter-rouge&quot;&gt;stmdb&lt;/code&gt;
decrements the base address (&lt;code class=&quot;highlighter-rouge&quot;&gt;sp&lt;/code&gt;) before doing the store in a &lt;code class=&quot;highlighter-rouge&quot;&gt;push&lt;/code&gt;
while &lt;code class=&quot;highlighter-rouge&quot;&gt;ldmia&lt;/code&gt; increments after the load in a &lt;code class=&quot;highlighter-rouge&quot;&gt;pop&lt;/code&gt;.&lt;/p&gt;

  &lt;p&gt;In both cases the &lt;code class=&quot;highlighter-rouge&quot;&gt;sp&lt;/code&gt; is updated &lt;em&gt;before&lt;/em&gt; (&lt;em&gt;pre write-back&lt;/em&gt;) regardless
of &lt;code class=&quot;highlighter-rouge&quot;&gt;db&lt;/code&gt;/&lt;code class=&quot;highlighter-rouge&quot;&gt;ia&lt;/code&gt;.&lt;/p&gt;

  &lt;p&gt;Note also that the stack grows decrementing the addresses and shrinks
incrementing the addresses.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;alignment&quot;&gt;Alignment&lt;/h3&gt;

&lt;p&gt;The assembler can do it for you: &lt;code class=&quot;highlighter-rouge&quot;&gt;.align n&lt;/code&gt; aligns the code or data to 2^n
bytes.&lt;/p&gt;

&lt;h3 id=&quot;endianess&quot;&gt;Endianess&lt;/h3&gt;

&lt;p&gt;Since version 3, Arm is bi-endian. The instructions are in little
endian but the data access can be little or big endian controlled by the
&lt;code class=&quot;highlighter-rouge&quot;&gt;E&lt;/code&gt; flag of CPSR.&lt;/p&gt;

&lt;h2 id=&quot;conditionals-and-branches&quot;&gt;Conditionals and branches&lt;/h2&gt;

&lt;p&gt;Three branches: &lt;em&gt;branch&lt;/em&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;b&lt;/code&gt;) for &lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;while&lt;/code&gt; constructs,
&lt;em&gt;branch with link&lt;/em&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;bl&lt;/code&gt;) for function call and &lt;em&gt;branch with exchange&lt;/em&gt;
(&lt;code class=&quot;highlighter-rouge&quot;&gt;bx&lt;/code&gt;) for returning from a call or to switch between Arm and Thumb
modes.&lt;/p&gt;

&lt;p&gt;The first two receive a label while the last one operates with a
register.&lt;/p&gt;

&lt;p&gt;More branches exist including &lt;em&gt;branch with change to Jazelle&lt;/em&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;bxj&lt;/code&gt;)
which can switch to a special mode that
&lt;a href=&quot;https://en.wikipedia.org/wiki/Jazelle&quot;&gt;executes Java bytecode&lt;/a&gt; if
supported.&lt;/p&gt;

&lt;p&gt;Due instruction size constrains, labels cannot be in arbitrary
positions. The &lt;code class=&quot;highlighter-rouge&quot;&gt;b&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;bl&lt;/code&gt; requires the destination addresses to be in
a range relative to &lt;code class=&quot;highlighter-rouge&quot;&gt;PC&lt;/code&gt; of [-32MB;+32MB].&lt;/p&gt;

&lt;p&gt;The range shrinks for other flavours of Arm to [-16MB;+16MB] and to
[-252,256].&lt;/p&gt;

&lt;p&gt;The branches can, as other instructions, be conditional executed. So
&lt;code class=&quot;highlighter-rouge&quot;&gt;bne&lt;/code&gt; stands for branch if not equals.&lt;/p&gt;

&lt;p&gt;Two registers have the flags that controls the conditional execution:
the &lt;em&gt;Current Program Status Register&lt;/em&gt;
(CPSR) and the &lt;em&gt;Saved Program Status Register&lt;/em&gt; (SPSR), used during the
interrupt handling.&lt;/p&gt;

&lt;p&gt;The flags are set by special instructions like &lt;em&gt;compare&lt;/em&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;cmp&lt;/code&gt;) or by
data manipulation instructions if the affix &lt;code class=&quot;highlighter-rouge&quot;&gt;s&lt;/code&gt; is added like in &lt;code class=&quot;highlighter-rouge&quot;&gt;adds&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Not all the data manipulation instructions alter all the flags. For
example the &lt;em&gt;overflow&lt;/em&gt; flag (&lt;code class=&quot;highlighter-rouge&quot;&gt;v&lt;/code&gt;) is set by arithmetic operations and
not by bit operations.&lt;/p&gt;

&lt;h3 id=&quot;branching-and-condition-codes&quot;&gt;Branching and condition codes&lt;/h3&gt;

&lt;p&gt;Current Program Status Register (CPSR):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Z: is zero?&lt;/li&gt;
  &lt;li&gt;N: is negative? (is MSB set?)&lt;/li&gt;
  &lt;li&gt;C: is carry bit set? (in a 32 bit register with bits numbered from 0
(LSB) to 31 (MSB), is the 32 bit set?)&lt;/li&gt;
  &lt;li&gt;V: was an arithmetic overflow? (like given a&amp;gt;0 &amp;amp; b&amp;gt;0 and then a+b &amp;lt; 0)&lt;/li&gt;
  &lt;li&gt;E: are we in big endian mode (E==1) or in little endian (E==0)?&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;symbols&quot;&gt;Symbols&lt;/h2&gt;

&lt;p&gt;Global labels are defined with &lt;code class=&quot;highlighter-rouge&quot;&gt;.global label&lt;/code&gt; while local labels
are just &lt;code class=&quot;highlighter-rouge&quot;&gt;.label&lt;/code&gt; (conventionally they begin with &lt;code class=&quot;highlighter-rouge&quot;&gt;L&lt;/code&gt; to denote local
but it is optional)&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.code n&lt;/code&gt; declares the type of code: Arm (&lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt; is 32) or Thumb (&lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt; is
16). Alternative there are &lt;code class=&quot;highlighter-rouge&quot;&gt;.arm&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;.thumb&lt;/code&gt; directives that do the
same.&lt;/p&gt;

&lt;p&gt;These affect all the code below until another directive change the
setting.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.thumb_func&lt;/code&gt; on the other side affects only to the next symbol and it
is required for &lt;em&gt;interworking&lt;/em&gt; Thumb functions.&lt;/p&gt;

&lt;p&gt;Alignment of code and data can be set by &lt;code class=&quot;highlighter-rouge&quot;&gt;.aling n&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;.baling m&lt;/code&gt;
where the former aligns to &lt;code class=&quot;highlighter-rouge&quot;&gt;2^n&lt;/code&gt; bytes and the latter to &lt;code class=&quot;highlighter-rouge&quot;&gt;m&lt;/code&gt; bytes.&lt;/p&gt;

&lt;p&gt;They apply to the next instruction/data, they are not global.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.type funcname %function&lt;/code&gt; declares a function.&lt;/p&gt;

&lt;h2 id=&quot;definition-of-variables&quot;&gt;Definition of variables&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.byte&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;.hword&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;.word&lt;/code&gt; define data, array of items of 1, 2 and 4
bytes each.&lt;/p&gt;

&lt;p&gt;This is handy way to define &lt;em&gt;“variables”&lt;/em&gt; in the code:&lt;/p&gt;

&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;align&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;            &lt;span class=&quot;c&quot;&gt;;  mantain the alignment, always!&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;one_word&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;word&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x41424344&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;one_array_u16&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hword&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;hello&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;hello world!&quot;&lt;/span&gt;   &lt;span class=&quot;c&quot;&gt;;  array of NULL-terminated strings&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;sections&quot;&gt;Sections&lt;/h2&gt;

&lt;p&gt;These are &lt;code class=&quot;highlighter-rouge&quot;&gt;.data&lt;/code&gt; (read-write non-zero initialized data) and &lt;code class=&quot;highlighter-rouge&quot;&gt;.bss&lt;/code&gt;
(read-write zero initialized data).&lt;/p&gt;

&lt;p&gt;Other sections exist as well and they are denoted with &lt;code class=&quot;highlighter-rouge&quot;&gt;.section&lt;/code&gt; like
&lt;code class=&quot;highlighter-rouge&quot;&gt;.section .rodata&lt;/code&gt; for read-only data.&lt;/p&gt;

&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;align&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;magic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;word&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bss&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;space&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Code section is denoted by &lt;code class=&quot;highlighter-rouge&quot;&gt;.text&lt;/code&gt;&lt;/p&gt;

&lt;h1 id=&quot;references&quot;&gt;References&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.coranac.com/tonc/text/asm.htm&quot;&gt;Whirlwind Tour of ARM Assembly&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://documentation-service.arm.com/static/5ed66080ca06a95ce53f932d?token=&quot;&gt;ARM and Thumb-2 Instruction Set Quick Reference Card&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.arm.com/documentation/ihi0042/latest/&quot;&gt;Procedure Call Standard for the Arm Architecture&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- stuff --&gt;

&lt;script&gt;
function fix_asm_syntax(ev) {
    // pip install selectq
    //   cond = (val('text()') == 'blt') | (val('text()') == 'b') | (val('text()').startswith('mov')) | ...
    //   div = sQ.select('div', attr('class').contains('language-nasm'))
    //   xpath = div.select('span', cond)

    // Make some instructions &quot;keywords&quot;
    var xpath = &quot;.//div[contains(@class,'language-nasm')]//span[(((text() = 'blt') or (text() = 'b')) or starts-with(text(), 'mov')) or starts-with(text(), 'ldm') or starts-with(text(), 'stm') or starts-with(text(), 'ldr') or starts-with(text(), 'bx') or starts-with(text(), 'bl') or starts-with(text(), 'bne') or starts-with(text(), 'mvn')]&quot;;
    var elems_iter = document.evaluate(xpath, document, null, XPathResult.ANY_TYPE, null);

    var elems = [];
    var el = elems_iter.iterateNext();
    while (el) {
        elems.push(el);
        el = elems_iter.iterateNext();
    }
    for (var i = 0; i &lt; elems.length; i++) {
        var el = elems[i];
        el.classList.add('k'); // keyword
        el.classList.remove('n'); // noun
    }

    // Remove the 'err' class
    var xpath = &quot;.//div[contains(@class,'language-nasm')]//span[@class='err']&quot;
    var elems_iter = document.evaluate(xpath, document, null, XPathResult.ANY_TYPE, null);

    var elems = [];
    var el = elems_iter.iterateNext();
    while (el) {
        elems.push(el);
        el = elems_iter.iterateNext();
    }
    for (var i = 0; i &lt; elems.length; i++) {
        var el = elems[i];
        el.classList.remove('err'); // syntax error
    }
}

document.addEventListener('DOMContentLoaded', fix_asm_syntax);
&lt;/script&gt;</content><author><name>Gehn</name></author><summary type="html">Speed-reading of Whirlwind Tour of ARM Assembly.</summary></entry><entry><title type="html">QEMUlating a Rasbian (ARM)</title><link href="/book-of-gehn/articles/2020/12/15/Qemulating-Rasbian-ARM.html" rel="alternate" type="text/html" title="QEMUlating a Rasbian (ARM)" /><published>2020-12-15T00:00:00+01:00</published><updated>2020-12-15T00:00:00+01:00</updated><id>/book-of-gehn/articles/2020/12/15/Qemulating-Rasbian-ARM</id><content type="html" xml:base="/book-of-gehn/articles/2020/12/15/Qemulating-Rasbian-ARM.html">&lt;p&gt;Quick how-to download and run a Raspbian Buster (ARM) emulating
the vm with QEMU.&lt;!--more--&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Download &lt;a href=&quot;https://downloads.raspberrypi.org/raspios_lite_armhf/images/raspios_lite_armhf-2020-12-04/&quot;&gt;Raspbian lite image (Buster)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Download &lt;a href=&quot;https://github.com/dhruvvyas90/qemu-rpi-kernel&quot;&gt;kernel image&lt;/a&gt; for
Raspbian (&lt;code class=&quot;highlighter-rouge&quot;&gt;kernel-qemu-*-buster&lt;/code&gt;) and the &lt;em&gt;dtb&lt;/em&gt; file for that kernel
(&lt;code class=&quot;highlighter-rouge&quot;&gt;versatile-pb-buster-*.dtb&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;Install QEMU: &lt;code class=&quot;highlighter-rouge&quot;&gt;apt-get install qemu-system&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;preparing-the-image&quot;&gt;Preparing the image&lt;/h2&gt;

&lt;p&gt;Unpack and check the disk file.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;unzip 2020-12-02-raspios-buster-armhf-lite.zip
Archive:  2020-12-02-raspios-buster-armhf-lite.zip
  inflating: 2020-12-02-raspios-buster-armhf-lite.img

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;fdisk &lt;span class=&quot;nt&quot;&gt;-l&lt;/span&gt; 2020-12-02-raspios-buster-armhf-lite.img
Disk 2020-12-02-raspios-buster-armhf-lite.img: 1.7 GiB, 1858076672 bytes, 3629056 sectors
Units: sectors of 1 &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; 512 &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 512 bytes
Sector size &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;logical/physical&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: 512 bytes / 512 bytes
I/O size &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;minimum/optimal&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: 512 bytes / 512 bytes
Disklabel &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;: dos
Disk identifier: 0x067e19d7

Device                                    Boot  Start     End Sectors Size Id Type
2020-12-02-raspios-buster-armhf-lite.img1        8192  532479  524288 256M  c W95 FAT32 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;LBA&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
2020-12-02-raspios-buster-armhf-lite.img2      532480 3629055 3096576 1.5G 83 Linux
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Mount the second partition. Because the file has 2 partitions, we need
to set the offset where the second starts: the start sector number
multiplied by the size of each sector in bytes.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;mount &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$((&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;532480&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;512&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; ext4 2020-12-02-raspios-buster-armhf-lite.img ~/mnt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;label for=&quot;mn-041d94432f6bed87af4cb4909d1213cf&quot; class=&quot;margin-toggle&quot;&gt; ⊕&lt;/label&gt;&lt;input type=&quot;checkbox&quot; id=&quot;mn-041d94432f6bed87af4cb4909d1213cf&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;marginnote&quot;&gt;Why we need to do this? No idea. May be is related with
&lt;a href=&quot;https://stackoverflow.com/questions/45253755/why-is-the-stack-segment-executable-on-raspberry-pi&quot;&gt;this&lt;/a&gt;
 &lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Comment out any entry of &lt;code class=&quot;highlighter-rouge&quot;&gt;ld.so.preload&lt;/code&gt; adding a &lt;code class=&quot;highlighter-rouge&quot;&gt;#&lt;/code&gt; at the begin of
each line.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; ~/mnt/etc/ld.so.preload
/usr/lib/arm-linux-gnueabihf/libarmmem-&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PLATFORM&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;.so

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo sed&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'s/^.*$/#\0/'&lt;/span&gt; ~/mnt/etc/ld.so.preload
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Check the &lt;code class=&quot;highlighter-rouge&quot;&gt;fstab&lt;/code&gt;. Replace &lt;code class=&quot;highlighter-rouge&quot;&gt;/dev/mmcblk0p1&lt;/code&gt; and
&lt;code class=&quot;highlighter-rouge&quot;&gt;/dev/mmcblk0p2&lt;/code&gt; with &lt;code class=&quot;highlighter-rouge&quot;&gt;/dev/sda1&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;/dev/sda2&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In my case there are not explicit names like &lt;code class=&quot;highlighter-rouge&quot;&gt;/dev/mmcblk0p1&lt;/code&gt;. Instead,
there are UUIDs so I didn’t touch them.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cat ~/mnt/etc/fstab
proc                  /proc    proc    defaults             0   0
PARTUUID=067e19d7-01  /boot    vfat    defaults             0   2
PARTUUID=067e19d7-02  /        ext4    defaults,noatime     0   1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We are done.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;umount ~/mnt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now it is show time!&lt;/p&gt;

&lt;h2 id=&quot;running-the-os&quot;&gt;Running the OS&lt;/h2&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;qemu-system-arm                       &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-M&lt;/span&gt; versatilepb                        &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-cpu&lt;/span&gt; arm1176                          &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; 256                                &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-drive&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;file=2020-12-02-raspios-buster-armhf-lite.img,if=none,index=0,media=disk,format=raw,id=disk0&quot;&lt;/span&gt;  &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-device&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;virtio-blk-pci,drive=disk0,disable-modern=on,disable-legacy=off&quot;&lt;/span&gt;                              &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-net&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;user,hostfwd=tcp::3022-:22&quot;&lt;/span&gt;     &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-dtb&lt;/span&gt; versatile-pb-buster-5.4.51.dtb   &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-kernel&lt;/span&gt; kernel-qemu-5.4.51-buster     &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-append&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'root=/dev/vda2 panic=1'&lt;/span&gt;      &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-no-reboot&lt;/span&gt;                            &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-net&lt;/span&gt; nic                              &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-nographic&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;hostfwd=tcp::3022-:22&lt;/code&gt; tells QEMU to forward TCP connections to the
3022 port from the host to the 22 port on the guest side. More forward
rules can be added.&lt;/p&gt;

&lt;p&gt;Enable ssh (now and on boot); login with &lt;code class=&quot;highlighter-rouge&quot;&gt;pi&lt;/code&gt;/&lt;code class=&quot;highlighter-rouge&quot;&gt;raspberry&lt;/code&gt;. This will
allows us to upload/retrieve files to the vm and have additional
consoles.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ssh&quot;&gt;$ sudo service ssh start
$ sudo update-rc.d ssh enable
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, from your host connect to the vm through the port 3022.&lt;/p&gt;

&lt;p&gt;Install &lt;code class=&quot;highlighter-rouge&quot;&gt;gdbserver&lt;/code&gt; for remote debugging:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;gdbserver
Reading package lists... Done
Building dependency tree
Reading state information... Done
The following NEW packages will be installed:
  gdbserver
0 upgraded, 1 newly installed, 0 to remove and 0 not upgraded.
&amp;lt;...&amp;gt;
Preparing to unpack .../gdbserver_8.2.1-2_armhf.deb ...
Unpacking gdbserver &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;8.2.1-2&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; ...
Setting up gdbserver &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;8.2.1-2&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; ...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;enlarge-the-disk&quot;&gt;Enlarge the disk&lt;/h2&gt;

&lt;p&gt;Optionally, you can expand the disk image to have more room for your
programs.&lt;/p&gt;

&lt;p&gt;First, with QEMU turned off, expand the disk image&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;qemu-img resize 2020-12-02-raspios-buster-armhf-lite.img +1G
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now, turn on the vm and redefine the partition. In my case is the
partition number 2 (&lt;code class=&quot;highlighter-rouge&quot;&gt;/dev/vda2&lt;/code&gt;):&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pi@raspberrypi:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;fdisk /dev/vda

Command &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;m &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;help&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: p
Disk /dev/vda: 2.7 GiB, 2931818496 bytes, 5726208 sectors
Units: sectors of 1 &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; 512 &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 512 bytes
Sector size &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;logical/physical&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: 512 bytes / 512 bytes
I/O size &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;minimum/optimal&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: 512 bytes / 512 bytes
Disklabel &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;: dos
Disk identifier: 0x067e19d7

Device     Boot  Start     End Sectors  Size Id Type
/dev/vda1         8192  532479  524288  256M  c W95 FAT32 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;LBA&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
/dev/vda2       532480 3629055 3096576  1.5G 83 Linux

Command &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;m &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;help&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: d
Partition number &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1,2, default 2&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: 2

Partition 2 has been deleted.

Command &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;m &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;help&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: n
Partition &lt;span class=&quot;nb&quot;&gt;type
   &lt;/span&gt;p   primary &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1 primary, 0 extended, 3 free&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
   e   extended &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;container &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;logical partitions&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
Select &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;default p&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: p
Partition number &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;2-4, default 2&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: 2
First sector &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;2048-5726207, default 2048&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: 532480
Last sector, +/-sectors or +/-size&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;K,M,G,T,P&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;532480-5726207, default 5726207&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;:

Created a new partition 2 of &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Linux'&lt;/span&gt; and of size 2.5 GiB.
Partition &lt;span class=&quot;c&quot;&gt;#2 contains a ext4 signature.&lt;/span&gt;

Do you want to remove the signature? &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Y]es/[N]o: n

Command &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;m &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;help&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: w

The partition table has been altered.
Syncing disks.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Note that &lt;code class=&quot;highlighter-rouge&quot;&gt;fdisk&lt;/code&gt; offered by default the first sector to be 2048. This
is the space &lt;em&gt;before&lt;/em&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;/dev/vda1&lt;/code&gt; and it is too small, only 8kb.&lt;/p&gt;

&lt;p&gt;Instead we want to start &lt;em&gt;after&lt;/em&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;/dev/vda1&lt;/code&gt;, in the same sector that
the original &lt;code class=&quot;highlighter-rouge&quot;&gt;/dev/vda2&lt;/code&gt;: the 532480.&lt;/p&gt;

&lt;p&gt;From there, to the end of the disk: 5726207.&lt;/p&gt;

&lt;p&gt;With the partition expanded, reboot and then update the filesystem:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pi@raspberrypi:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;resize2fs /dev/vda2
resize2fs 1.44.5 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;15-Dec-2018&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
Filesystem at /dev/vda2 is mounted on /&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; on-line resizing required
old_desc_blocks &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 1, new_desc_blocks &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 1
The filesystem on /dev/vda2 is now 649216 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;4k&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; blocks long.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;p&gt;This tutorial setups a &lt;a href=&quot;https://azeria-labs.com/emulate-raspberry-pi-with-qemu/&quot;&gt;Raspbian Jessie in Qemu&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I adapted the steps to use a modern Raspbian Buster image.&lt;/p&gt;

&lt;p&gt;The tutorial is super complete and includes how to enlarge the disk and
setup the network.&lt;/p&gt;

&lt;p&gt;But for the enlarge the disk part, this
&lt;a href=&quot;https://gist.github.com/larsks/3933980&quot;&gt;gist&lt;/a&gt; explains the thing a
little better.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/bradfitz/embiggen-disk&quot;&gt;embiggen-disk&lt;/a&gt; seems to be a
tool to facilite the task.&lt;/p&gt;</content><author><name>Gehn</name></author><summary type="html">Quick how-to download and run a Raspbian Buster (ARM) emulating the vm with QEMU.</summary></entry><entry><title type="html">Self-Licensing</title><link href="/book-of-gehn/articles/2020/12/05/Self-Licensing.html" rel="alternate" type="text/html" title="Self-Licensing" /><published>2020-12-05T00:00:00+01:00</published><updated>2020-12-05T00:00:00+01:00</updated><id>/book-of-gehn/articles/2020/12/05/Self-Licensing</id><content type="html" xml:base="/book-of-gehn/articles/2020/12/05/Self-Licensing.html">&lt;figure&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;img class=&quot;in-index-only&quot; style=&quot;max-width:60%;&quot; alt=&quot;self-licensing&quot; src=&quot;/book-of-gehn/assets/self-licensing/self-licensing-small.png&quot; /&gt;&lt;/figure&gt;
&lt;!--more--&gt;

&lt;figure class=&quot;fullwidth&quot;&gt;&lt;img src=&quot;/book-of-gehn/assets/self-licensing/self-licensing-whole.png&quot; /&gt;&lt;figcaption&gt;Doing good things has a &quot;moral boost&quot; on the self-concept, then a person
subconsciously get &quot;self-indulgent&quot; and makes permissive
in the future to do bad actions.
&lt;br /&gt;
The person no necessary needs to do the good action to have the
&quot;moral boost&quot;: she can commit to do it in the future and that is
enough to have the boost.
&lt;br /&gt;
Even the person does not need to do anything. The boost can be
transferred from a group which the person identify herself
as belonging to.&lt;/figcaption&gt;&lt;/figure&gt;</content><author><name>Gehn</name></author><summary type="html"></summary></entry><entry><title type="html">RC-on-XDP-RX-Queue</title><link href="/book-of-gehn/articles/2020/11/29/RC-on-XDP-RX-Queue.html" rel="alternate" type="text/html" title="RC-on-XDP-RX-Queue" /><published>2020-11-29T00:00:00+01:00</published><updated>2020-11-29T00:00:00+01:00</updated><id>/book-of-gehn/articles/2020/11/29/RC-on-XDP-RX-Queue</id><content type="html" xml:base="/book-of-gehn/articles/2020/11/29/RC-on-XDP-RX-Queue.html">&lt;p&gt;&lt;label for=&quot;mf-482d5a7a07746c31570f73c75afe4260&quot; class=&quot;margin-toggle  in-index-only&quot;&gt;⊕&lt;/label&gt;&lt;input type=&quot;checkbox&quot; id=&quot;mf-482d5a7a07746c31570f73c75afe4260&quot; class=&quot;margin-toggle  in-index-only&quot; /&gt;&lt;span class=&quot;marginnote  in-index-only&quot;&gt;&lt;img style=&quot;max-width:120%;&quot; alt=&quot;RC on RX queue&quot; src=&quot;/book-of-gehn/assets/xdp-rx-rc/rx-rc-queues.png&quot; /&gt;  &lt;br /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Picture this: you’d been developing for six months a network sniffer
using XDP, a kernel &lt;em&gt;in-pass&lt;/em&gt; in Linux.&lt;/p&gt;

&lt;p&gt;Six months and when you are about to release it, you find not one but
three bugs that shake all your understanding of XDP.&lt;/p&gt;

&lt;p&gt;A debugging race against the clock begins.&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;We were hitting three issues in a row:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;RX queue returns addresses with the incorrect offset&lt;/li&gt;
  &lt;li&gt;More packets hold by the application than possible&lt;/li&gt;
  &lt;li&gt;Pointer to &lt;code class=&quot;highlighter-rouge&quot;&gt;NULL&lt;/code&gt; data&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All of them at random times but very often.&lt;/p&gt;

&lt;h2 id=&quot;xdp-rx-queue&quot;&gt;XDP RX queue&lt;/h2&gt;

&lt;p&gt;The XDP RX queue is a lock free single-producer, single-consumer queue
where the kernel plays the role of the producer and the user
application the consumer.&lt;/p&gt;

&lt;p&gt;The kernel pushes addresses (offsets respect the UMEM’s base address)
into the queue that points to the received packets.&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;pop&lt;/em&gt; has three parts:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;the user application calls &lt;code class=&quot;highlighter-rouge&quot;&gt;xsk_ring_cons__peek&lt;/code&gt; to know how many
packets are ready to be consumed.&lt;/li&gt;
  &lt;li&gt;then, for each one a call to &lt;code class=&quot;highlighter-rouge&quot;&gt;xsk_ring_cons__rx_desc&lt;/code&gt; to get the
packet’s descriptor and therefore, its address (&lt;code class=&quot;highlighter-rouge&quot;&gt;addr&lt;/code&gt; field)&lt;/li&gt;
  &lt;li&gt;and finally a call to &lt;code class=&quot;highlighter-rouge&quot;&gt;xsk_ring_cons__release&lt;/code&gt; to mark the descriptors
free to be reused by the producer.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There is no need to &lt;em&gt;process&lt;/em&gt; the packets before &lt;code class=&quot;highlighter-rouge&quot;&gt;xsk_ring_cons__release&lt;/code&gt;:
releasing the packets’ descriptors of the RX does not make the UMEM’s
frames holding the packets free to be reused.&lt;/p&gt;

&lt;p&gt;Only when the packets’ addresses are pushed into the fill queue (FQ)
the frames are available again.&lt;/p&gt;

&lt;figure&gt;&lt;figcaption&gt;&lt;span&gt;Addresses of free frames are consumed from the FQ queue by the kernel (1).
XDP then writes the incoming packet in a free frame (2) and pushes the
address into the RX queue (3). The user application consumes from the RX
queue (4) addresses of packets ready to be read or write (5). When it is
done, the address is pushed back to the FQ for reuse (6).&lt;/span&gt;&lt;/figcaption&gt;&lt;img style=&quot;max-width:80%;&quot; alt=&quot;UMEM cycle&quot; src=&quot;/book-of-gehn/assets/xdp-rx-rc/rx-rc-umem-cycle.png&quot; /&gt;&lt;/figure&gt;

&lt;p&gt;The packet descriptor returned by &lt;code class=&quot;highlighter-rouge&quot;&gt;xsk_ring_cons__rx_desc&lt;/code&gt; has two
attributes: the packet’s address and its length.&lt;/p&gt;

&lt;p&gt;The address is an &lt;code class=&quot;highlighter-rouge&quot;&gt;uint64_t&lt;/code&gt; offset respect the UMEM’s base address.&lt;/p&gt;

&lt;p&gt;&lt;label for=&quot;mf-e34702a9b002fa12328e1ec2277e184c&quot; class=&quot;margin-toggle &quot;&gt;⊕&lt;/label&gt;&lt;input type=&quot;checkbox&quot; id=&quot;mf-e34702a9b002fa12328e1ec2277e184c&quot; class=&quot;margin-toggle &quot; /&gt;&lt;span class=&quot;marginnote &quot;&gt;&lt;img class=&quot;fullwidth&quot; alt=&quot;UMEM frame&quot; src=&quot;/book-of-gehn/assets/xdp-rx-rc/rx-rc-frame.png&quot; /&gt;  &lt;br /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;The UMEM is a memory pool divided evenly by 2048 or 4096 bytes, the
frame size and addresses are aligned to the frame size plus an offset for a
headroom.&lt;/p&gt;

&lt;p&gt;The headroom is an application defined space reserved at the begin of
the frame for whatever the user wants to do. By default it’s zero.&lt;/p&gt;

&lt;p&gt;Well, for some reason the RX queue was returning sometimes addresses
with the wrong offset.&lt;/p&gt;

&lt;h2 id=&quot;more-than-possible&quot;&gt;More than possible&lt;/h2&gt;

&lt;p&gt;The UMEM is a fixed memory pool divided evenly in frames where each
frame holds a packet.&lt;/p&gt;

&lt;p&gt;Therefore the count of packets that the application can hold
before releasing them is fixed (UMEM size / frame size).&lt;/p&gt;

&lt;p&gt;At anytime the count is less than or equal to UMEM size / frame size.&lt;/p&gt;

&lt;p&gt;However the counters of the application shown a different thing: more
packets where entering in the application and were hold before releasing
them than the expected!&lt;/p&gt;

&lt;h2 id=&quot;pointer-to-null&quot;&gt;Pointer to &lt;code class=&quot;highlighter-rouge&quot;&gt;NULL&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;As mentioned before you can prepend metadata to each packet.&lt;/p&gt;

&lt;p&gt;In our case, one of the attributes is a pointer to an external
structure and the pointer is never updated again. Remains constant.&lt;/p&gt;

&lt;p&gt;But to our surprise the pointer changes and leaves pointing to &lt;code class=&quot;highlighter-rouge&quot;&gt;NULL&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;And the code is extraordinary simple and straightforward so there is
no chances to change the pointer to &lt;code class=&quot;highlighter-rouge&quot;&gt;NULL&lt;/code&gt; by an error in the logic.&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;do_work&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pkt_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pkt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;read_packet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// pull from the RX queue&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;pkt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;external_object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pkt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;                 &lt;span class=&quot;c1&quot;&gt;// not NULL&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/* moments later */&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pkt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;field&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// segmentation fault, pkt-&amp;gt;obj is NULL&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;free_packet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pkt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;       &lt;span class=&quot;c1&quot;&gt;// push into the FQ queue&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;No chances.&lt;/p&gt;

&lt;h2 id=&quot;debugging&quot;&gt;Debugging&lt;/h2&gt;

&lt;p&gt;So far we have three unrelated bugs. While possible, it is unlikely that
we are dealing with three &lt;em&gt;independent&lt;/em&gt; bugs.&lt;/p&gt;

&lt;p&gt;They must be related somehow.&lt;/p&gt;

&lt;p&gt;Let’s spin a debugger.&lt;/p&gt;

&lt;h3 id=&quot;counting-before-a-crash&quot;&gt;Counting before a crash&lt;/h3&gt;

&lt;p&gt;How many packets were pulled from the RX queue before getting one crash.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-gdb&quot;&gt;(gdb) b read_packet
(gdb) ignore 1 1000000
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When the bug is detected, GDB will stop and we’ll have the chance to see
how many times the breakpoint was hit before.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-gdb&quot;&gt;(gdb) info break
&amp;lt;...&amp;gt;breakpoint already hit 29 times
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Would this change in function of the UMEM size? Larger UMEMs has more
frames.&lt;/p&gt;

&lt;p&gt;These are the results:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-gdb&quot;&gt;// Minimum size, UMEM can hold 1 frame only
breakpoint already hit 29 times
breakpoint already hit 19 times
breakpoint already hit 23 times

// Slightly larger UMEM, it can hold 16 frames
breakpoint already hit 69 times
breakpoint already hit 43 times
breakpoint already hit 50 times

// 64 frames
breakpoint already hit 111 times
breakpoint already hit 69 times
breakpoint already hit 126 times

// 256 frames
breakpoint already hit 348 times
breakpoint already hit 324 times
breakpoint already hit 1 time
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So, with larger UMEMs is less likely to hit the bug but it is not a hard
rule. In the last test, with the largest UMEM, we hit the bug in the
first try.&lt;/p&gt;

&lt;h3 id=&quot;spontaneous-addresses&quot;&gt;Spontaneous addresses&lt;/h3&gt;

&lt;p&gt;What about the addresses returned by the RX queue? We want to print them
without stopping the process.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-gdb&quot;&gt;(gdb) b do_work.c:16     // after the call to read_packet()
(gdb) commands
&amp;gt; silent
&amp;gt; p pkt - umem-&amp;gt;base
&amp;gt; cont
&amp;gt; end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The segmentation fault due the &lt;code class=&quot;highlighter-rouge&quot;&gt;NULL&lt;/code&gt; pointer happen even when the
addresses had the correct offsets (&lt;code class=&quot;highlighter-rouge&quot;&gt;pkt - umem-&amp;gt;base % frame_size ==
headroom_size&lt;/code&gt;)&lt;/p&gt;

&lt;p&gt;For the ones with incorrect offset, the address most common was the 0
(&lt;code class=&quot;highlighter-rouge&quot;&gt;pkt - umem-&amp;gt;base == 0&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;I hypothesized that I could be putting the address 0 by mistake in the
FQ. Further testing shown that the 0 was never put in FQ but still being
received in the RX queue.&lt;/p&gt;

&lt;p&gt;So the RX queue was returning addresses that I never put in the FQ.
Those are new addresses!&lt;/p&gt;

&lt;p&gt;That explains the issue number 2: the application having more packets
than it should.&lt;/p&gt;

&lt;p&gt;Later, I found that 0 was not the only addresses with an incorrect
offset (issue number 1).&lt;/p&gt;

&lt;h3 id=&quot;poison-values&quot;&gt;Poison values&lt;/h3&gt;

&lt;p&gt;Let’s print the packets as soon as they are read and the external object
is set:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-gdb&quot;&gt;(gdb) set print pretty on

(gdb) b do_work.c:19     // after the call to external_object()
(gdb) commands
&amp;gt; silent
&amp;gt; p *pkt
&amp;gt; cont
&amp;gt; end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The last packet printed before the segmentation fault (issue 3)
was something like this&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
  timestamp = 121212121,
  length = 60,
  data = 0xsomeaddress
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And after the crash, the same packet looked like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
  timestamp = 0,
  length = 60,
  data = 0x0
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So the &lt;code class=&quot;highlighter-rouge&quot;&gt;timestamp&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;data&lt;/code&gt; where zero’d. Was this done by the
application or something else happen?&lt;/p&gt;

&lt;p&gt;Perhaps a rouge &lt;code class=&quot;highlighter-rouge&quot;&gt;memset&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;The fields are initialized to zero by the eBPF filter and overwritten by
the application.&lt;/p&gt;

&lt;p&gt;I decided to set them to non-trivial values, called &lt;em&gt;poison values&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;If a &lt;code class=&quot;highlighter-rouge&quot;&gt;memset&lt;/code&gt; zero’d them, I will notice.&lt;/p&gt;

&lt;p&gt;This is the packet &lt;strong&gt;after&lt;/strong&gt; the crash:&lt;/p&gt;

&lt;p&gt;&lt;label for=&quot;mmkd-2d4ae39ec8ffcd63da15ac50ce0f3e16&quot; class=&quot;margin-toggle&quot;&gt; ⊕&lt;/label&gt;&lt;input type=&quot;checkbox&quot; id=&quot;mmkd-2d4ae39ec8ffcd63da15ac50ce0f3e16&quot; class=&quot;margin-toggle&quot; /&gt;&lt;/p&gt;
&lt;div id=&quot;mk-mmkd-2d4ae39ec8ffcd63da15ac50ce0f3e16&quot;&gt;&lt;span class=&quot;marginnote marginmarkdowncode&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-gdb&quot;&gt;(gdb) p/x pkt-&amp;gt;timestamp
0xdead
&lt;/code&gt;&lt;/pre&gt;If you didn&amp;apos;t realize, the timestamp was not zero&amp;apos;d either.&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;script&gt;$(document).ready(function () {$('#mk-mmkd-2d4ae39ec8ffcd63da15ac50ce0f3e16 &gt; span').insertAfter($('#mmkd-2d4ae39ec8ffcd63da15ac50ce0f3e16'))});&lt;/script&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
  timestamp = 57005,
  length = 60,
  data = 0xbeaf
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So the whole structure was &lt;em&gt;not zero’d but reset&lt;/em&gt;, overwritten by
the eBPF filter when the packet was supposed to be managed by user.&lt;/p&gt;

&lt;p&gt;The three bugs are symptoms of the same unknown problem: the RX queue is
returning invalid addresses, not only without the expected offset but
addresses that belong to packets that the kernel still thinks that are
free.&lt;/p&gt;

&lt;h2 id=&quot;the-real-bug&quot;&gt;The real bug&lt;/h2&gt;

&lt;p&gt;Something was wrong in the RX queue / kernel side so we started to
search this issue in the web.&lt;/p&gt;

&lt;p&gt;A college of mine found a candidate: the fix of a race condition in the
generic receive path.&lt;/p&gt;

&lt;p&gt;eBPF runs in the driver if this one supports it. If not, eBPF is
executed in the kernel and the packets take a slightly larger path from
the network card to user.&lt;/p&gt;

&lt;p&gt;This path is known as the XDP generic path or just XDP generic.&lt;/p&gt;

&lt;p&gt;Remember than the RX is a single-producer queue so it is not thread safe
for concurrent pushes.&lt;/p&gt;

&lt;p&gt;&lt;label for=&quot;mf-482d5a7a07746c31570f73c75afe4260&quot; class=&quot;margin-toggle &quot;&gt;⊕&lt;/label&gt;&lt;input type=&quot;checkbox&quot; id=&quot;mf-482d5a7a07746c31570f73c75afe4260&quot; class=&quot;margin-toggle &quot; /&gt;&lt;span class=&quot;marginnote &quot;&gt;&lt;img style=&quot;max-width:120%;&quot; alt=&quot;RC on RX queue&quot; src=&quot;/book-of-gehn/assets/xdp-rx-rc/rx-rc-queues.png&quot; /&gt;  &lt;br /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;No problem when XDP runs in the driver but when it does in the generic
mode, the kernel may be receiving several packets and pushing them
&lt;strong&gt;concurrently&lt;/strong&gt; into the RX queue.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Unlike driver mode, generic xdp receive could be triggered
by different threads on different CPU cores at the same time
leading to the fill and rx queue breakage. For example, this
could happen while sending packets from two processes to the
first interface of &lt;code class=&quot;highlighter-rouge&quot;&gt;veth&lt;/code&gt; pair while the second part of it is
open with &lt;code class=&quot;highlighter-rouge&quot;&gt;AF_XDP&lt;/code&gt; socket.&lt;/p&gt;

  &lt;p&gt;Need to take a lock for each generic receive to avoid race.”
&lt;cite class=&quot;epigraph&quot;&gt;&lt;a href=&quot;https://github.com/torvalds/linux/commit/bf0bdd1343efbbf65b4d53aef1fce14acbd79d50&quot;&gt;commit bf0bdd13&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The commit fixes the issue
using a &lt;code class=&quot;highlighter-rouge&quot;&gt;spinlock&lt;/code&gt; but the fix was not backported.&lt;/p&gt;

&lt;p&gt;And doing a kernel upgrade is &lt;strong&gt;not an option&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;single-queue&quot;&gt;Single queue&lt;/h2&gt;

&lt;p&gt;&lt;label for=&quot;mn-3f29fa60e45a9506f034bbefc74e782a&quot; class=&quot;margin-toggle&quot;&gt; ⊕&lt;/label&gt;&lt;input type=&quot;checkbox&quot; id=&quot;mn-3f29fa60e45a9506f034bbefc74e782a&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;marginnote&quot;&gt;The article
&lt;a href=&quot;https://blog.packagecloud.io/eng/2016/06/22/monitoring-tuning-linux-networking-stack-receiving-data/&quot;&gt;Monitoring and Tuning the Linux Networking Stack: Receiving Data&lt;/a&gt;
explains this wonderfully.
&lt;br /&gt;
Despite the name, the articule describes all the network stack from the
driver to a TCP/UDP socket.
 &lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Once a packet is received by the network card a interruption is
signaled. The interruption runs briefly and delegates the rest of the
processing to a kernel thread named &lt;code class=&quot;highlighter-rouge&quot;&gt;ksoftirqd/n&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The packet is put by the interruption into a queue to be consumed
by a &lt;strong&gt;single&lt;/strong&gt;  &lt;code class=&quot;highlighter-rouge&quot;&gt;ksoftirqd/n&lt;/code&gt; thread.&lt;/p&gt;

&lt;p&gt;How the kernel can process multiple packet in parallel?&lt;/p&gt;

&lt;p&gt;With multiple queues of course!&lt;/p&gt;

&lt;p&gt;If we cannot upgrade the kernel we must enforce a single producer thread
in the kernel side.&lt;/p&gt;

&lt;p&gt;Configuring the interface to use a &lt;strong&gt;single&lt;/strong&gt; RX queue the kernel
will use a &lt;strong&gt;single&lt;/strong&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;ksoftirqd/n&lt;/code&gt; thread, a single-producer.&lt;/p&gt;

&lt;p&gt;&lt;label for=&quot;mn-b547aee63f894013ca6bf9c81f006fac&quot; class=&quot;margin-toggle&quot;&gt; ⊕&lt;/label&gt;&lt;input type=&quot;checkbox&quot; id=&quot;mn-b547aee63f894013ca6bf9c81f006fac&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;marginnote&quot;&gt;Try &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo ethtool -L &amp;lt;iface&amp;gt; combined 1&lt;/code&gt; if the other does not work.
 &lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Thankfully the configuration is one liner:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;ethtool &lt;span class=&quot;nt&quot;&gt;-L&lt;/span&gt; &amp;lt;iface&amp;gt; rx 1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;conclusions&quot;&gt;Conclusions&lt;/h2&gt;

&lt;p&gt;This was hard. One innocently expects the bugs in the user application,
not in the kernel.&lt;/p&gt;

&lt;p&gt;And most of the time that’s true!&lt;/p&gt;

&lt;p&gt;Debugging confirmed the opposite. And it was not easy.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;do_work&lt;/code&gt; shown is an oversimplification. The real code decouple the
&lt;code class=&quot;highlighter-rouge&quot;&gt;read_packet&lt;/code&gt; from the processing from the &lt;code class=&quot;highlighter-rouge&quot;&gt;free_packet&lt;/code&gt; into a serie
of threads.&lt;/p&gt;

&lt;p&gt;And if debugging a multithreading application is not hard enough, putting a
breakpoint in some places added enough delay that the bug was not
trigger anymore.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Heisenbug&quot;&gt;Heisenbug!&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;GDB’s &lt;code class=&quot;highlighter-rouge&quot;&gt;set non-stop on&lt;/code&gt; helped to reduce the impact: when a breakpoint
is hit by a thread, only that thread is stopped.&lt;/p&gt;

&lt;p&gt;A special thanks to my college Mario that dug into kernel’s git log and
found &lt;a href=&quot;https://github.com/torvalds/linux/commit/bf0bdd1343efbbf65b4d53aef1fce14acbd79d50&quot;&gt;commit bf0bdd13&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;That was the missing piece to solve this puzzle.&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.packagecloud.io/eng/2016/06/22/monitoring-tuning-linux-networking-stack-receiving-data/&quot;&gt;Monitoring and Tuning the Linux Networking Stack: Receiving Data&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.infradead.org/~mchehab/rst_conversion/networking/scaling.html&quot;&gt;Scaling in the Linux Networking Stack&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.kernel.org/doc/html/latest/networking/af_xdp.html&quot;&gt;Linux AF_XDP&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Gehn</name></author><summary type="html">⊕ Picture this: you’d been developing for six months a network sniffer using XDP, a kernel in-pass in Linux. Six months and when you are about to release it, you find not one but three bugs that shake all your understanding of XDP. A debugging race against the clock begins.</summary></entry><entry><title type="html">Qubes OS Networking</title><link href="/book-of-gehn/articles/2020/11/19/Qubes-Networking.html" rel="alternate" type="text/html" title="Qubes OS Networking" /><published>2020-11-19T00:00:00+01:00</published><updated>2020-11-19T00:00:00+01:00</updated><id>/book-of-gehn/articles/2020/11/19/Qubes-Networking</id><content type="html" xml:base="/book-of-gehn/articles/2020/11/19/Qubes-Networking.html">&lt;p&gt;&lt;a href=&quot;https://www.qubes-os.org/&quot;&gt;Qubes OS&lt;/a&gt; has an interesting network system
to isolate more-or-less
trusted &lt;em&gt;application&lt;/em&gt; virtual machines (App) from absolute untrusted
&lt;em&gt;network&lt;/em&gt; VMs (Net).&lt;/p&gt;

&lt;p&gt;&lt;label for=&quot;mf-892e94a4ec9e032aabff049c1567de9b&quot; class=&quot;margin-toggle  in-index-only&quot;&gt;⊕&lt;/label&gt;&lt;input type=&quot;checkbox&quot; id=&quot;mf-892e94a4ec9e032aabff049c1567de9b&quot; class=&quot;margin-toggle  in-index-only&quot; /&gt;&lt;span class=&quot;marginnote  in-index-only&quot;&gt;&lt;img style=&quot;&quot; class=&quot;fullwidth&quot; alt=&quot;IPs&quot; src=&quot;/book-of-gehn/assets/qubes/qubes-ips.png&quot; /&gt;  &lt;br /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;These last ones have the drivers required to handle ethernet and wifi cards
which expose them to a potentially deathly bug lurking in the drivers.&lt;/p&gt;

&lt;p&gt;An additional VM is put in the middle between App VMs and Net VMs. This
absolute trusted &lt;em&gt;proxy&lt;/em&gt; VM serves as a safe firewall (Proxy).&lt;/p&gt;

&lt;p&gt;In this post will explore how these VMs connect and how the packets are
forwarded up and down along this chain of VMs.&lt;!--more--&gt;&lt;/p&gt;

&lt;figure&gt;&lt;figcaption&gt;&lt;span&gt;Three App VMs: one for work, other for personal stuff, both considered
relatively-trusted and one more VM for untrusted stuff, all connected
to the “firewall” VM which forwards the packets to the Net VM.
&lt;br /&gt;
The “firewall” VM is isolated except for
the firewall/routing processing so it is considered trusted while Net VM
is not.&lt;/span&gt;&lt;/figcaption&gt;&lt;img src=&quot;/book-of-gehn/assets/qubes/qubes-network.png&quot; /&gt;&lt;/figure&gt;

&lt;h2 id=&quot;addresses&quot;&gt;Addresses&lt;/h2&gt;

&lt;p&gt;The first obvious thing to notice is the existence of ethernet cards
both in App VM and Proxy VM.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@appvm:# ip address show
2: eth0: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu 1500 qdisc mq state UP group default qlen 1000
    &lt;span class=&quot;nb&quot;&gt;link&lt;/span&gt;/ether 00:16:3e:5e:6c:19 brd ff:ff:ff:ff:ff:ff
    inet 10.137.7.27/32 brd 10.255.255.255 scope global eth0
       valid_lft forever preferred_lft forever
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr class=&quot;slender post-layout small&quot; /&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@proxyvm:# ip address show
2: eth0: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000
    &lt;span class=&quot;nb&quot;&gt;link&lt;/span&gt;/ether 00:16:3e:5e:6c:18 brd ff:ff:ff:ff:ff:ff
    inet 10.137.1.26/32 brd 10.137.1.26 scope global eth0
       valid_lft forever preferred_lft forever
4: vif37.0: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 32
    &lt;span class=&quot;nb&quot;&gt;link&lt;/span&gt;/ether fe:ff:ff:ff:ff:ff brd ff:ff:ff:ff:ff:ff
    inet 10.137.7.1/32 scope global vif37.0
       valid_lft forever preferred_lft forever
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;label for=&quot;mf-892e94a4ec9e032aabff049c1567de9b&quot; class=&quot;margin-toggle &quot;&gt;⊕&lt;/label&gt;&lt;input type=&quot;checkbox&quot; id=&quot;mf-892e94a4ec9e032aabff049c1567de9b&quot; class=&quot;margin-toggle &quot; /&gt;&lt;span class=&quot;marginnote &quot;&gt;&lt;img style=&quot;&quot; class=&quot;fullwidth&quot; alt=&quot;IPs&quot; src=&quot;/book-of-gehn/assets/qubes/qubes-ips.png&quot; /&gt;  &lt;br /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“The virtual interfaces in client VMs are called &lt;code class=&quot;highlighter-rouge&quot;&gt;ethX&lt;/code&gt;,
and are provided by the &lt;code class=&quot;highlighter-rouge&quot;&gt;xen_netfront&lt;/code&gt; kernel module, and
the corresponding interfaces in the Net/Proxy VM are
called &lt;code class=&quot;highlighter-rouge&quot;&gt;vifX.Y&lt;/code&gt; and are created by the &lt;code class=&quot;highlighter-rouge&quot;&gt;xen_netback&lt;/code&gt; module.”
&lt;br /&gt;–&lt;a href=&quot;https://theinvisiblethings.blogspot.com/2011/09/playing-with-qubes-networking-for-fun.html&quot;&gt;Playing with Qubes networking for fun&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;label for=&quot;mn-390925d166339968db0d24a04d1106cc&quot; class=&quot;margin-toggle&quot;&gt; ⊕&lt;/label&gt;&lt;input type=&quot;checkbox&quot; id=&quot;mn-390925d166339968db0d24a04d1106cc&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;marginnote&quot;&gt;The most-right bit of the most-left byte (&lt;code class=&quot;highlighter-rouge&quot;&gt;fe&lt;/code&gt;) is even so it is an unicast address.
&lt;br /&gt;
The second most-right bit of the same byte is odd so it is a locally
administrated address and it means that was arbitrary set by Qubes/Xen.
 &lt;/span&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;ethX&lt;/code&gt; links have different addresses with the same
&lt;a href=&quot;https://hwaddress.com/company/xensource-inc/&quot;&gt;Xensource OUI&lt;/a&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;00:16:3e&lt;/code&gt;
while the &lt;code class=&quot;highlighter-rouge&quot;&gt;vifX.Y&lt;/code&gt; have the same &lt;a href=&quot;https://en.wikipedia.org/wiki/MAC_address&quot;&gt;unicast-locally
administrated&lt;/a&gt; MAC:
&lt;code class=&quot;highlighter-rouge&quot;&gt;fe:ff:ff:ff:ff:ff&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;routing&quot;&gt;Routing&lt;/h2&gt;

&lt;p&gt;Here a ping from the App VM is routed to the Proxy VM which
in turns routes the packet to the Net VM and the outside world
and the response goes back through the same path to the App VM&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@appvm:# ping &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; 1 8.8.8.8
64 bytes from 8.8.8.8: &lt;span class=&quot;nv&quot;&gt;icmp_seq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1 &lt;span class=&quot;nv&quot;&gt;ttl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;53 &lt;span class=&quot;nb&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;12.1 ms
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr class=&quot;slender post-layout small&quot; /&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@appvm:# tcpdump &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; eth0
23:56:57.072295 ARP, Request who-has 10.137.7.1 tell 10.137.7.27, length 28
23:56:57.072330 ARP, Reply 10.137.7.1 is-at fe:ff:ff:ff:ff:ff, length 28
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;icmp omitted&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr class=&quot;slender post-layout small&quot; /&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@proxyvm:# tcpdump &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; vif37.0
23:56:57.072295 ARP, Request who-has 10.137.7.1 tell 10.137.7.27, length 28
23:56:57.072330 ARP, Reply 10.137.7.1 is-at fe:ff:ff:ff:ff:ff, length 28
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;icmp omitted&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;label for=&quot;mf-103c3d5b36df5f56ef8d5565c7424cb1&quot; class=&quot;margin-toggle &quot;&gt;⊕&lt;/label&gt;&lt;input type=&quot;checkbox&quot; id=&quot;mf-103c3d5b36df5f56ef8d5565c7424cb1&quot; class=&quot;margin-toggle &quot; /&gt;&lt;span class=&quot;marginnote &quot;&gt;&lt;img style=&quot;&quot; class=&quot;fullwidth&quot; alt=&quot;ARP&quot; src=&quot;/book-of-gehn/assets/qubes/qubes-arp.png&quot; /&gt;  &lt;br /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;The ARP request/reply is the App VM asking for the MAC address
of its configured gateway, the &lt;code class=&quot;highlighter-rouge&quot;&gt;10.137.7.1&lt;/code&gt; which it is the IP
of the Proxy VM’s &lt;code class=&quot;highlighter-rouge&quot;&gt;vif37.0&lt;/code&gt; interface.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@appvm:# ip route show
default via 10.137.7.1 dev eth0
10.137.7.1 dev eth0 scope &lt;span class=&quot;nb&quot;&gt;link&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;label for=&quot;mn-65007ced5f26024b42b9ad52a272abfb&quot; class=&quot;margin-toggle&quot;&gt; ⊕&lt;/label&gt;&lt;input type=&quot;checkbox&quot; id=&quot;mn-65007ced5f26024b42b9ad52a272abfb&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;marginnote&quot;&gt;You may find &lt;code class=&quot;highlighter-rouge&quot;&gt;REACHABLE&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;STALE&lt;/code&gt;:
the first means that the entry is valid while the second
means it &lt;em&gt;was&lt;/em&gt; valid.
&lt;br /&gt;
If you are quickly enough you may see &lt;code class=&quot;highlighter-rouge&quot;&gt;DELAY&lt;/code&gt;: the learning about the
reachability is still in progress.
 &lt;/span&gt;&lt;/p&gt;

&lt;p&gt;As expected, the App VM saves this in its ARP cache:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@appvm:# ip neigh show
10.137.7.1 dev eth0 lladdr fe:ff:ff:ff:ff:ff STALE
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;label for=&quot;mf-bd5111593d31e56a5d6665b921d712c7&quot; class=&quot;margin-toggle &quot;&gt;⊕&lt;/label&gt;&lt;input type=&quot;checkbox&quot; id=&quot;mf-bd5111593d31e56a5d6665b921d712c7&quot; class=&quot;margin-toggle &quot; /&gt;&lt;span class=&quot;marginnote &quot;&gt;&lt;img style=&quot;&quot; class=&quot;fullwidth&quot; alt=&quot;Ping&quot; src=&quot;/book-of-gehn/assets/qubes/qubes-first-part-ping.png&quot; /&gt;  &lt;br /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Once the App VM knows the Link Layer address (aka &lt;code class=&quot;highlighter-rouge&quot;&gt;lladdr&lt;/code&gt;), it sends
the ICMP echo request, the Proxy VM &lt;em&gt;forwards&lt;/em&gt; it and forwards back
the response.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@appvm:# tcpdump &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; eth0
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;arp omitted&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
23:56:58.014156 IP 10.137.7.27 &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; 8.8.8.8: ICMP &lt;span class=&quot;nb&quot;&gt;echo &lt;/span&gt;request, &lt;span class=&quot;nb&quot;&gt;id &lt;/span&gt;1177, &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;1, length 64
23:56:58.027402 IP 8.8.8.8 &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; 10.137.7.27: ICMP &lt;span class=&quot;nb&quot;&gt;echo &lt;/span&gt;reply, &lt;span class=&quot;nb&quot;&gt;id &lt;/span&gt;1177, &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;1, length 64
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr class=&quot;slender post-layout small&quot; /&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@proxyvm:# tcpdump &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; vif37.0
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;arp omitted&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
23:56:58.019581 IP 10.137.7.27 &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; 8.8.8.8: ICMP &lt;span class=&quot;nb&quot;&gt;echo &lt;/span&gt;request, &lt;span class=&quot;nb&quot;&gt;id &lt;/span&gt;1177, &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;1, length 64
23:56:58.032679 IP 8.8.8.8 &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; 10.137.7.27: ICMP &lt;span class=&quot;nb&quot;&gt;echo &lt;/span&gt;reply, &lt;span class=&quot;nb&quot;&gt;id &lt;/span&gt;1177, &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;1, length 64
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;upstream---downstream-forwarding&quot;&gt;Upstream - downstream forwarding&lt;/h2&gt;

&lt;p&gt;The Proxy VM acts as a router.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@proxyvm:# &lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; /proc/sys/net/ipv4/ip_forward
1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;However the VM will &lt;em&gt;drop&lt;/em&gt; all the packets before forwarding them
with some exceptions:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@proxyvm:# iptables-save &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; raw
:PREROUTING ACCEPT &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;116:43405]
&lt;span class=&quot;nt&quot;&gt;-A&lt;/span&gt; PREROUTING &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; 10.137.7.27/32 &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; vif37.0 &lt;span class=&quot;nt&quot;&gt;-j&lt;/span&gt; DROP
...

root@proxyvm:# iptables-save &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; filter
:FORWARD DROP &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;0:0]
...
&lt;span class=&quot;nt&quot;&gt;-A&lt;/span&gt; FORWARD &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; 10.137.7.27/32 &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; icmp &lt;span class=&quot;nt&quot;&gt;-j&lt;/span&gt; ACCEPT
&lt;span class=&quot;nt&quot;&gt;-A&lt;/span&gt; FORWARD &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; 10.137.7.27/32 &lt;span class=&quot;nt&quot;&gt;-j&lt;/span&gt; ACCEPT
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;label for=&quot;mf-72598e6a47c6eff2d841e635a906ab83&quot; class=&quot;margin-toggle &quot;&gt;⊕&lt;/label&gt;&lt;input type=&quot;checkbox&quot; id=&quot;mf-72598e6a47c6eff2d841e635a906ab83&quot; class=&quot;margin-toggle &quot; /&gt;&lt;span class=&quot;marginnote &quot;&gt;&lt;img style=&quot;&quot; class=&quot;fullwidth&quot; alt=&quot;Spoofing&quot; src=&quot;/book-of-gehn/assets/qubes/qubes-spoofed.png&quot; /&gt;  &lt;br /&gt;The &lt;em&gt;untrusted&lt;/em&gt; VM spoofs the source address simulating a message
&lt;em&gt;from the work&lt;/em&gt; VM; replies will be addresses to it.
&lt;br /&gt;
This spoofing scenario is prevented with the &lt;code class=&quot;highlighter-rouge&quot;&gt;PREROUTING&lt;/code&gt; rules.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;PREROUTING&lt;/code&gt; rule prevents a malicious downstream VM (App VM) to send
packets to a Proxy VM (via &lt;code class=&quot;highlighter-rouge&quot;&gt;vif37.0&lt;/code&gt;) with a spoofed source IP.&lt;/p&gt;

&lt;p&gt;Otherwise a malicious VM could hijack the traffic of its &lt;em&gt;siblings&lt;/em&gt; VMs.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;blockquote&gt;
      &lt;p&gt;Proxy VM will act as a router for a particular App VM &lt;strong&gt;only&lt;/strong&gt;
for the packets coming from &lt;strong&gt;that&lt;/strong&gt; VM.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@proxyvm:# ip route show
default via 10.137.1.1 dev eth0 proto static metric 100
10.137.1.1 dev eth0 proto static scope &lt;span class=&quot;nb&quot;&gt;link &lt;/span&gt;metric 100
10.137.1.26 dev eth0 proto kernel scope &lt;span class=&quot;nb&quot;&gt;link &lt;/span&gt;src 10.137.1.26 metric 100
10.137.7.27 dev vif37.0 scope &lt;span class=&quot;nb&quot;&gt;link &lt;/span&gt;metric 32715
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So the incoming ICMP echo request packet with source IP &lt;code class=&quot;highlighter-rouge&quot;&gt;10.137.7.27&lt;/code&gt;
enters from &lt;code class=&quot;highlighter-rouge&quot;&gt;vif37.0&lt;/code&gt;, it is accepted by the firewall, routed to
&lt;code class=&quot;highlighter-rouge&quot;&gt;eth0&lt;/code&gt; due the default route and goes out.&lt;/p&gt;

&lt;p&gt;Before leaving the Proxy VM, the packet is slightly modified…&lt;/p&gt;

&lt;h2 id=&quot;nat&quot;&gt;NAT&lt;/h2&gt;

&lt;p&gt;The Proxy VM allows routing packets coming from its App VM: we see
this in the firewall exceptions and in the route where the
&lt;strong&gt;specific&lt;/strong&gt; App VM IP is used, &lt;code class=&quot;highlighter-rouge&quot;&gt;10.137.7.27&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;But if we have more Proxy VMs chained ?&lt;/p&gt;

&lt;p&gt;Would the second Proxy VM need the IPs of the first Proxy VM and the
App VM to setup its routes?&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;App VM &amp;lt;-&amp;gt; Proxy VM &amp;lt;-&amp;gt; another Proxy VM &amp;lt;-&amp;gt; ...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In general, any Proxy VM would need the IPs of all the downstream VMs!&lt;/p&gt;

&lt;p&gt;That’s not only tedious but also would leak information: higher VMs
would know more about the topology. A Net VM would know all the IPs
that the environment has.&lt;/p&gt;

&lt;p&gt;However sniffing on Proxy VM’s &lt;code class=&quot;highlighter-rouge&quot;&gt;eth0&lt;/code&gt; shows something different when
the ping of App VM is forwarded:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@proxyvm:# tcpdump &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; eth0
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;arp omitted&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
23:56:58.019649 IP 10.137.1.26 &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; 8.8.8.8: ICMP &lt;span class=&quot;nb&quot;&gt;echo &lt;/span&gt;request, &lt;span class=&quot;nb&quot;&gt;id &lt;/span&gt;1177, &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;1, length 64
23:56:58.032636 IP 8.8.8.8 &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; 10.137.1.26: ICMP &lt;span class=&quot;nb&quot;&gt;echo &lt;/span&gt;reply, &lt;span class=&quot;nb&quot;&gt;id &lt;/span&gt;1177, &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;1, length 64
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The source of the request is set to Proxy VM’s &lt;code class=&quot;highlighter-rouge&quot;&gt;eth0&lt;/code&gt; IP, not App VM ones.&lt;/p&gt;

&lt;figure&gt;&lt;figcaption&gt;&lt;span&gt;Ping to 8.8.8.8 from App VM. Notice how the request is forwarded and in
each &lt;em&gt;hop&lt;/em&gt; the source address is changed (NAT).
&lt;br /&gt;
The reply takes the same path but the source address is &lt;strong&gt;not&lt;/strong&gt; changed.&lt;/span&gt;&lt;/figcaption&gt;&lt;img src=&quot;/book-of-gehn/assets/qubes/qubes-full-ping.png&quot; /&gt;&lt;/figure&gt;

&lt;p&gt;This is due a NAT rule that &lt;strong&gt;masquerade&lt;/strong&gt; the routed traffic:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@proxyvm:# iptables-save &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; nat
...
&lt;span class=&quot;nt&quot;&gt;-A&lt;/span&gt; POSTROUTING &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; vif+ &lt;span class=&quot;nt&quot;&gt;-j&lt;/span&gt; ACCEPT
&lt;span class=&quot;nt&quot;&gt;-A&lt;/span&gt; POSTROUTING &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; lo &lt;span class=&quot;nt&quot;&gt;-j&lt;/span&gt; ACCEPT
&lt;span class=&quot;nt&quot;&gt;-A&lt;/span&gt; POSTROUTING &lt;span class=&quot;nt&quot;&gt;-j&lt;/span&gt; MASQUERADE
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;-o vif+&lt;/code&gt; rule prevents masquerade traffic going downward, back to
the App VM and the &lt;code class=&quot;highlighter-rouge&quot;&gt;-o lo&lt;/code&gt; ignores loopback traffic.&lt;/p&gt;

&lt;p&gt;The rest, including traffic routed to &lt;code class=&quot;highlighter-rouge&quot;&gt;eth0&lt;/code&gt; is masquerade.&lt;/p&gt;

&lt;p&gt;So all Proxy VMs and Net VMs only need to know the IP of the previous
VM and not the full chain.&lt;/p&gt;

&lt;h2 id=&quot;packet-walk-through&quot;&gt;Packet walk-through&lt;/h2&gt;

&lt;p&gt;&lt;label for=&quot;mf-d5c17f5f4e04f6679ce4e7d841e3fa92&quot; class=&quot;margin-toggle &quot;&gt;⊕&lt;/label&gt;&lt;input type=&quot;checkbox&quot; id=&quot;mf-d5c17f5f4e04f6679ce4e7d841e3fa92&quot; class=&quot;margin-toggle &quot; /&gt;&lt;span class=&quot;marginnote &quot;&gt;&lt;object align=&quot;middle&quot; data=&quot;/book-of-gehn/uml/34cfc84b4ad538d0e44973367f2a764c.svg&quot; type=&quot;image/svg+xml&quot;&gt;&lt;/object&gt;  &lt;br /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;App VM does a ping to &lt;code class=&quot;highlighter-rouge&quot;&gt;8.8.8.8&lt;/code&gt;, this is the walk-through&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;App VM
| pkt:         10.137.7.27 &amp;gt; 8.8.8.8: ICMP echo request
|
| route:       default via 10.137.7.1 dev eth0
| eth0:        10.137.7.27 &amp;gt; 8.8.8.8: ICMP echo request

Proxy VM
| vif37.0:     10.137.7.27 &amp;gt; 8.8.8.8: ICMP echo request
| prerouting:  ! -s 10.137.7.27/32 -i vif37.0  =&amp;gt; NO DROP
| filter:      FORWARD -s 10.137.7.27/32  =&amp;gt; ACCEPT
|
| route:       default via 10.137.1.1 dev eth0
| postrouting: POSTROUTING  =&amp;gt; MASQUERADE
|
| eth0:        10.137.1.26 &amp;gt; 8.8.8.8: ICMP echo request

--- request is sent to upstream; reply is received moments later ---

Proxy VM
| eth0:        8.8.8.8 &amp;gt; 10.137.1.26: ICMP echo reply
| (rev nat):   8.8.8.8 &amp;gt; 10.137.7.27: ICMP echo reply
| filter:      FORWARD -s 10.137.7.27/32  =&amp;gt; ACCEPT
|
| route:       10.137.7.27 dev vif37.0
| postrouting: POSTROUTING -o vif+  =&amp;gt; DONT MASQUERADE
|
| vif37.0:     8.8.8.8 &amp;gt; 10.137.7.27: ICMP echo reply

App VM
| eth0:          8.8.8.8 &amp;gt; 10.137.7.27: ICMP echo reply
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;dns&quot;&gt;DNS&lt;/h2&gt;

&lt;p&gt;The DNS traffic is handled like the above but with a twist.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@appvm:# nslookup google.com
Server:     10.137.7.1
Address:    10.137.7.1#53

Non-authoritative answer:
Name:   google.com
Address: 172.217.172.46
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It is interesting to note that App VM queried &lt;code class=&quot;highlighter-rouge&quot;&gt;10.137.7.1&lt;/code&gt; to resolve
the address: the Proxy VM is working as a DNS resolver.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@appvm:# tcpdump &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; eth0
...
23:58:30.214939 IP 10.137.7.27.46734 &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; 10.137.7.1.53: 26595+ A? google.com. &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;28&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
23:58:30.337391 IP 10.137.7.1.53 &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; 10.137.7.27.46734: 26595 1/0/0 A 172.217.172.46 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;44&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr class=&quot;slender post-layout small&quot; /&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@proxyvm:# tcpdump &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; vif37.0
...
23:58:30.220387 IP 10.137.7.27.46734 &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; 10.137.7.1.53: 26595+ A? google.com. &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;28&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
23:58:30.342664 IP 10.137.7.1.53 &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; 10.137.7.27.46734: 26595 1/0/0 A 172.217.172.46 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;44&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;But that’s a lie: there is no DNS resolver in Proxy VM and
the DNS request is forwarded upstream:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@proxyvm:# tcpdump &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; eth0
...
23:58:30.220455 IP 10.137.1.26.46734 &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; 10.137.1.1.53: 26595+ A? google.com. &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;28&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
23:58:30.342616 IP 10.137.1.1.53 &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; 10.137.1.26.46734: 26595 1/0/0 A 172.217.172.46 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;44&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Notice how the source address is masqueraded as we saw with the ping packet
but the &lt;strong&gt;destination address is changed&lt;/strong&gt; too:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;23:58:30.220387 IP 10.137.7.27.46734 &amp;gt; 10.137.7.1.53: 26595+ A? google.com. (28)
                    NAT  |                   |  DNAT
                         V                   V
23:58:30.220455 IP 10.137.1.26.46734 &amp;gt; 10.137.1.1.53: 26595+ A? google.com. (28)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;dnat&quot;&gt;DNAT&lt;/h2&gt;

&lt;p&gt;Nobody is listening on the &lt;code class=&quot;highlighter-rouge&quot;&gt;53 udp&lt;/code&gt; port so the DNAT is applied &lt;em&gt;before&lt;/em&gt; routing.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@proxyvm:# iptables-save -t nat
...
-A PREROUTING -j PR-QBS
-A PR-QBS -d 10.137.7.1/32 -p udp -m udp --dport 53 -j DNAT --to-destination 10.137.1.1
-A PR-QBS -d 10.137.7.1/32 -p tcp -m tcp --dport 53 -j DNAT --to-destination 10.137.1.1
-A PR-QBS -d 10.137.7.254/32 -p udp -m udp --dport 53 -j DNAT --to-destination 10.137.1.254
-A PR-QBS -d 10.137.7.254/32 -p tcp -m tcp --dport 53 -j DNAT --to-destination 10.137.1.254
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Firewall rules also apply&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@proxyvm:# iptables-save -t filter
...
-A FORWARD -s 10.137.7.27/32 -d 10.137.1.1/32 -p udp -m udp --dport 53 -j ACCEPT
-A FORWARD -s 10.137.7.27/32 -d 10.137.1.254/32 -p udp -m udp --dport 53 -j ACCEPT
-A FORWARD -s 10.137.7.27/32 -d 10.137.1.1/32 -p tcp -m tcp --dport 53 -j ACCEPT
-A FORWARD -s 10.137.7.27/32 -d 10.137.1.254/32 -p tcp -m tcp --dport 53 -j ACCEPT
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In the Net VM the destination is replaced by the DNS resolver address
configured:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@netvm:# iptables-save -t nat
...
-A PR-QBS -d 10.137.3.1/32 -p udp -m udp --dport 53 -j DNAT --to-destination 8.8.8.8
-A PR-QBS -d 10.137.3.1/32 -p tcp -m tcp --dport 53 -j DNAT --to-destination 8.8.8.8
-A PR-QBS -d 10.137.3.254/32 -p udp -m udp --dport 53 -j DNAT --to-destination 8.8.8.8
-A PR-QBS -d 10.137.3.254/32 -p tcp -m tcp --dport 53 -j DNAT --to-destination 8.8.8.8
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;future-readings&quot;&gt;Future readings&lt;/h2&gt;

&lt;p&gt;About networking and sysadmin:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://lartc.org/howto/&quot;&gt;Linux Advanced Routing &amp;amp; Traffic Control HOWTO&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.qubes-os.org/doc/vpn/&quot;&gt;Qubes OS VPN&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://bugzilla.netfilter.org/show_bug.cgi?id=693&quot;&gt;Netfilter bug&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.smythies.com/~doug/network/iptables_notes/&quot;&gt;Iptables notes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Qubes related:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.qubes-os.org/news/2019/12/25/qsb-056/&quot;&gt;QSB-056&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/QubesOS/qubes-core-agent-linux/pull/209&quot;&gt;PR 209&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/QubesOS/qubes-core-agent-linux/pull/201&quot;&gt;PR 201&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://linux-ip.net/linux-ip/&quot;&gt;Linux IP&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.linuxjournal.com/content/linux-advanced-routing-tutorial&quot;&gt;Linux Advanced Routing Tutorial&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://theinvisiblethings.blogspot.com/2011/09/playing-with-qubes-networking-for-fun.html&quot;&gt;Playing with Qubes networking for fun&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Gehn</name></author><summary type="html">Qubes OS has an interesting network system to isolate more-or-less trusted application virtual machines (App) from absolute untrusted network VMs (Net). ⊕ These last ones have the drivers required to handle ethernet and wifi cards which expose them to a potentially deathly bug lurking in the drivers. An additional VM is put in the middle between App VMs and Net VMs. This absolute trusted proxy VM serves as a safe firewall (Proxy). In this post will explore how these VMs connect and how the packets are forwarded up and down along this chain of VMs.</summary></entry><entry><title type="html">TL;DR Stylometrics</title><link href="/book-of-gehn/articles/2020/11/12/TLDR-Stylometrics.html" rel="alternate" type="text/html" title="TL;DR Stylometrics" /><published>2020-11-12T00:00:00+01:00</published><updated>2020-11-12T00:00:00+01:00</updated><id>/book-of-gehn/articles/2020/11/12/TLDR-Stylometrics</id><content type="html" xml:base="/book-of-gehn/articles/2020/11/12/TLDR-Stylometrics.html">&lt;p&gt;A ghost writer is a person that writes a document, essay or paper but
the work is presented by other person who &lt;em&gt;claims&lt;/em&gt; to be the author.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://thebestschools.org/resources/detecting-deterring-ghostwritten-papers-best-practices/&quot;&gt;Detecting deterring ghostwritten papers&lt;/a&gt;
is an article written by a (ex)ghost writer and explains what happens
behind the scene when a student pays for this &lt;em&gt;dark&lt;/em&gt; service.&lt;/p&gt;

&lt;p&gt;Would be possible to detect this in an automated way?&lt;/p&gt;

&lt;p&gt;Given a set of documents, could we determine of they were written or not
by the person or people who claim to be the authors?&lt;/p&gt;

&lt;p&gt;This problem is known as &lt;em&gt;authorship attribution&lt;/em&gt; and I will show a few
papers that I read about this, in particular around the concept of
&lt;em&gt;stylometric&lt;/em&gt;, fingerprints that the real author leaves when he or she
writes.&lt;!--more--&gt;&lt;/p&gt;

&lt;h2 id=&quot;application-papers&quot;&gt;Application papers&lt;/h2&gt;

&lt;h3 id=&quot;who-wrote-the-15th-book-of-oz-an-application-of-multivariate-analysis-to-authorship-attribution&quot;&gt;&lt;em&gt;Who Wrote the 15th Book of Oz? An Application of Multivariate Analysis to Authorship Attribution&lt;/em&gt;&lt;/h3&gt;

&lt;p&gt;&lt;label for=&quot;mn-cb67d3fc3ea8c7900e2c19c6455b3c87&quot; class=&quot;margin-toggle&quot;&gt; ⊕&lt;/label&gt;&lt;input type=&quot;checkbox&quot; id=&quot;mn-cb67d3fc3ea8c7900e2c19c6455b3c87&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;marginnote&quot;&gt;Authors:
José Nilo G. Binongo
 &lt;/span&gt;&lt;/p&gt;

&lt;p&gt;An application case for authorship attribution called also &lt;em&gt;a
non-traditional method of attibuting authorship&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The author categories several writings of the universe of Oz to
determine the author of “The Royal Book of Oz” among two options: Lyman
Frank Baum, the creator of the Oz universe and Ruth Plumly Thompson,
a children’s writer that continued the work of Baum.&lt;/p&gt;

&lt;p&gt;The feature selected was the frequency of the &lt;em&gt;functional words&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;“Among the parts of speech, function words are made up of pronouns,
auxiliary verbs, prepositions, conjunctions, determiners, and degree
adverbs. These parts of speech have a more grammatical than
lexical function.”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Some functional words are more specific and inherent has more meaning
(content). Depending of the book these may appear more or less.&lt;/p&gt;

&lt;p&gt;Because the frequency depends of the content and not on the author,
these “more specific” functional words are removed.&lt;/p&gt;

&lt;p&gt;The author of the paper takes the top 50 of the most frequency
functional words to remove these “too specific” words.&lt;/p&gt;

&lt;p&gt;The 50 dimensionality is then mapped (reduced) to 2 using principal
component analysis (PCA).&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A very good paper.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;delta-for-middle-dutchauthor-and-copyist-distinction-in-walewein&quot;&gt;&lt;em&gt;Delta for Middle DutchAuthor and Copyist Distinction in Walewein&lt;/em&gt;&lt;/h3&gt;

&lt;p&gt;&lt;label for=&quot;mn-47b5c192238a83b00d58d7e388fd5e25&quot; class=&quot;margin-toggle&quot;&gt; ⊕&lt;/label&gt;&lt;input type=&quot;checkbox&quot; id=&quot;mn-47b5c192238a83b00d58d7e388fd5e25&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;marginnote&quot;&gt;Authors:
Karina van Dalen-Oskam and Joris van Zundert&lt;br /&gt;
Huygens Instituut, The Hague, The Netherlands
 &lt;/span&gt;&lt;/p&gt;

&lt;p&gt;The Walewein text is known to be written by one author and then
continued by a second author.&lt;/p&gt;

&lt;p&gt;The authors of the paper used stylometric to determine where one author
picked and continued the work of the former.&lt;/p&gt;

&lt;p&gt;The authors decided to lemmatize the text.&lt;/p&gt;

&lt;p&gt;Lemmatize a text means to take the words and rewrite them in a
normalized way. For example words like “play, playing, played” are
mapped to a single “play” verb.&lt;/p&gt;

&lt;p&gt;Then they used Yule’s K and Burrows’ Delta metrics over a rolling window
of 2000 lines of text.&lt;/p&gt;

&lt;p&gt;Yule’s Characteristic K is a estimation of the richness of a text:
text with a lot of repeated words are said to be less rich while the
text with less repeated words &lt;em&gt;has more vocabulary&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;K is defines as:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;K = 10^4 \left( -\frac{1}{N} + \sum_{i = 1}^{N} V_i \left( \frac{i}{N} \right)^2 \right)&lt;/script&gt;

&lt;p&gt;where &lt;script type=&quot;math/tex&quot;&gt;N&lt;/script&gt; is the count of words in a text and &lt;script type=&quot;math/tex&quot;&gt;V_i&lt;/script&gt; the number of words that
appeared &lt;script type=&quot;math/tex&quot;&gt;i&lt;/script&gt; times.&lt;/p&gt;

&lt;p&gt;Burrows’ Delta models a set of documents as a matrix.&lt;/p&gt;

&lt;p&gt;Each document is modeled as a algebraic vector where each position
represent a word and contains the frequency of that word.&lt;/p&gt;

&lt;p&gt;The frequencies per document are normalizes so they sum up 1.&lt;/p&gt;

&lt;p&gt;The vectors are then stacked forming a matrix having in each column the
frequencies of a particular word in all the documents.&lt;/p&gt;

&lt;p&gt;Each column is normalized such the mean or average of them is 0 and the
standard deviation is 1. A procedure common in ML.&lt;/p&gt;

&lt;p&gt;The Delta between to documents is then the Manhattan distance between
their two vectors.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Interesting reading.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;survey-papers&quot;&gt;Survey Papers&lt;/h2&gt;

&lt;h3 id=&quot;a-framework-for-authorship-identification-of-online-messages-writing-style-features-and-classification-techniques&quot;&gt;&lt;em&gt;A Framework for Authorship Identification of Online Messages: Writing-Style Features and Classification Techniques&lt;/em&gt;&lt;/h3&gt;

&lt;p&gt;&lt;label for=&quot;mn-b48ce9474da8f40658f5b76ff772b623&quot; class=&quot;margin-toggle&quot;&gt; ⊕&lt;/label&gt;&lt;input type=&quot;checkbox&quot; id=&quot;mn-b48ce9474da8f40658f5b76ff772b623&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;marginnote&quot;&gt;Authors:
Rong Zheng, Jiexun Li, Hsinchun Chen, and Zan Huang
&lt;br /&gt;
New York University, University of Arizona
 &lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;“key-word-based features are widely
accepted to be ineffective in author identification in multiple-
topic corpora”&lt;/em&gt; But there are exception if the content-words denotes a
particular knowledge about a topic that could be correlated with the
author.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;An example of this is the “Walewein” paper where the 100-150 most common words
which are principally composed of content-words were able to
distinguish the two authors of a text while the 1-50 most common
words, principally function-words, were able to detect the scribes
that also modified the text.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The paper summarizes the features used by several papers (2006):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;lexical: average word/sentence length, vocabulary richness&lt;/li&gt;
  &lt;li&gt;syntactic: freq of words, use of punctuation&lt;/li&gt;
  &lt;li&gt;structural: paragraph length, indentation, greeting/farewell
statements&lt;/li&gt;
  &lt;li&gt;content-specific: freq of keywords&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;The structural seems very interesting. Opening phrases (like
“In my opinion I …”) could be very characteristic of the author.
The use of listing (the ones that begin with &lt;code class=&quot;highlighter-rouge&quot;&gt;'-'&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;'*'&lt;/code&gt;) also.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Table 3 describes more of these in details.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;“Structural features and
content-specific features showed particular discriminating
capabilities for authorship identification on online messages.
SVM and neural networks outperformed C4.5 and neural
networks significantly for the authorship-identification task.”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Most of the cited papers analyze very small set of documents (~80)
and a very small set of authors (~4).&lt;/p&gt;

&lt;p&gt;Some exceptions have 300 or even 1200 documents and 7, 10 and 45
authors.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Quite small&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;“Content-specific features
improved the performance of the three classifiers signifi-
cantly for the English datasets […] e.g., some people preferred check
as a payment method; some people mostly sell Microsoft products).”&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;I don’t think that this is true in general (like a characteristic of
the author). The dataset used in the paper has a very broad topic so
it is possible that some people wrote only about a sub topic and other
people about another hence having the discriminant.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Very good paper to read it again.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;a-prototype-for-authorship-attribution-studies&quot;&gt;&lt;em&gt;A Prototype for Authorship Attribution Studies&lt;/em&gt;&lt;/h3&gt;

&lt;p&gt;&lt;label for=&quot;mn-a6f31899fcb4cbffa5658e393bd7c6d3&quot; class=&quot;margin-toggle&quot;&gt; ⊕&lt;/label&gt;&lt;input type=&quot;checkbox&quot; id=&quot;mn-a6f31899fcb4cbffa5658e393bd7c6d3&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;marginnote&quot;&gt;Authors:
Patrick Juola, John Sofko, Patrick Brennan
&lt;br /&gt;
Duquesne University
 &lt;/span&gt;&lt;/p&gt;

&lt;p&gt;A survey of the current state of the art. It points to some other
resources and shows some results but nothing concrete.&lt;/p&gt;

&lt;p&gt;The authors proposes a three-phases “framework” to develop/research
stylometrics: canonization, determination of the event set and
statistical inference.&lt;/p&gt;

&lt;p&gt;In short: extract text from the media, remove spurious noise and apply
other kind of filtering/normalization (canonization); from there select
the features to analyze and possible eliminate uninteresting events
(determination) and finally perform a machine learning technique
(inference).&lt;/p&gt;

&lt;p&gt;A current practice these days.&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;Java Graphical Authorship Attribution Program&lt;/em&gt; or JGAAP program is
mentioned.&lt;/p&gt;

&lt;p&gt;A substantial part of the paper focus in uninteresting parts of JGAAP
like the Graphical User Interface (GUI), saving/loading files and high
level code description.&lt;/p&gt;

&lt;h2 id=&quot;more-theoretical-like-papers&quot;&gt;More Theoretical-like Papers&lt;/h2&gt;

&lt;h3 id=&quot;computational-constancy-measures-of-textsyules-k-and-rényis-entropy&quot;&gt;&lt;em&gt;Computational Constancy Measures of TextsYule’s K and Rényi’s Entropy&lt;/em&gt;&lt;/h3&gt;

&lt;p&gt;&lt;label for=&quot;mn-9a4c931ad2e89915322e8fd7ea82c154&quot; class=&quot;margin-toggle&quot;&gt; ⊕&lt;/label&gt;&lt;input type=&quot;checkbox&quot; id=&quot;mn-9a4c931ad2e89915322e8fd7ea82c154&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;marginnote&quot;&gt;Authors:
Kumiko Tanaka-Ishii, Shunsuke Aihara
&lt;br /&gt;
Kyushu University, JST-PRESTO, Gunosy Inc.
 &lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;“A constancy measure for a natural language text is […] a computational
measure that converges to a value for a certain amount of text and remains
invariant for any larger size […], its value could be considered as a
text characteristic.”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Yule’s K is defined as&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;K = C \left( -\frac{1}{N} + \sum_{i = 1}^{imax} V(i,N) \left( \frac{i}{N} \right)^2 \right)&lt;/script&gt;

&lt;!-- _a --&gt;

&lt;p&gt;where &lt;script type=&quot;math/tex&quot;&gt;N&lt;/script&gt; is the total number of words in the text, &lt;script type=&quot;math/tex&quot;&gt;V(N)&lt;/script&gt; the number of
distinct words, &lt;script type=&quot;math/tex&quot;&gt;V(i,N)&lt;/script&gt; the number of words that appear &lt;script type=&quot;math/tex&quot;&gt;i&lt;/script&gt; times and &lt;script type=&quot;math/tex&quot;&gt;imax&lt;/script&gt;
the largest frequency of a word.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;We could use &lt;script type=&quot;math/tex&quot;&gt;N&lt;/script&gt; as &lt;script type=&quot;math/tex&quot;&gt;imax&lt;/script&gt; because for the &lt;script type=&quot;math/tex&quot;&gt;i&lt;/script&gt; that &lt;script type=&quot;math/tex&quot;&gt;% &lt;![CDATA[
imax &lt; i &lt;= N %]]&gt;&lt;/script&gt; the
value of &lt;script type=&quot;math/tex&quot;&gt;V(i,N)&lt;/script&gt; is zero but using &lt;script type=&quot;math/tex&quot;&gt;imax&lt;/script&gt; directly is faster.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The constant &lt;script type=&quot;math/tex&quot;&gt;C&lt;/script&gt; was defined by Yule to &lt;script type=&quot;math/tex&quot;&gt;10^4&lt;/script&gt;.&lt;/p&gt;

&lt;p&gt;Golcher’s V is defines as &lt;script type=&quot;math/tex&quot;&gt;k/N&lt;/script&gt; where &lt;script type=&quot;math/tex&quot;&gt;N&lt;/script&gt; is the length of the string and &lt;script type=&quot;math/tex&quot;&gt;k&lt;/script&gt;
the number of inner nodes of a Patricia suffix tree of the text.&lt;/p&gt;

&lt;p&gt;The paper describes other metrics including &lt;script type=&quot;math/tex&quot;&gt;H_a&lt;/script&gt;, the
Renyi Entropy, a generalization of the Shannon entropy defined as:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;H_a(X) = \frac{1}{1-a} \textrm{log} \left( \sum_{\forall X} P(X)^a \right)&lt;/script&gt;

&lt;!-- _a --&gt;

&lt;p&gt;Where &lt;script type=&quot;math/tex&quot;&gt;a &gt;= 0&lt;/script&gt;, &lt;script type=&quot;math/tex&quot;&gt;a != 1&lt;/script&gt;, &lt;script type=&quot;math/tex&quot;&gt;P(X)&lt;/script&gt; the probability function of &lt;script type=&quot;math/tex&quot;&gt;X&lt;/script&gt;.&lt;/p&gt;

&lt;p&gt;When &lt;script type=&quot;math/tex&quot;&gt;a == 0&lt;/script&gt;, it reduces to &lt;script type=&quot;math/tex&quot;&gt;H_0(X) = 1 \textrm{log} \left( \sum_{\forall X} 1 \right)&lt;/script&gt; &lt;!-- _a --&gt;
&lt;script type=&quot;math/tex&quot;&gt;H_0(X) = \textrm{log} ( |X| )&lt;/script&gt;  (aka indicates the number of distinct occurrences
of &lt;script type=&quot;math/tex&quot;&gt;X&lt;/script&gt;)&lt;/p&gt;

&lt;p&gt;When a approximates to 1 (limit), &lt;script type=&quot;math/tex&quot;&gt;H&lt;/script&gt; reduces to Shannon entropy.&lt;/p&gt;

&lt;p&gt;For &lt;script type=&quot;math/tex&quot;&gt;H_2(X)&lt;/script&gt; the authors shown that &lt;em&gt;”[&lt;script type=&quot;math/tex&quot;&gt;H_2&lt;/script&gt;] immediately shows the
essential equivalence to Yule’s K&lt;/em&gt;”&lt;/p&gt;

&lt;p&gt;The authors shown empirically that &lt;script type=&quot;math/tex&quot;&gt;H_2&lt;/script&gt; converges to a value for texts of
between &lt;script type=&quot;math/tex&quot;&gt;10^2&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;10^4&lt;/script&gt; words/characters depending of &lt;script type=&quot;math/tex&quot;&gt;H_2&lt;/script&gt; was defined for
words or characters respectively.&lt;/p&gt;

&lt;p&gt;The authors also shown that &lt;script type=&quot;math/tex&quot;&gt;H_2&lt;/script&gt; is not a good discriminant for
authorship: &lt;em&gt;“Examining the nature of the convergent values
revealed that K does not possess the discriminatory power
of author identification as Yule had hoped.”&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;script type=&quot;math/tex&quot;&gt;H_2&lt;/script&gt; or Yule’s Y converges fast so it could be applied to short
terms. Defined as it was in the paper (for words and characters) it will
not work for authorship attribution but it may work under a different
feature set (input) instead of words/characters.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;cross-entropy-and-linguistic-typology&quot;&gt;&lt;em&gt;Cross-entropy and linguistic typology&lt;/em&gt;&lt;/h3&gt;

&lt;p&gt;&lt;label for=&quot;mn-1b94b4105603fbc0c879e45143c4bae1&quot; class=&quot;margin-toggle&quot;&gt; ⊕&lt;/label&gt;&lt;input type=&quot;checkbox&quot; id=&quot;mn-1b94b4105603fbc0c879e45143c4bae1&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;marginnote&quot;&gt;Authors:
Patrick Juola
&lt;br /&gt;
University of Oxford
 &lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Describes briefly the application of the &lt;em&gt;cross-entroy&lt;/em&gt; for language
categorization.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;“Cross-entropy appears to be a meaningful and easy to measure method of
determining “linguistic distance” that is more sensitive
to variances in lexical choice, word usage, style, and syntax than
conventional methods.”&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;understanding-and-explaining-delta-measures-for-authorship-attribution&quot;&gt;&lt;em&gt;Understanding and explaining Delta measures for authorship attribution&lt;/em&gt;&lt;/h3&gt;

&lt;p&gt;&lt;label for=&quot;mn-664d528323819d10d626a3b18d01af37&quot; class=&quot;margin-toggle&quot;&gt; ⊕&lt;/label&gt;&lt;input type=&quot;checkbox&quot; id=&quot;mn-664d528323819d10d626a3b18d01af37&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;marginnote&quot;&gt;Authors:
Stefan Evert, Thomas Proisl, Fotis Jannidis, Isabella Reger, Steffen Pielström, Christof Schöch and Thorsten Vitt
&lt;br /&gt;
Friedrich-Alexander-Universität Erlangen-Nürnberg and Julius-Maximilians-Universität Würzburg
 &lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Describes and analyzes Burrows’ Delta distance based on the Manhattan
distance and different variations of it including Euclidean, Linear and
Cosine distances.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A paper to review later if required.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;good-but-no-so-good-papers&quot;&gt;Good but no so good papers&lt;/h2&gt;

&lt;h3 id=&quot;whos-at-the-keyboard-authorship-attribution-in-digital-evidence-investigations&quot;&gt;&lt;em&gt;Who’s At The Keyboard? Authorship Attribution in Digital Evidence Investigations&lt;/em&gt;&lt;/h3&gt;

&lt;p&gt;&lt;label for=&quot;mn-7f2d5b81fd11d24979a2de1ad87a167c&quot; class=&quot;margin-toggle&quot;&gt; ⊕&lt;/label&gt;&lt;input type=&quot;checkbox&quot; id=&quot;mn-7f2d5b81fd11d24979a2de1ad87a167c&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;marginnote&quot;&gt;Authors:
Carole E. Chaski.
&lt;br /&gt;
Institute for Linguistic Evidence, Inc
 &lt;/span&gt;&lt;/p&gt;

&lt;p&gt;The paper presents the results of some other researches. The one that
scored the highest authorship attribution was:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;“counting particular errors or idiosyncrasies and inputting this into a
statistical classification procedure &lt;a href=&quot;using&quot;&gt;…&lt;/a&gt; supported vector machines
(SVM) and C4.5 analysis”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The paper names these as &lt;em&gt;“stylemarkers”&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;For stylometrics, the paper mentions references to other papers where
they used
&lt;em&gt;“word length, phrase length, sentence length, vocabulary frequency,
distribution of words of different lengths”&lt;/em&gt; as features and SVM (with
accuracy that oscillated between 46% and 100%), discriminant function analysis
(accuracy between 87% and 89%) and using neural networks (accuracy 84%).&lt;/p&gt;

&lt;p&gt;The dataset for the paper consisted on several writings from several
authors about 10 different topics.&lt;/p&gt;

&lt;p&gt;While the paper takes into consideration some biases like age and gender
the 10 topics are to my opinion biased to “personal topics”.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;“Describe a traumatic or terrifying event in your life and how you
overcame it.”&lt;/em&gt; is an example.&lt;/p&gt;

&lt;p&gt;The paper uses the ALIAS software and restricts the analysis of the
samples to only &lt;em&gt;“punctuation, syntactic and lexical”&lt;/em&gt; features.&lt;/p&gt;

&lt;p&gt;The punctuation consists of counting the &lt;em&gt;placement&lt;/em&gt; of the punctuation
marks: at the end of clause (EOC), at the end of phrase (EOP) and in the
middle of a word (like the dash in “re-invent” or the apostrophe in
“don’”)&lt;/p&gt;

&lt;p&gt;The author claims that this is &lt;em&gt;“slighter better performance”&lt;/em&gt; than the
counting of the punctuation mark alone where the placement is ignored.&lt;/p&gt;

&lt;p&gt;The syntactic structures refers to the way that a “common” construction
deviates to an “uncommon” construction.&lt;/p&gt;

&lt;p&gt;The “common/uncommon” are named “unmarked/marked” constructions. This is
the technical name and “common/uncommon” are the names that I gave them
due my lack of expertise in the topic.&lt;/p&gt;

&lt;p&gt;A “common” (unmarked) construction could be “how old are you?”. In
English we could say “old” and “young” but it is very common to use
“old” for some reason. The “uncommon” (marked) would be “how young are
you?”.&lt;/p&gt;

&lt;p&gt;The “common/uncommon” does not limit to words but to phrases as well, no
only in literal phrases but in the &lt;em&gt;syntax&lt;/em&gt; of these.&lt;/p&gt;

&lt;p&gt;“the white house” follows the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;adjetive&amp;gt; &amp;lt;noun&amp;gt;&lt;/code&gt; “common” pattern.&lt;/p&gt;

&lt;p&gt;While it is clear that these “common/uncommon” feature could spot
non-native writers, it is not very clear to me how to use it for
authorship attribution in general.&lt;/p&gt;

&lt;p&gt;Perhaps seeing repetitive patterns in the “uncommon” parts of a phrase?
Like “the big white house” and “the white big house”: the order of the
adjetives may leave a fingerprint of the author.&lt;/p&gt;

&lt;p&gt;The last feature is lexical features (word lengths, and stuff like
that). The paper distinguishes between functional and content
words but use both.&lt;/p&gt;

&lt;p&gt;These features (punctuation, syntactic and lexical) are extracted using
ALIAS. Sadly it is a paid, closed source software (done by the author of
the paper) and the dataset seems to be closed too.&lt;/p&gt;

&lt;p&gt;For the “machine learning” part, the paper used linear
discriminant function analysis (DFA).&lt;/p&gt;

&lt;h3 id=&quot;determination-of-writing-styles-to-detect-similarities-in-digital-documents&quot;&gt;&lt;em&gt;Determination of writing styles to detect similarities in digital documents&lt;/em&gt;&lt;/h3&gt;

&lt;p&gt;&lt;label for=&quot;mn-9ccc45f89ad680ed51e1d714e206d0eb&quot; class=&quot;margin-toggle&quot;&gt; ⊕&lt;/label&gt;&lt;input type=&quot;checkbox&quot; id=&quot;mn-9ccc45f89ad680ed51e1d714e206d0eb&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;marginnote&quot;&gt;Authors:
Yohandri Ril Gil, Yuniet del Carmen Toll Palma, Eddy Fonseca Lahens
&lt;br /&gt;
University of Information Sciences, Havana
 &lt;/span&gt;&lt;/p&gt;

&lt;p&gt;The paper describes a stylometric mathematical model:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;frequency of stop words: articles, prepositions, adverbs and conjunctions.&lt;/li&gt;
  &lt;li&gt;level of difficulty: what’s the &lt;em&gt;education level&lt;/em&gt; required to understand
the text. It uses the Flesch-Kincaid index (English only).&lt;/li&gt;
  &lt;li&gt;richness of vocabulary&lt;/li&gt;
  &lt;li&gt;mean sentence length&lt;/li&gt;
  &lt;li&gt;mean word length&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The authors claim that
&lt;em&gt;“The proposed method for determining writing styles can be used in a
scenario where it is necessary to describe documents whose authorship
has been validated.”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;But the “discussion and conclusions” section talks more about the
underlying motivation for a person to do plagiarism than about the
model.&lt;/p&gt;

&lt;p&gt;They also claim&lt;/p&gt;

&lt;p&gt;&lt;em&gt;“The extraction of the style vector marks the
difference between authors, whether or not they cover the same topic. By
applying the proposed mathematical model to a considerable set of documents,
it was found that trends really do exist when it comes to drafting, and
that such trends put a stamp of authenticity onto a document.”&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;In a personal opinion, I’m have my doubts about these statements based
on the few numbers shown in the paper.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;stylometry-based-approach-for-detecting-writing-style-changes-in-literary-texts&quot;&gt;&lt;em&gt;Stylometry-based Approach for Detecting Writing Style Changes in Literary Texts&lt;/em&gt;&lt;/h3&gt;

&lt;p&gt;&lt;label for=&quot;mn-f8e1942b92f3abedb3baf092d6bf26b5&quot; class=&quot;margin-toggle&quot;&gt; ⊕&lt;/label&gt;&lt;input type=&quot;checkbox&quot; id=&quot;mn-f8e1942b92f3abedb3baf092d6bf26b5&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;marginnote&quot;&gt;Authors:
Helena Gómez-Adorno, Juan-Pablo Posadas-Duran, Germán Rios-Toledo, Grigori Sidorov, Gerardo Sierra
&lt;br /&gt;
Instituto Politécnico Nacional, Mexico; Universidad Nacional Autónoma de México, Mexico; Instituto Politécnico Nacional (IPN), Mexico; Centro Nacional de Investigación y Desarrollo Tecnológico, Mexico
 &lt;/span&gt;&lt;/p&gt;

&lt;p&gt;The paper compares the performance of different algorithms (Logistic Regression
and two implementation of Support Vector Machine) and different sets of
features (statistics like mean, average of word length, sentences
length, punctuation and stop words among others) to classify
writings of different authors.&lt;/p&gt;

&lt;p&gt;The Figure 1 of the paper shows that&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;using SVM over punctuation feature only yields a very good results.&lt;/li&gt;
  &lt;li&gt;using Logistic Regression as default for other combination of
features yields very good results.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;While those are interesting facts, there is no clear evidence of it (a
very small corpus was used).&lt;/p&gt;

&lt;p&gt;The paper shows that some authors’ styles are more sensible to some
features and algorithms than others.&lt;/p&gt;

&lt;p&gt;From a total of 6 authors:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;“[Punctuation-based models] classified
the writing stage of a work above 70% of the times
for two authors […], [in the case of other two authors] 
the combination
of phraseology-and punctuation-based features obtained the best
performance. The combination
of all types of features obtained the best
performance for [the remaining two authors]”&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;It doesn’t look solid.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;what-kicked-everything&quot;&gt;What kicked everything&lt;/h2&gt;

&lt;h3 id=&quot;detecting-deterring-ghostwritten-papers-best-practices&quot;&gt;&lt;em&gt;Detecting deterring ghostwritten papers, best practices&lt;/em&gt;&lt;/h3&gt;

&lt;p&gt;&lt;label for=&quot;mn-3a83cf25a5fc5d5c304eb2a1b6131218&quot; class=&quot;margin-toggle&quot;&gt; ⊕&lt;/label&gt;&lt;input type=&quot;checkbox&quot; id=&quot;mn-3a83cf25a5fc5d5c304eb2a1b6131218&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;marginnote&quot;&gt;Authors:
David A. Tomar (Ed Dante)
 &lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://thebestschools.org/resources/detecting-deterring-ghostwritten-papers-best-practices/&quot;&gt;It is what started this.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Classify the students paying for a ghost writer in three categories:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Non native language: students that they need to write an essay in a
foreign language, let’s say English. The student knows that he/she will have
more opportunities to succeed if the essay is written by a native
English speaker.&lt;/li&gt;
  &lt;li&gt;Composition/Research deficient students: students that, while they
can speak and write in the target language, they have hard time to
write an essay or doing the homework.&lt;/li&gt;
  &lt;li&gt;Lazy students: they prefer to pay for a service instead of doing the
work.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Detecting a ghost writer is hard and having solid proof of it is harder.&lt;/p&gt;

&lt;p&gt;The best strategy is to disallow the possibility from the begin making
the decision of hiring a ghost writer much expensive, riskier.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;In-class writing: the students write during the class so it is hard
for a ghost writer to be there&lt;/li&gt;
  &lt;li&gt;Multi-draft process: have a periodic review with the students and
check the evolution of the essay/work.&lt;/li&gt;
  &lt;li&gt;Personalization of the subject matter: use topics that are more
personal and can be bind to the author. That part is important, the
subject must be bound to the student in some verificable way
otherwise a ghost writer could just write a personal subject about
him/her!&lt;/li&gt;
  &lt;li&gt;Original course materials: make the topic have something very unique.
Don’t repeat yourself.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These should be combined and adapted to the particular class.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Having 1o1 meetings with the students randomly chosen to discuss the
implementation details of a work makes the “multi-draft process”
scalable.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Exit interviews (interviews that happen when the student does a
final submission) are an example of that.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A very nice article to read.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;resources&quot;&gt;Resources&lt;/h2&gt;

&lt;p&gt;NLTK’s &lt;a href=&quot;https://www.nltk.org/_modules/nltk/tokenize/punkt.html&quot;&gt;punkt&lt;/a&gt; module: Punkt Sentence Tokenizer&lt;/p&gt;

&lt;p&gt;&lt;em&gt;“This tokenizer divides a text into a list of sentences
by using an unsupervised algorithm to build a model for abbreviation
words, collocations, and words that start sentences.  It must be
trained on a large collection of plaintext in the target language
before it can be used.”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;“The NLTK data package includes a pre-trained Punkt tokenizer for
English.”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;It is used to determine when a period marks the end of a sentence and
when it doesn’t and things like that.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/euske/pdfminer/&quot;&gt;PDFMiner&lt;/a&gt; (community): parser for PDF files&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://cligs.hypotheses.org/577&quot;&gt;Blog post&lt;/a&gt; that explains how to call R code from Python using the &lt;code class=&quot;highlighter-rouge&quot;&gt;rpy2&lt;/code&gt;
module. In particular how to call the R package &lt;code class=&quot;highlighter-rouge&quot;&gt;stylo&lt;/code&gt; from Python&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/computationalstylistics/stylo&quot;&gt;Stylo&lt;/a&gt;: R package for stylometric analyses&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/evllabs/JGAAP&quot;&gt;JGAAP&lt;/a&gt;: Java Graphical Authorship Attribution Program is a tool to allow
nonexperts to use cutting edge machine learning techniques on text
attribution problems&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.nltk.org/&quot;&gt;NTLK&lt;/a&gt;: Natural Language Toolkit for Python&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://stanfordnlp.github.io/stanza/index.html&quot;&gt;Stanza&lt;/a&gt;: A Python NLP Package for Many Human Languages&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/chrisspen/weka&quot;&gt;Weka&lt;/a&gt;: a toolset/framework for ML like skilearn but with a GUI. It is
very interesting.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://cschoel.github.io/nolds/nolds.html&quot;&gt;Nolds&lt;/a&gt;: Python package with algorithms to analyze random sequences (signals,
market time series, text perhaps?)&lt;/p&gt;

&lt;h2 id=&quot;some-other-resources&quot;&gt;Some other resources&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/Hassaan-Elahi/Writing-Styles-Classification-Using-Stylometric-Analysis&quot;&gt;Identifying Different Writing Styles in a Document Intrinsically Using Stylometric Analysis&lt;/a&gt;
It is a single Python file with several metrics poorly documented.
It could be useful to see the code for some cases because it has a lot
of metrics, most of them mentioned in the paper of Zheng.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.turnitin.com/&quot;&gt;Turnitin&lt;/a&gt;: among other stuff, it has a plagiarism detection.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://aliastechnology.com&quot;&gt;ALIAS&lt;/a&gt; is program developed by Carole E.
Chaski for &lt;em&gt;“lemmatizing, computing
lexical frequency ranking, calculating lexical, sentential and text lengths,
punctuation-edge counting, Part-Of-Speech-tagging (POS-tagging) , n-graph
and n-gram sorting, and markedness subcategorizing”&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Sadly it is a paid, closed source software.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;n-gram is used to denote the sequence of &lt;script type=&quot;math/tex&quot;&gt;n&lt;/script&gt; elements like words or
POS tags while n-graph denotes sequences of &lt;script type=&quot;math/tex&quot;&gt;n&lt;/script&gt; characters.&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name>Gehn</name></author><summary type="html">A ghost writer is a person that writes a document, essay or paper but the work is presented by other person who claims to be the author. Detecting deterring ghostwritten papers is an article written by a (ex)ghost writer and explains what happens behind the scene when a student pays for this dark service. Would be possible to detect this in an automated way? Given a set of documents, could we determine of they were written or not by the person or people who claim to be the authors? This problem is known as authorship attribution and I will show a few papers that I read about this, in particular around the concept of stylometric, fingerprints that the real author leaves when he or she writes.</summary></entry><entry><title type="html">Kasiski Test - Part I</title><link href="/book-of-gehn/articles/2020/10/11/Kasiski-Test-Part-I.html" rel="alternate" type="text/html" title="Kasiski Test - Part I" /><published>2020-10-11T00:00:00+02:00</published><updated>2020-10-11T00:00:00+02:00</updated><id>/book-of-gehn/articles/2020/10/11/Kasiski-Test-Part-I</id><content type="html" xml:base="/book-of-gehn/articles/2020/10/11/Kasiski-Test-Part-I.html">&lt;p&gt;The tricky part of breaking the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Vigen%C3%A8re_cipher&quot;&gt;Vigenere cipher&lt;/a&gt;
consists in finding the length of the key.&lt;/p&gt;

&lt;p&gt;We discussed this in the
&lt;a href=&quot;/book-of-gehn/articles/2018/05/01/Breaking-Vigenere.html&quot;&gt;breaking Vigenere&lt;/a&gt;
post.&lt;/p&gt;

&lt;p&gt;In that occasion we used the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Hamming_distance&quot;&gt;Hamming distance&lt;/a&gt; and
the &lt;a href=&quot;/book-of-gehn/articles/2019/10/04/Index-of-Coincidence.html&quot;&gt;Index of Coincidence&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;But another method existed much before the development of the IC around 1922.&lt;/p&gt;

&lt;p&gt;In 1863, Kasiski published a method to guess the length of the secret
key, method that we know today as the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Kasiski_examination&quot;&gt;Kasiski test&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let’s explore a &lt;script type=&quot;math/tex&quot;&gt;O(\vert s \vert)&lt;/script&gt; solution with a worst case of
&lt;script type=&quot;math/tex&quot;&gt;O(\vert s \vert^2)&lt;/script&gt;&lt;!--more--&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-naive-solution&quot;&gt;The naive solution&lt;/h2&gt;

&lt;p&gt;The Kasiski test consists in finding repeated ngrams in the ciphertext
and measure the distance between them.&lt;/p&gt;

&lt;p&gt;If there are repeated ngram in the plaintext that were &lt;em&gt;leaked&lt;/em&gt; in the
ciphertext, that means that the secret key was also repeated exactly in
that part.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;                     repeated ngrams
                /----------/-----------/
    ptext:      69 63 65 20 69 63 65 20 62 61 62 79
    kstream:    73 6F 6E 67 73 6F 6E 67 73 6F 6E 67  (key = 73 6F 6E 67)
    ctext:      1A 0C 0B 47 1A 0C 0B 47 11 0E 0C 1E
                \----------\-----------\
                     repeated ngrams
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;label for=&quot;mn-7aa1bda5b4adf142e467684892c97b5d&quot; class=&quot;margin-toggle&quot;&gt; ⊕&lt;/label&gt;&lt;input type=&quot;checkbox&quot; id=&quot;mn-7aa1bda5b4adf142e467684892c97b5d&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;marginnote&quot;&gt;It is perfectly possible to find repeated ngrams randomly,
just by luck. Those are the “exceptions”.
&lt;br /&gt;
I will talk about that in the second-part post.
 &lt;/span&gt;&lt;/p&gt;

&lt;p&gt;With some exceptions, the distance between two repeated ngrams in
the ciphertext must be then a multiple of the length of the key.&lt;/p&gt;

&lt;p&gt;But for a particular ngram of length &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt;, finding all the repeated
ngrams requires scan the whole string, an effort of
&lt;script type=&quot;math/tex&quot;&gt;O(\vert s \vert)&lt;/script&gt;, proportional to the size of the input string.&lt;/p&gt;

&lt;p&gt;Repeating the process for all the ngrams of length &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt; yields
&lt;script type=&quot;math/tex&quot;&gt;O(\vert s \vert^2)&lt;/script&gt;.&lt;/p&gt;

&lt;p&gt;And that’s only for &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt;. Repeating everything again for
the ngrams of length &lt;code class=&quot;highlighter-rouge&quot;&gt;n+1&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;n+2&lt;/code&gt; and so
on blows up quickly to &lt;script type=&quot;math/tex&quot;&gt;O(\vert s \vert^3)&lt;/script&gt;.&lt;/p&gt;

&lt;p&gt;No no, we can improve this.&lt;/p&gt;

&lt;h2 id=&quot;the-strategy&quot;&gt;The strategy&lt;/h2&gt;

&lt;h3 id=&quot;as_ngram_repeated_positions-algorithm&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;as_ngram_repeated_positions&lt;/code&gt; algorithm&lt;/h3&gt;

&lt;p&gt;We build the list of &lt;em&gt;all&lt;/em&gt; repeated ngrams of length &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt; using
hashing in &lt;script type=&quot;math/tex&quot;&gt;O(\vert s \vert)&lt;/script&gt; and not &lt;script type=&quot;math/tex&quot;&gt;O(\vert s \vert^2)&lt;/script&gt;.&lt;/p&gt;

&lt;h3 id=&quot;merge_overlaping-algorithm&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;merge_overlaping&lt;/code&gt; algorithm&lt;/h3&gt;

&lt;p&gt;&lt;label for=&quot;mn-b1a4c559712afcfe68a3cc14a228a82b&quot; class=&quot;margin-toggle&quot;&gt; ⊕&lt;/label&gt;&lt;input type=&quot;checkbox&quot; id=&quot;mn-b1a4c559712afcfe68a3cc14a228a82b&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;marginnote&quot;&gt;This is an example of
&lt;a href=&quot;https://en.wikipedia.org/wiki/Dynamic_programming&quot;&gt;dynamic
programming&lt;/a&gt;.
Take a look of
&lt;a href=&quot;assets/kasiski/MatthewBerntsenBUThesis.7z&quot;&gt;Automating the Cracking of Simple Ciphers, by Matthew C. Berntsen&lt;/a&gt;
for a similar idea.
 &lt;a href=&quot;assets/kasiski/perf_kasiski.py&quot;&gt;&lt;i class=&quot;fab fa-github&quot;&gt;&lt;/i&gt; code&lt;/a&gt;
 &lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Then, we build the list of the repeated ngrams of length &lt;code class=&quot;highlighter-rouge&quot;&gt;n+1&lt;/code&gt;
&lt;em&gt;reusing&lt;/em&gt; the finding of the previous step.&lt;/p&gt;

&lt;p&gt;This will require &lt;script type=&quot;math/tex&quot;&gt;O(g)&lt;/script&gt; where &lt;script type=&quot;math/tex&quot;&gt;g&lt;/script&gt; is the size of the list built in the
previous step.&lt;/p&gt;

&lt;p&gt;While &lt;script type=&quot;math/tex&quot;&gt;O(g) = O(\vert s \vert)&lt;/script&gt; in the worst case, it is expected to
find &lt;em&gt;very few&lt;/em&gt; repeated ngrams of length &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt; so in the practice
&lt;script type=&quot;math/tex&quot;&gt;O(g) \ll O(\vert s \vert)&lt;/script&gt;.&lt;/p&gt;

&lt;h3 id=&quot;deltas_from_positions-algorithm&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;deltas_from_positions&lt;/code&gt; algorithm&lt;/h3&gt;

&lt;p&gt;The distances between the ngrams found can also be found in &lt;script type=&quot;math/tex&quot;&gt;O(g)&lt;/script&gt;.&lt;/p&gt;

&lt;p&gt;The naive implementation would require &lt;script type=&quot;math/tex&quot;&gt;O(g^2)&lt;/script&gt; but we can improve it
a little.&lt;/p&gt;

&lt;h3 id=&quot;frequency_of_deltas-algorithm-aka-the-main&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;frequency_of_deltas&lt;/code&gt; algorithm (aka the main)&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;frequency_of_deltas&lt;/code&gt; will combine all the previous algorithms.&lt;/p&gt;

&lt;p&gt;It can be done roughly in
&lt;script type=&quot;math/tex&quot;&gt;O(\vert s \vert) + O(g^m)&lt;/script&gt; where &lt;script type=&quot;math/tex&quot;&gt;m&lt;/script&gt; is the count of iterations that we
repeat &lt;code class=&quot;highlighter-rouge&quot;&gt;merge_overlaping&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In the worst case, &lt;script type=&quot;math/tex&quot;&gt;O(g^m)&lt;/script&gt; behaves as &lt;script type=&quot;math/tex&quot;&gt;O(\vert s \vert^2)&lt;/script&gt; and
&lt;code class=&quot;highlighter-rouge&quot;&gt;frequency_of_deltas&lt;/code&gt; will be quadratic.&lt;/p&gt;

&lt;p&gt;But as we said, we don’t expect to find many repeated ngrams so the term
&lt;script type=&quot;math/tex&quot;&gt;O(g^m)&lt;/script&gt; will be negligible and &lt;code class=&quot;highlighter-rouge&quot;&gt;frequency_of_deltas&lt;/code&gt; will remain linear.&lt;/p&gt;

&lt;p&gt;We have the strategy, now we need the correct tools.&lt;/p&gt;

&lt;h2 id=&quot;data-structures&quot;&gt;Data structures&lt;/h2&gt;

&lt;p&gt;We will use the following data structures:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;dictionaries: with &lt;script type=&quot;math/tex&quot;&gt;O(1)&lt;/script&gt; for insertion or update of a key.&lt;/li&gt;
  &lt;li&gt;lists: with &lt;script type=&quot;math/tex&quot;&gt;O(1)&lt;/script&gt; for append and &lt;script type=&quot;math/tex&quot;&gt;O(n)&lt;/script&gt; for iteration.&lt;/li&gt;
  &lt;li&gt;default-dictionaries: like the dictionaries but with the handy
shortcut to create and add an entry in the dictionary if the key
requested is not present.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Python is not the fastest language but it has all the tools needed.&lt;/p&gt;

&lt;p&gt;Let’s start!&lt;/p&gt;

&lt;h2 id=&quot;repeating-ngram-list---as_ngram_repeated_positions-algorithm&quot;&gt;Repeating ngram list - &lt;code class=&quot;highlighter-rouge&quot;&gt;as_ngram_repeated_positions&lt;/code&gt; algorithm&lt;/h2&gt;

&lt;p&gt;We are interested in to find all the positions of every single repeated
ngram in the text.&lt;/p&gt;

&lt;p&gt;Focus only on the ngrams of 2 characters for now.&lt;/p&gt;

&lt;p&gt;&lt;label for=&quot;mf-8c277780c7574cdaab2a355d0f29039e&quot; class=&quot;margin-toggle &quot;&gt;⊕&lt;/label&gt;&lt;input type=&quot;checkbox&quot; id=&quot;mf-8c277780c7574cdaab2a355d0f29039e&quot; class=&quot;margin-toggle &quot; /&gt;&lt;span class=&quot;marginnote &quot;&gt;&lt;img class=&quot;fullwidth&quot; alt=&quot;&quot; src=&quot;/book-of-gehn/assets/kasiski/kasiski_scan_count.png&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;We need to count how many instances of the same ngram are, so we can
know which are unique; and we need to track their position, so
we can later know the distance between them.&lt;/p&gt;

&lt;p&gt;Storing every ngram instance in memory is expensive (for a 2 characters
ngram you will have to store twice the source string).&lt;/p&gt;

&lt;p&gt;A simple solution is to use an id: different ngrams will have different
ids while the instances of the &lt;em&gt;same&lt;/em&gt; ngram will have the same id.&lt;/p&gt;

&lt;figure&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;img style=&quot;max-width:45%;&quot; src=&quot;/book-of-gehn/assets/kasiski/kasiski_scan_positions.png&quot; /&gt;&lt;/figure&gt;

&lt;p&gt;The following Python fragment summarizes the above:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# input: s, the original text
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id_of_ngram&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pos_sorted&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ngram_cnt_by_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;defaultdict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ngram_cnt_by_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# id==0 is reserved for deletions, see later
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ngram&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;enumerate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ngrams&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)):&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id_of_ngram&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setdefault&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ngram&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id_of_ngram&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;pos_sorted&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ngram_cnt_by_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;label for=&quot;mf-3dfbcfb6f6d4f6825eea9bcbb994fbfe&quot; class=&quot;margin-toggle &quot;&gt;⊕&lt;/label&gt;&lt;input type=&quot;checkbox&quot; id=&quot;mf-3dfbcfb6f6d4f6825eea9bcbb994fbfe&quot; class=&quot;margin-toggle &quot; /&gt;&lt;span class=&quot;marginnote &quot;&gt;&lt;img class=&quot;fullwidth&quot; alt=&quot;&quot; src=&quot;/book-of-gehn/assets/kasiski/as_ngram_repeated_positions.png&quot; /&gt;  &lt;br /&gt;Input-size/time-taken relationship of &lt;code class=&quot;highlighter-rouge&quot;&gt;as_ngram_repeated_positions&lt;/code&gt;.
 &lt;a href=&quot;assets/kasiski/perf_kasiski.py&quot;&gt;&lt;i class=&quot;fab fa-github&quot;&gt;&lt;/i&gt; code&lt;/a&gt;
&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;For a string of &lt;script type=&quot;math/tex&quot;&gt;\vert s \vert&lt;/script&gt; characters the algorithm generates
a list of &lt;script type=&quot;math/tex&quot;&gt;\vert s \vert&lt;/script&gt;
tuples. If chosen the data structures correctly, the algorithm runs
in &lt;script type=&quot;math/tex&quot;&gt;O(\vert s \vert)&lt;/script&gt; (linear time and space).&lt;/p&gt;

&lt;p&gt;One final step remains: once we have the list we need to filter out
any unique ngram (those that have a counter of less than 2).&lt;/p&gt;

&lt;p&gt;This is also linear.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;pos_sorted&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos_sorted&lt;/span&gt;
                      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ngram_cnt_by_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;figure&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;img style=&quot;max-width:60%;&quot; src=&quot;/book-of-gehn/assets/kasiski/kasiski_scan_count_filter.png&quot; /&gt;&lt;/figure&gt;

&lt;p&gt;The final result is a list of tuples &lt;code class=&quot;highlighter-rouge&quot;&gt;(position, id)&lt;/code&gt; with the
positions of the ngrams and their identifiers &lt;em&gt;sorted&lt;/em&gt; by their
position.&lt;/p&gt;

&lt;p&gt;The algorithm can be generalized to find all the non-unique ngrams of
length &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt; changing &lt;code class=&quot;highlighter-rouge&quot;&gt;s.ngrams(2)&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;s.ngrams(n)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The trick is how to build the list of ngrams of &lt;code class=&quot;highlighter-rouge&quot;&gt;n+1&lt;/code&gt;
length &lt;em&gt;reusing&lt;/em&gt; the ngrams of length &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt; found by the above algorithm.&lt;/p&gt;

&lt;h2 id=&quot;superior-ngram-order---merge_overlaping-algorithm&quot;&gt;Superior ngram order - &lt;code class=&quot;highlighter-rouge&quot;&gt;merge_overlaping&lt;/code&gt; algorithm&lt;/h2&gt;

&lt;p&gt;The idea is that two ngrams &lt;code class=&quot;highlighter-rouge&quot;&gt;g_1&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;g_2&lt;/code&gt; of &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt; characters
at positions &lt;code class=&quot;highlighter-rouge&quot;&gt;p_1&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;p_2&lt;/code&gt; in the original string can be &lt;em&gt;merged&lt;/em&gt;
and build a ngram of &lt;code class=&quot;highlighter-rouge&quot;&gt;n+1&lt;/code&gt; bytes at &lt;code class=&quot;highlighter-rouge&quot;&gt;p_1&lt;/code&gt; if and only if
&lt;code class=&quot;highlighter-rouge&quot;&gt;p_1 + 1 == p_2&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In other words, they are consecutive.&lt;/p&gt;

&lt;figure&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;img style=&quot;max-width:60%;&quot; src=&quot;/book-of-gehn/assets/kasiski/kasiski_merge.png&quot; /&gt;&lt;/figure&gt;

&lt;p&gt;A merged ngram not necessary means that it is a repeated ngram but
we know that any repeated ngram will be a merged one.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;id_of_ngram&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ngram_cnt_by_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;defaultdict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ngram_cnt_by_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;enumerate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;zip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos_sorted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos_sorted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:])):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pcur&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pnex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nex&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pcur&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pnex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;pos_sorted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# delete later (index 0 is special)
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# the id of the merged ngram is formed by the ids of the
&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;# original pair of ngrams.
&lt;/span&gt;        &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id_of_ngram&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setdefault&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id_of_ngram&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;pos_sorted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pcur&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;# new ngram
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;ngram_cnt_by_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# the last position P1 always is &quot;deleted&quot; because there is
# not P2 such P1 + 1 == P2 *and* P1 &amp;lt; P2 (basically because there
# are no more positions after P1)
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos_sorted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;During the scan we also count how many ngrams we built: unique
ngrams are filtered later in linear time removing the false positives.&lt;/p&gt;

&lt;p&gt;&lt;label for=&quot;mf-0466b2ac93c53d43876c9893ceda0d57&quot; class=&quot;margin-toggle &quot;&gt;⊕&lt;/label&gt;&lt;input type=&quot;checkbox&quot; id=&quot;mf-0466b2ac93c53d43876c9893ceda0d57&quot; class=&quot;margin-toggle &quot; /&gt;&lt;span class=&quot;marginnote &quot;&gt;&lt;img class=&quot;fullwidth&quot; alt=&quot;&quot; src=&quot;/book-of-gehn/assets/kasiski/merge_overlaping.png&quot; /&gt;  &lt;br /&gt;Input-size/time-taken relationship of &lt;code class=&quot;highlighter-rouge&quot;&gt;merge_overlaping&lt;/code&gt;.
 &lt;a href=&quot;assets/kasiski/perf_kasiski.py&quot;&gt;&lt;i class=&quot;fab fa-github&quot;&gt;&lt;/i&gt; code&lt;/a&gt;
&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;pos_sorted&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos_sorted&lt;/span&gt;
                      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ngram_cnt_by_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;merge_overlaping&lt;/code&gt; is a linear operation in terms of the initial &lt;code class=&quot;highlighter-rouge&quot;&gt;pos_sorted&lt;/code&gt;
list not in terms of the length of the input strings.&lt;/p&gt;

&lt;p&gt;In the practice this means that &lt;code class=&quot;highlighter-rouge&quot;&gt;merge_overlaping&lt;/code&gt; – &lt;script type=&quot;math/tex&quot;&gt;O(g)&lt;/script&gt; – will be
faster than &lt;code class=&quot;highlighter-rouge&quot;&gt;as_ngram_repeated_positions&lt;/code&gt; – &lt;script type=&quot;math/tex&quot;&gt;O(\vert s \vert)&lt;/script&gt;.&lt;/p&gt;

&lt;h2 id=&quot;computing-the-gaps---deltas_from_positions-algorithm&quot;&gt;Computing the gaps - &lt;code class=&quot;highlighter-rouge&quot;&gt;deltas_from_positions&lt;/code&gt; algorithm&lt;/h2&gt;

&lt;p&gt;Now that we have the position of each repeated ngram we want to
calculate the distance between them.&lt;/p&gt;

&lt;p&gt;We are interested in the distance between the &lt;em&gt;same&lt;/em&gt; ngrams.&lt;/p&gt;

&lt;p&gt;This is because we assume that the same repeated ngram in a ciphertext
is due the encryption of the same plaintext &lt;em&gt;and&lt;/em&gt; the repeating key of
Vigenere was aligned.&lt;/p&gt;

&lt;p&gt;The distance should be then a multiple of the length of the key.&lt;/p&gt;

&lt;p&gt;&lt;label for=&quot;mf-2c67b39cb16460c7f5e089e831cf95e4&quot; class=&quot;margin-toggle &quot;&gt;⊕&lt;/label&gt;&lt;input type=&quot;checkbox&quot; id=&quot;mf-2c67b39cb16460c7f5e089e831cf95e4&quot; class=&quot;margin-toggle &quot; /&gt;&lt;span class=&quot;marginnote &quot;&gt;&lt;img class=&quot;fullwidth&quot; alt=&quot;&quot; src=&quot;/book-of-gehn/assets/kasiski/kasiski_pos_grouped.png&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# group first
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos_grouped&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;defaultdict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos_sorted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pos_grouped&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# compute the gaps later
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delta_stats&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;positions&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos_grouped&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;zip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;positions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;positions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:]))&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;delta_stats&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;label for=&quot;mf-46e954f537e253f23e73044c8610e9aa&quot; class=&quot;margin-toggle &quot;&gt;⊕&lt;/label&gt;&lt;input type=&quot;checkbox&quot; id=&quot;mf-46e954f537e253f23e73044c8610e9aa&quot; class=&quot;margin-toggle &quot; /&gt;&lt;span class=&quot;marginnote &quot;&gt;&lt;img class=&quot;fullwidth&quot; alt=&quot;&quot; src=&quot;/book-of-gehn/assets/kasiski/kasiski_distances.png&quot; /&gt;  &lt;br /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;We simplify the maths and calculate then the difference
between &lt;em&gt;consecutive&lt;/em&gt; positions for a given ngram.&lt;/p&gt;

&lt;p&gt;We assume that difference between non-consecutive values will yield a
multiple of the previous shorter difference hence it will be also a
multiple of the key length.&lt;/p&gt;

&lt;p&gt;In other words, calculating the “multiple of the multiple” does not add any
new information.&lt;/p&gt;

&lt;h2 id=&quot;frequency-of-deltas---frequency_of_deltas-algorithm&quot;&gt;Frequency of deltas - &lt;code class=&quot;highlighter-rouge&quot;&gt;frequency_of_deltas&lt;/code&gt; algorithm&lt;/h2&gt;

&lt;p&gt;Basically we put all the algorithms to work together:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pos_sorted&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;as_ngram_repeated_positions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos_sorted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;delta_stats&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;deltas_from_positions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos_sorted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delta_stats&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;pos_sorted&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;merge_overlaping&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos_sorted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here are some examples using
&lt;a href=&quot;https://pypi.org/project/cryptonita/&quot;&gt;cryptonita&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;cryptonita&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;cryptonita.stats.kasiski&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;frequency_of_deltas&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'ABCDBCDABCDBC'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;frequency_of_deltas&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})]&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'1A0C0B471A0C0B47110E0C1E'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;encoding&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;frequency_of_deltas&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In the last example the first &lt;code class=&quot;highlighter-rouge&quot;&gt;Counter&lt;/code&gt; is for the ngrams
&lt;code class=&quot;highlighter-rouge&quot;&gt;1A 0C 0B&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;0C 0B 47&lt;/code&gt; where found repeated at a distance of 4 once
each one (2 in total). The second &lt;code class=&quot;highlighter-rouge&quot;&gt;Counter&lt;/code&gt; is for &lt;code class=&quot;highlighter-rouge&quot;&gt;1A 0C 0B 47&lt;/code&gt;
repeated once at a distance of 4.&lt;/p&gt;

&lt;p&gt;As predicted the expected effort is linear while the worst case is
quadratic.&lt;/p&gt;

&lt;figure&gt;&lt;figcaption&gt;&lt;span&gt;&lt;br /&gt;
Expected case. &lt;code class=&quot;highlighter-rouge&quot;&gt;frequency_of_deltas&lt;/code&gt; has a linear response when
the size of the input increase linearly.
 &lt;a href=&quot;assets/kasiski/perf_kasiski.py&quot;&gt;&lt;i class=&quot;fab fa-github&quot;&gt;&lt;/i&gt; code&lt;/a&gt;
&lt;/span&gt;&lt;/figcaption&gt;&lt;img src=&quot;/book-of-gehn/assets/kasiski/frequency_of_deltas.png&quot; /&gt;&lt;/figure&gt;

&lt;figure&gt;&lt;figcaption&gt;&lt;span&gt;&lt;br /&gt;
Worst case. &lt;code class=&quot;highlighter-rouge&quot;&gt;frequency_of_deltas&lt;/code&gt; has a quadratic response when
the size of the input increase linearly. Even with this result,
it is better than cubic the naive implementation.
 &lt;a href=&quot;assets/kasiski/perf_kasiski.py&quot;&gt;&lt;i class=&quot;fab fa-github&quot;&gt;&lt;/i&gt; code&lt;/a&gt;
&lt;/span&gt;&lt;/figcaption&gt;&lt;img src=&quot;/book-of-gehn/assets/kasiski/frequency_of_deltas_worst_case.png&quot; /&gt;&lt;/figure&gt;

&lt;h2 id=&quot;final-thoughts&quot;&gt;Final thoughts&lt;/h2&gt;

&lt;p&gt;With &lt;code class=&quot;highlighter-rouge&quot;&gt;frequency_of_deltas&lt;/code&gt; we have the most likely difference or gap,
gap that it should be a multiple of the length of the key.&lt;/p&gt;

&lt;p&gt;But what if a repeated ngram happen just by luck?&lt;/p&gt;

&lt;p&gt;That’s for the Part II.&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/book-of-gehn/articles/2018/05/01/Breaking-Vigenere.html&quot;&gt;Breaking Vigenere&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/book-of-gehn/articles/2019/10/04/Index-of-Coincidence.html&quot;&gt;Index of Coincidence&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://wiki.python.org/moin/TimeComplexity&quot;&gt;Python Time Complexity&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Dynamic_programming&quot;&gt;Dynamic Programming&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;assets/kasiski/MatthewBerntsenBUThesis.7z&quot;&gt;Automating the Cracking of Simple Ciphers, by Matthew C. Berntsen&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Gehn</name></author><summary type="html">The tricky part of breaking the Vigenere cipher consists in finding the length of the key. We discussed this in the breaking Vigenere post. In that occasion we used the Hamming distance and the Index of Coincidence. But another method existed much before the development of the IC around 1922. In 1863, Kasiski published a method to guess the length of the secret key, method that we know today as the Kasiski test. Let’s explore a solution with a worst case of</summary></entry><entry><title type="html">Debug: the Case of a CPU Burning Ruby Process</title><link href="/book-of-gehn/articles/2020/09/13/Debug-the-Case-of-a-CPU-Burning-Ruby-Process.html" rel="alternate" type="text/html" title="Debug: the Case of a CPU Burning Ruby Process" /><published>2020-09-13T00:00:00+02:00</published><updated>2020-09-13T00:00:00+02:00</updated><id>/book-of-gehn/articles/2020/09/13/Debug-the-Case-of-a-CPU-Burning-Ruby-Process</id><content type="html" xml:base="/book-of-gehn/articles/2020/09/13/Debug-the-Case-of-a-CPU-Burning-Ruby-Process.html">&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;executor.rb&lt;/code&gt; is a little program that starts and finishes other programs
based on the needs of the system.&lt;/p&gt;

&lt;p&gt;It is expected to have one and only one &lt;code class=&quot;highlighter-rouge&quot;&gt;executor.rb&lt;/code&gt; process running with
little overhead.&lt;/p&gt;

&lt;p&gt;In one of the machines in the lab I found the opposite: two &lt;code class=&quot;highlighter-rouge&quot;&gt;executor.rb&lt;/code&gt;
instances and one of them running at top speed, consuming 100% of CPU.&lt;/p&gt;

&lt;p&gt;For the rest, the system was working properly so one of
the &lt;code class=&quot;highlighter-rouge&quot;&gt;executor.rb&lt;/code&gt; was doing its job.&lt;/p&gt;

&lt;p&gt;But what was the &lt;em&gt;“twin evil”&lt;/em&gt; process doing with the CPU?&lt;!--more--&gt;&lt;/p&gt;

&lt;h2 id=&quot;ruby-stack-sampling-with-rbspy&quot;&gt;Ruby stack sampling with &lt;code class=&quot;highlighter-rouge&quot;&gt;rbspy&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;To get some insight I used &lt;a href=&quot;https://github.com/rbspy/rbspy&quot;&gt;rbspy&lt;/a&gt;. It
profiles a Ruby process sampling its memory, reconstructing the stack
and showing which stack traces are the most common executed.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo&lt;/span&gt; ./rbspy record &lt;span class=&quot;nt&quot;&gt;--pid&lt;/span&gt; 2331 &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; 120 &lt;span class=&quot;nt&quot;&gt;--raw-file&lt;/span&gt; data.gz        &lt;span class=&quot;c&quot;&gt;# byexample: +skip&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Two minutes of sampling was done for the good and the bad
&lt;code class=&quot;highlighter-rouge&quot;&gt;executor.rb&lt;/code&gt; processes.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;rbspy&lt;/code&gt; can also generate
&lt;a href=&quot;https://rbspy.github.io/using-flamegraphs/&quot;&gt;flame graphs&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;./rbspy report &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; flamegraph &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; data.gz  &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; out-good.svg      &lt;span class=&quot;c&quot;&gt;# byexample: +skip&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;figure class=&quot;fullwidth&quot;&gt;&lt;img src=&quot;/book-of-gehn/assets/debugging/flame-ruby-executor.png&quot; /&gt;&lt;figcaption&gt;Flamegraph of 2 minutes sampling. On top a good behaving `executor.rb`,
spending most of the time waiting (right side). On bottom, its evil twin
with a totally broken call stack.&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Unfortunately the call stack of the buggy process makes no sense.&lt;/p&gt;

&lt;h2 id=&quot;syscall-tracing-with-strace&quot;&gt;Syscall tracing with &lt;code class=&quot;highlighter-rouge&quot;&gt;strace&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;&lt;label for=&quot;mn-2ac570267a9c9aef07d41df2a0f317ad&quot; class=&quot;margin-toggle&quot;&gt; ⊕&lt;/label&gt;&lt;input type=&quot;checkbox&quot; id=&quot;mn-2ac570267a9c9aef07d41df2a0f317ad&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;marginnote&quot;&gt;It would not be first time that I see a infinite loop calling &lt;code class=&quot;highlighter-rouge&quot;&gt;read(fd,
buf, 0)&lt;/code&gt;  &lt;/span&gt;&lt;/p&gt;

&lt;p&gt;I rollback to the traditional
&lt;a href=&quot;https://linux.die.net/man/1/strace&quot;&gt;strace&lt;/a&gt;. It slows down quite a bit
the debugged process but knowing which syscall is being executed can be
of a great help.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;strace &lt;span class=&quot;nt&quot;&gt;-tt&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-T&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 2331
&amp;lt;...&amp;gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;pid 2331] 16:45:05.676271 sched_yield&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 0 &amp;lt;0.000008&amp;gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;pid 2331] 16:45:05.676309 sched_yield&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 0 &amp;lt;0.000008&amp;gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;pid 2331] 16:45:05.676346 sched_yield&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 0 &amp;lt;0.000008&amp;gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;pid 2331] 16:45:05.676383 sched_yield&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 0 &amp;lt;0.000008&amp;gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;pid 2331] 16:45:05.676419 sched_yield&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 0 &amp;lt;0.000007&amp;gt;
&amp;lt;...&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://www.man7.org/linux/man-pages/man2/sched_yield.2.html&quot;&gt;sched_yield()&lt;/a&gt;
is a syscall to &lt;em&gt;“relinquish the CPU”&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The caller thread decides that it cannot make any useful so it tells the
OS that it should be moved out of the CPU (move the thread from running
to ready) so other threads can use it.&lt;/p&gt;

&lt;p&gt;&lt;label for=&quot;mn-616c8d5d8c31981ce03e5e124aef13e8&quot; class=&quot;margin-toggle&quot;&gt; ⊕&lt;/label&gt;&lt;input type=&quot;checkbox&quot; id=&quot;mn-616c8d5d8c31981ce03e5e124aef13e8&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;marginnote&quot;&gt;I talk a marginally about this in my
&lt;a href=&quot;/book-of-gehn/articles/2020/02/15/CPU-Cache-Coherence.html&quot;&gt;other post&lt;/a&gt;
 &lt;/span&gt;&lt;/p&gt;

&lt;p&gt;I found this syscall in the past to implement a neighbor-friendly busy wait
loop. Something like this:&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;wait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;some_condition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;sched_yield&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;No code in &lt;code class=&quot;highlighter-rouge&quot;&gt;executor.rb&lt;/code&gt; was doing such a thing however, I was still missing
something.&lt;/p&gt;

&lt;h2 id=&quot;c-stack-sampling-with-linux-perf&quot;&gt;C stack sampling with Linux &lt;code class=&quot;highlighter-rouge&quot;&gt;perf&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;And &lt;a href=&quot;https://perf.wiki.kernel.org/index.php/Main_Page&quot;&gt;Linux perf&lt;/a&gt;
filled the blanks.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;perf top &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 2331                 &lt;span class=&quot;c&quot;&gt;# byexample: +skip&lt;/span&gt;
&amp;lt;...&amp;gt;
34.90%  &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;kernel]              &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;k] do_syscall_64
15.37%  &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;kernel]              &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;k] syscall_return_via_sysret
 9.08%  &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;unknown]             &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;k] 0xfffffe000000601e
 5.89%  &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;kernel]              &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;k] pvclock_clocksource_read
 5.06%  &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;kernel]              &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;k] __schedule
 2.52%  &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;kernel]              &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;k] __raw_callee_save___pv_queued_spin_unloc
 2.45%  libc-2.24.so          &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;.] __sched_yield
 2.21%  &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;kernel]              &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;k] _raw_spin_lock
 2.16%  &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;kernel]              &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;k] __entry_trampoline_start
 2.01%  libruby-2.3.so.2.3.0  &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;.] rb_thread_stop_timer_thread
 1.86%  &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;unknown]             &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;k] 0xfffffe0000006000
 1.61%  &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;kernel]              &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;k] cpuacct_charge
&amp;lt;...&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;rb_thread_stop_timer_thread&lt;/code&gt; is a function of the ruby virtual
machine and it was my first suspect.&lt;/p&gt;

&lt;p&gt;A search in google completed the story.&lt;/p&gt;

&lt;h2 id=&quot;finding-the-bug-with-google-and-the-open-source-community&quot;&gt;Finding the bug with Google and the Open Source Community&lt;/h2&gt;

&lt;p&gt;Bug reports &lt;a href=&quot;https://bugs.ruby-lang.org/issues/13794&quot;&gt;here&lt;/a&gt; and
&lt;a href=&quot;https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=876377&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A counter is used for signaling between threads and
&lt;a href=&quot;https://en.wikipedia.org/wiki/Compare-and-swap&quot;&gt;CAS&lt;/a&gt; loop for
detecting when it is zero yielding the CPU with &lt;code class=&quot;highlighter-rouge&quot;&gt;sched_yield&lt;/code&gt; if the
condition was not met yet.&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;native_stop_timer_thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ATOMIC_CAS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timer_thread_pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;writing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rb_atomic_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;native_thread_yield&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If a fork happen after one thread increments the counter but before
someone decrements it, the child process will get stuck waiting for the
counter to be zero.&lt;/p&gt;

&lt;p&gt;This makes totally sense for &lt;code class=&quot;highlighter-rouge&quot;&gt;executor.rb&lt;/code&gt; which main task is to fork and
exec other processes.&lt;/p&gt;

&lt;p&gt;But I need to be sure that this is the bug.&lt;/p&gt;

&lt;h2 id=&quot;confirming-the-bug-with-gdb&quot;&gt;Confirming the bug with GDB&lt;/h2&gt;

&lt;p&gt;I attached &lt;a href=&quot;https://www.gnu.org/software/gdb/&quot;&gt;gdb&lt;/a&gt; to ruby process
and confirmed the bug.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;gdb &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 2331                      &lt;span class=&quot;c&quot;&gt;# byexample: +skip&lt;/span&gt;
&amp;lt;...&amp;gt;
0x0000&amp;lt;...&amp;gt; &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;sched_yield &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; from /lib/x86_64-linux-gnu/libc.so.6
&amp;lt;...&amp;gt;
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;gdb&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; bt
&lt;span class=&quot;c&quot;&gt;#0  0x0000&amp;lt;...&amp;gt; in sched_yield () from/lib/x86_64-linux-gnu/libc.so.6&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#1  0x0000&amp;lt;...&amp;gt; in native_stop_timer_thread () atthread_pthread.c&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#2  rb_thread_stop_timer_thread () at thread.c&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#3  0x0000&amp;lt;...&amp;gt; in before_exec_non_async_signal_safe () atprocess.c&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#4  before_exec () at process.c&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#5  rb_f_exec (argc=&amp;lt;optimized out&amp;gt;, argv=&amp;lt;optimized out&amp;gt;) atprocess.c&lt;/span&gt;
&amp;lt;...&amp;gt;
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;gdb&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; frame 2
&lt;span class=&quot;c&quot;&gt;#2  rb_thread_stop_timer_thread () at thread.c&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;gdb&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; p timer_thread_pipe
&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;normal &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;3, 4&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;, low &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;5, 6&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;, owner_process &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 0, writing &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 1&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;With &lt;code class=&quot;highlighter-rouge&quot;&gt;timer_thread_pipe.writing&lt;/code&gt; in 1, the CAS loop will never end.&lt;/p&gt;

&lt;p&gt;Note that attaching a debugger is quite disruptive as it stops the
debugged process; Linux &lt;code class=&quot;highlighter-rouge&quot;&gt;perf&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;rbspy&lt;/code&gt; are much less intrusive
and more appropriate for production environments.&lt;/p&gt;

&lt;h2 id=&quot;final-thoughts&quot;&gt;Final thoughts&lt;/h2&gt;

&lt;p&gt;No single tool can always give you the answer and sometimes you need
more than tools to solve the puzzle.&lt;/p&gt;

&lt;p&gt;You are not alone. People is out there to help you.&lt;/p&gt;

&lt;p&gt;But do not relay in google/stackoverflow only: without searching a little
from your side generic queries like &lt;em&gt;“ruby program consumes 100% CPU”&lt;/em&gt;
will lead you to nowhere.&lt;/p&gt;</content><author><name>Gehn</name></author><summary type="html">executor.rb is a little program that starts and finishes other programs based on the needs of the system. It is expected to have one and only one executor.rb process running with little overhead. In one of the machines in the lab I found the opposite: two executor.rb instances and one of them running at top speed, consuming 100% of CPU. For the rest, the system was working properly so one of the executor.rb was doing its job. But what was the “twin evil” process doing with the CPU?</summary></entry></feed>